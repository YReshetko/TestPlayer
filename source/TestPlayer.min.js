/**
 * Created with IntelliJ IDEA.
 * User: Yurchik
 * Date: 16.02.15
 * Time: 9:23
 * To change this template use File | Settings | File Templates.
 */

if(typeof(InteractiveTask) == 'undefined') InteractiveTask = function(){};
InteractiveTask.VERSION = "2.0.6";

InteractiveTask.STAGE;
InteractiveTask.BACKGROUND_LAYER;
InteractiveTask.COMPONENTS_LAYER;
InteractiveTask.ANIMATION_LAYER;
InteractiveTask.DRAGANDDROP_LAYER;
InteractiveTask.BUTTONS_LAYER;
InteractiveTask.LIBRARY;
InteractiveTask.PATH;
InteractiveTask.CONST;
InteractiveTask.EVENTS;
InteractiveTask.ANSFRAME;
InteractiveTask.PROGRESS;
InteractiveTask.AUDIO;


/**
 *
 * @param options - JSON string format:
 *      - xml - TaskObject full package task
 *      - containerID - ID <div> container on parent page
 *      - errorCallback() - run if canvas can't be created
 *      - successCallback() - run if canvas is created (return in callback prototype of player)
 *      - taskComplateCallback(json) - run if task is complate (return in callback json object)
 * @constructor - return player prototype or run callback function
 */
InteractiveTask.Player = function(options){

	InteractiveTask.CONST = new InteractiveTask.Const();
	//  ѕопытка загрузить и перенастроить константы плеера
	try{
		if (window.XMLHttpRequest){
			this.xhttp=new XMLHttpRequest();
		}else{
			this.xhttp=new ActiveXObject("Microsoft.XMLHTTP");
		};
		this.xhttp.open("GET",options.imagesPath+"config.json",false);
		this.xhttp.send();
		InteractiveTask.CONST.setProperty(JSON.parse(this.xhttp.responseText));
		this.xhttp.responseText = null;
		this.xhttp = null;
	}catch(e){
		InteractiveTask.log(e);
	};
	if(options.isPrintLog!=undefined){
		if(options.isPrintLog == true){
			InteractiveTask.CONST.IS_PRINT_LOG = true;
		};
	};
	InteractiveTask.log("[Player] - start init - ", this);

	InteractiveTask.log("[Player] - init UI congig");
	InteractiveTask.EVENTS = new InteractiveTask.Events();
	if(options.xml == undefined){
		alert("Task can't be created without xml file");
		return null;
	}else{
		this.xml = options.xml;
	};
	//Default stage size
	this.width = 742;
	this.height = 530;
	this.isFullScreen = false;

	// Containers initialisation
	this.containerID = options.containerID;
	this.progressContainerID = options.progressContainerID;
	//If size should be changed
	if(this.xml.WIDTH!=undefined && this.xml.HEIGHT!=undefined){
		this.width = parseInt(this.xml.WIDTH);
		this.height = parseInt(this.xml.HEIGHT);
	};
	InteractiveTask.log("[Player] - start init stage");
	InteractiveTask.STAGE = new Konva.Stage({
		container : options.containerID,
		width: this.width,
		height: this.height
	});
	InteractiveTask.log("[Player] - complate init stage");
	InteractiveTask.BACKGROUND_LAYER = new Konva.Layer();
	var bgRectangle = new Konva.Rect({
		width : this.width,
		height : this.height,
		fill : InteractiveTask.formatColor("0", 0)
	});
	InteractiveTask.BACKGROUND_LAYER.add(bgRectangle);

	InteractiveTask.COMPONENTS_LAYER = new Konva.Layer();
	InteractiveTask.ANIMATION_LAYER = new Konva.Layer();
	InteractiveTask.DRAGANDDROP_LAYER = new Konva.Layer();
	InteractiveTask.BUTTONS_LAYER = new Konva.Layer();

	InteractiveTask.STAGE.add(InteractiveTask.BACKGROUND_LAYER);
	InteractiveTask.STAGE.add(InteractiveTask.COMPONENTS_LAYER);
	InteractiveTask.STAGE.add(InteractiveTask.ANIMATION_LAYER);
	InteractiveTask.STAGE.add(InteractiveTask.DRAGANDDROP_LAYER);
	InteractiveTask.STAGE.add(InteractiveTask.BUTTONS_LAYER);
	InteractiveTask.log("[Player] - complate init layers");

	InteractiveTask.BACKGROUND_LAYER.canvas._canvas.id = "background_layer";
	InteractiveTask.COMPONENTS_LAYER.canvas._canvas.id = "components_layer";
	InteractiveTask.ANIMATION_LAYER.canvas._canvas.id = "animation_layer";
	InteractiveTask.DRAGANDDROP_LAYER.canvas._canvas.id = "draganddrop_layer";
	InteractiveTask.BUTTONS_LAYER.canvas._canvas.id = "buttons_layer";

	InteractiveTask.BACKGROUND_LAYER.draw();
	InteractiveTask.log("[Player] - draw background");

	/* }catch(error){
	 if(options.errorCallback != 'undefined'){
	 options.errorCallback();
	 }else{
	 alert("Your sourece doesn't have 'errorCallback' function");
	 }
	 return null;
	 }   */
	//remember task complate callback function

	this.eventDispatcher =  options.callBack;

	//this.taskComplateCallbackFunction = options.taskComplateCallback;

	//try call success function if canvas is created
	/*if(options.successCallback!='undefined'){
	 // options.successCallback();
	 this.successCallback = options.successCallback;
	 }  */
	InteractiveTask.PATH = options.xml.RESOURCE;

	InteractiveTask.AUDIO = new InteractiveTask.audioControl(this);
	InteractiveTask.log("[Player] - start init library");
	InteractiveTask.LIBRARY = new InteractiveTask.ImageLibrary(options.xml, this, options.imagesPath);
	InteractiveTask.LIBRARY.findImages();

	var self = this;
	window.onresize = function(){
		self.resizePlayer();
	};


	if(InteractiveTask.isMobileBrowser()){
		InteractiveTask.StartFrame(this);
	}else{
		this.startFillLibrary();
	};
};
InteractiveTask.Player.prototype.startFillLibrary = function(){
	if(InteractiveTask.LIBRARY.hasAudio()){
		InteractiveTask.LIBRARY.loadAudio();
	};
	InteractiveTask.LIBRARY.startLoading();
	InteractiveTask.log("[Player] - start loading images");
};

/*ћетод очистки плеера после его отработки*/
InteractiveTask.Player.prototype.clear = function(){
	InteractiveTask.log("[Player] - start clearing");
	try{
		InteractiveTask.log("[Player] - try clear current timeout for next task");
		if(this.startTaskTimeout){
			try{
				clearTimeout(this.startTaskTimeout);
			}catch(e){
				InteractiveTask.log(e);
			};
		};
		InteractiveTask.log("[Player] - clear current task");
		if(this.currentTask){
			this.currentTask.clear();
			InteractiveTask.disposeObject(this.currentTask);
		};
		InteractiveTask.log("[Player] - dispose ansframe");
		InteractiveTask.disposeObject(InteractiveTask.ANSFRAME);
		InteractiveTask.ANSFRAME = null;
		InteractiveTask.log("[Player] - clear progress bar");
		if(InteractiveTask.PROGRESS!=undefined){
			InteractiveTask.PROGRESS.clear();
			InteractiveTask.PROGRESS = null;
		};
		InteractiveTask.log("[Player] - clear buttons layer");
		InteractiveTask.BUTTONS_LAYER.clear();
		InteractiveTask.BUTTONS_LAYER.destroyChildren();

		InteractiveTask.PATH = null;

		InteractiveTask.EVENTS = null;

		InteractiveTask.log("[Player] - clear stage");
		InteractiveTask.STAGE.clear();
		InteractiveTask.STAGE.clearCache();
		InteractiveTask.LIBRARY.clear();
		InteractiveTask.STAGE.destroyChildren();
		InteractiveTask.STAGE.destroy();

		InteractiveTask.log("[Player] - clear layers");
		InteractiveTask.BACKGROUND_LAYER = null;
		InteractiveTask.COMPONENTS_LAYER = null;
		InteractiveTask.ANIMATION_LAYER = null;
		InteractiveTask.DRAGANDDROP_LAYER = null;
		InteractiveTask.BUTTONS_LAYER = null;
		InteractiveTask.STAGE = null;

		InteractiveTask.AUDIO.clear();
		InteractiveTask.AUDIO = null;

		window.onresize = function(){
			return;
		};
		InteractiveTask.log("[Player] - dispose player");
		//InteractiveTask.disposeObject(this);
		InteractiveTask.CONST = null;
	}catch(e){
		InteractiveTask.log("[Player] - clear error:");
		InteractiveTask.error(e);
	}
};

InteractiveTask.Player.prototype.changeFullScreen = function(){
	this.isFullScreen = !this.isFullScreen;
};
InteractiveTask.Player.prototype.resizePlayer = function(){
	var contWidth = parseInt($("#"+this.containerID).width());
	var contHeight = parseInt($("#"+this.containerID).css('max-height'), 10) || $("#"+this.containerID).height();
	//var contHeight = parseInt($("#"+this.containerID).height());
	var scaleX, scaleY, minScale;
	InteractiveTask.log("[Player] - parent width = " + contWidth + "; parent height = " + contHeight);
	if(!this.isFullScreen){
		//InteractiveTask.log("not full screen");
		if(contWidth<this.width || contHeight<this.height){
			scaleX = contWidth/this.width;
			scaleY = contHeight/this.height;
			minScale = (scaleX<scaleY)?scaleX:scaleY;
		}else{
			var minScale = 1;
		};
	}else{
		scaleX = window.screen.availWidth/this.width;
		scaleY = window.screen.availHeight/this.height;
		minScale = (scaleX<scaleY)?scaleX:scaleY;
	};
	//InteractiveTask.log("min scale = " + minScale);
	InteractiveTask.STAGE.scaleX(minScale);
	InteractiveTask.STAGE.scaleY(minScale);
	InteractiveTask.STAGE.width(this.width*minScale);
	InteractiveTask.STAGE.height(this.height*minScale);

	if(InteractiveTask.PROGRESS!=undefined){
		InteractiveTask.PROGRESS.scale(minScale);
	};
};
InteractiveTask.Player.prototype.progressSelect = function(taskID){
	if(InteractiveTask.PROGRESS!=undefined){
		InteractiveTask.PROGRESS.select(taskID);
	};
};
InteractiveTask.Player.prototype.progressSetAnswer = function(taskID, flag){
	if(InteractiveTask.PROGRESS!=undefined){
		InteractiveTask.PROGRESS.setComplate(taskID, flag);
	};
};

InteractiveTask.Player.prototype.libraryLoadComplate = function(){
	//this.library.printImages();
	//this.successCallback()
	/*this.buttonLayers = {
	 restart : new Konva.Layer(),
	 dontknow : new Konva.Layer(),
	 understand : new Konva.Layer(),
	 check : new Konva.Layer(),
	 sound : new Konva.Layer(),
	 fullscreen : new Konva.Layer(),
	 pause : new Konva.Layer()
	 };  */
	InteractiveTask.log("[Player] - complate loading images");
	InteractiveTask.ANSFRAME = new InteractiveTask.TestChangeFrame(this.width, this.height, this);
	try{
		InteractiveTask.PROGRESS = new InteractiveTask.TestProgress({
			xml : this.xml,
			containerID : this.progressContainerID
		});
	}catch(e){
		//InteractiveTask.log(e);
		this.eventDispatcher(InteractiveTask.EVENTS.INIT_PROGRESS_ERROR, null);
	};
	InteractiveTask.log("[Player] - dispatch init playe");
	this.eventDispatcher(InteractiveTask.EVENTS.INIT_PLAYER_SUCCESS, null);
};

InteractiveTask.Player.prototype.setEvent = function(event){
	//InteractiveTask.log(event.keyCode);
	switch (event.type){
		case "keyboard":
			switch (event.keyCode){
				case 87:
					// alert("UP");

					break;
				case 83:
					//alert("DOWN");
					break;
				case 65:
					//alert("LEFT");
					this.currentTask.rotate(22.5);
					break;
				case 68:
					//alert("RIGHT");
					this.currentTask.rotate(-22.5);
					break;

			};
			break;
	};
	InteractiveTask.STAGE.draw();
};
InteractiveTask.Player.prototype.buttonEvents = function(value, event){
	this.eventDispatcher(InteractiveTask.EVENTS.MOUSE_OVER_OUT_BUTTON, {
		button : value,
		event : event
	});
};

InteractiveTask.Player.prototype.pause = function(){
	//InteractiveTask.log("pause select");
	this.currentTask.timer.stop();
	InteractiveTask.ANSFRAME.wait();
	var self = this;
	InteractiveTask.ANSFRAME.waitFrame.on("mousedown touchstart", function(evt){
		self.resume();
	});
};
InteractiveTask.Player.prototype.resume = function(){
	InteractiveTask.ANSFRAME.close();
	this.currentTask.timer.resume();
	InteractiveTask.ANSFRAME.waitFrame.off("mousedown touchstart");
};
InteractiveTask.Player.prototype.complatePackage = function(){
	InteractiveTask.log("[Player] - dispatch TASK_COMPLATE");
	this.eventDispatcher(InteractiveTask.EVENTS.TASK_COMPLATE, this.getOutResult());
};
InteractiveTask.Player.prototype.getOutResult = function(){
	var i,l;
	l = this.outResult.length;
	var tableResult = new Array();
	var maxScore = 0;
	var currentScore = 0;
	var cTaskResult = 0; // результат только дл€ текущего задани€
	var taskID = 0;
	var deltaScore;
	var deltaTime;
	this.outResult.numComplateTask = 0;
	if(this.isTest()){
		for(i=0;i<l;i++){
			if(!this.outResult[i].isImaginary) {
				++taskID;
				maxScore += this.outResult[i].maximumResult;
				if(this.outResult[i].isComplate){
					++this.outResult.numComplateTask;
					cTaskResult = this.calculateResultForTask(i);
					tableResult.push({taskID : taskID, currentResult : cTaskResult, maximumResult : this.outResult[i].maximumResult});
					currentScore += cTaskResult;
				}else{
					tableResult.push({taskID : taskID, currentResult : 0, maximumResult : this.outResult[i].maximumResult});
				};

			};
		};
	}else{
		for(i=0;i<l;i++){
			if(!this.outResult[i].isImaginary && this.outResult[i].level == "1") {
				++taskID;
				maxScore += this.outResult[i].maximumResult;
				if(this.outResult[i].isComplate){
					++this.outResult.numComplateTask;
					cTaskResult = this.calculateResultForTask(i);
					tableResult.push({taskID : taskID, currentResult : cTaskResult, maximumResult : this.outResult[i].maximumResult});
					currentScore += cTaskResult;
				}else{
					tableResult.push({taskID : taskID, currentResult : 0, maximumResult : this.outResult[i].maximumResult});
				};
			};
		};
	};
	this.outResult.links = InteractiveTask.getIDLessons(this.xml);
	this.outResult.tableResult = tableResult;
	this.outResult.maxScore = maxScore;
	this.outResult.currentScore = currentScore;
	return this.outResult;
};
/**
 * ¬ычисление результата дл€ i-ого задани€ с учетом факторов вли€ющих на понижение балла (подвод€щие, жизни, таймер)
 * @param i
 * @returns {number}
 */
InteractiveTask.Player.prototype.calculateResultForTask = function(i){
	var cTaskResult = 0; // результат только дл€ текущего задани€
	var deltaScore;
	var deltaTime;
	cTaskResult = this.outResult[i].maximumResult * Math.pow(InteractiveTask.CONST.DECREASING_COEFFICIENT, this.outResult[i].numHelping);
	if(this.outResult[i].maxHealth>0){
		deltaScore = (1-(1/this.outResult[i].maxHealth));
		cTaskResult = cTaskResult*Math.pow(deltaScore, (this.outResult[i].maxHealth - this.outResult[i].numHealth));
	};
	if(this.outResult[i].time>0){
		if(this.outResult[i].timeForMaxScore==0){
			deltaTime = this.outResult[i].time/InteractiveTask.CONST.FULL_TIME_DIVIDER;
			deltaScore = cTaskResult/InteractiveTask.CONST.FULL_TIME_DIVIDER;
			cTaskResult = cTaskResult - deltaScore * Math.floor((this.outResult[i].time - this.outResult[i].currentTime)/deltaTime);
		};
		if(this.outResult[i].timeForMaxScore>0 && this.outResult[i].currentTime+1<(this.outResult[i].time - this.outResult[i].timeForMaxScore)){
			deltaTime = (this.outResult[i].time - this.outResult[i].timeForMaxScore)/InteractiveTask.CONST.TIME_DIVIDER;
			deltaScore = cTaskResult/InteractiveTask.CONST.TIME_DIVIDER;
			cTaskResult = cTaskResult - deltaScore * Math.floor((this.outResult[i].time - this.outResult[i].timeForMaxScore - this.outResult[i].currentTime)/deltaTime);
		};
	};
	return cTaskResult;
};


/***********************************************************************
 * Block of start task                                                 *
 ***********************************************************************/
InteractiveTask.Player.prototype.startTask = function(){
	// this.buttonLayer = new Konva.Layer();
	/*this.buttonLayers = {
	 restart : new Konva.Layer(),
	 dontknow : new Konva.Layer(),
	 understand : new Konva.Layer(),
	 check : new Konva.Layer(),
	 sound : new Konva.Layer(),
	 fullscreen : new Konva.Layer()
	 }; */
	InteractiveTask.log("[Player] - start task");
	InteractiveTask.log("[Player] - create button system");
	this.buttonSystem = new InteractiveTask.ButtonSystem(this.width, this.height, this);
	InteractiveTask.log("[Player] - create ans frames");
	InteractiveTask.ANSFRAME.setFscreenButton(this.buttonSystem.fullscreen.button);
	InteractiveTask.log("[Player] - prepare task");
	this.prepareArrayTaskOptions();
	this.currentTaskID = 0;
	this.oldTaskID = 0;
	InteractiveTask.log("[Player] - start current task/ id = "+ this.currentTaskID);
	this.startCurrentTask();
};
InteractiveTask.Player.prototype.prepareArrayTaskOptions = function(){
	this.xmlTaskArray = new Array();
	this.outResult = new Object();
	if(this.xml.TASK[0]==undefined){
		this.xmlTaskArray[0] = this.xml.TASK;
	}else{
		/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*
		 * TODO: mix tasks or block of tasks (for MNIMOE) if isRandom == true and Equivalent != 1 *
		 *!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!*/
		this.xmlTaskArray = this.xml.TASK;
	};
	var i,l;
	l = this.xmlTaskArray.length;
	var maxResult;
	for(i=0;i<l;i++){
		maxResult = (this.xmlTaskArray[i]["-eval"]!=undefined)?(parseInt(this.xmlTaskArray[i]["-eval"])):1;
		this.outResult[i] = {
			level : this.xmlTaskArray[i]["-level"],
			id : i,
			isImaginary : this.isMnimoe(i),
			isComplate : false,
			maximumResult : maxResult,  // вз€ть данный результат из файла задани€ (разработать в конструкторе установку баллов)
			numHelping : 0, // указывать уровень подвод€щего задани€ дл€ определени€ понижающего бала
			comment : "",

			maxHealth : (this.xmlTaskArray[i].HEALTH)?parseInt(this.xmlTaskArray[i].HEALTH):0,
			numHealth : (this.xmlTaskArray[i].HEALTH)?parseInt(this.xmlTaskArray[i].HEALTH):0,

			time : (this.xmlTaskArray[i].TIMER)?InteractiveTask.getTimeByString(this.xmlTaskArray[i].TIMER):0,
			timeForMaxScore : (this.xmlTaskArray[i].MAX_SCORE_TIMER)?InteractiveTask.getTimeByString(this.xmlTaskArray[i].MAX_SCORE_TIMER):-1,
			currentTime : -1
		};
	};
	this.outResult.length = l;
	this.outResult.maxTasks = this.getNumberResultTask();
	this.outResult.numComplateTask = 0;
};
/************************************************************************************
 /************************************************************************************
 /************************************************************************************
 *    ЅЋќ   ќЌ“–ќЋя —ћ≈Ќџ «јƒјЌ»…
 ************************************************************************************/
/************************************************************************************/
/************************************************************************************/
InteractiveTask.Player.prototype.finishTask = function(isComplate){
	// останавливаем таймер
	this.currentTask.stopTimer();
	// записываем в результат успешное завершение задани€
	this.outResult[this.currentTaskID].isComplate = isComplate;
	//  «аписываем в результат сколько жизней осталось
	this.outResult[this.currentTaskID].numHealth = this.currentTask.getCurrentHealth();
	//  «аписываем врем€ потраченое на решение задани€
	this.outResult[this.currentTaskID].currentTime = this.currentTask.getCurrentTimer();

	//  в прогресс баре устанавливаем результат завершени€ задани€
	this.progressSetAnswer(this.xmlTaskArray[this.currentTaskID]["-id"], isComplate);
	//  запоминаем последнее задание (его номер)
	this.oldTaskID = this.currentTaskID;
	//  ƒиспатчим событие завершени€ текущего задани€
	this.eventDispatcher(InteractiveTask.EVENTS.CURRENT_TASK_COMPLATE, null);
};

// «адание завершилось успешно
InteractiveTask.Player.prototype.complateCurrentTask = function(){
	this.finishTask(true);
	if(this.isTaskChangeAnimation()){InteractiveTask.ANSFRAME.success();};
	this.currentTaskID = this.nextTask(InteractiveTask.EVENTS.TASK_SUCCESS_COMPLATE);
	this.dispatchIsTaskComplate(true, this.oldTaskID);
};
// «авершение задани€ при ошибке
// - «акончилс€ таймер
// - «акончились жизни
// - Ќажата кнопка "Ќе знаю" в тесте
InteractiveTask.Player.prototype.misstake = function(){
	this.finishTask(false);
	if(!this.isMnimoe(this.currentTaskID)){

		if(this.isTaskChangeAnimation()){InteractiveTask.ANSFRAME.fail();};
		this.currentTaskID = this.nextTask(InteractiveTask.EVENTS.TASK_MISSTAKE);
	}else{
		this.currentTaskID = this.nextTask(InteractiveTask.EVENTS.TASK_MISSTAKE_MNIMOE);
	};
	this.dispatchIsTaskComplate(false, this.oldTaskID);
};
// «авершение задани€ гибридного режима при повторной ошибке
// - закончилс€ таймер дважды
// - закончились ошибки дважды
InteractiveTask.Player.prototype.doubleMisstake = function(){
	this.finishTask(false);
	if(this.isTaskChangeAnimation()){InteractiveTask.ANSFRAME.fail();};
	this.currentTaskID = this.nextTask(InteractiveTask.EVENTS.TASK_DOUBLE_MISSTAKE);
	this.dispatchIsTaskComplate(false, this.oldTaskID);
};
//  Ќажата кнопка "Ќе знаю"
InteractiveTask.Player.prototype.dontKnow = function(){
	if(this.isTest()){
		this.misstake();
	} else{
		this.finishTask(false);
		this.currentTaskID = this.nextTask(InteractiveTask.EVENTS.TASK_DONT_KNOW);
		this.startCurrentTask();
	};
};
// Ќажата кнопка "я пон€л"
InteractiveTask.Player.prototype.understand = function(){
	// останавливаем таймер
	this.currentTask.stopTimer();
	this.oldTaskID = this.currentTaskID;
	this.currentTaskID = this.nextTask(InteractiveTask.EVENTS.TASK_UNDERSTAND);
	this.startCurrentTask();
};
// Ќажата кнопка "–естарт" или перезагрузка задани€ по другой причине

InteractiveTask.Player.prototype.restart = function(){
	// останавливаем таймер
	this.currentTask.stopTimer();
	this.oldTaskID = this.currentTaskID;
	this.startCurrentTask();
};
// ≈сть ли у задани€ св€занное аудио и диспатчит в случае необходимости
InteractiveTask.Player.prototype.dispatchIsTaskComplate = function(flag, id){
	if(flag){
		if(this.hasSuccessAudio(id)){
			//this.eventDispatcher(InteractiveTask.EVENTS.TEST_SUCCESS_COMPLATE, this.getSuccessAudioID(id));
			InteractiveTask.AUDIO.init(this.getSuccessAudioID(id), true);
			return;
		};
	} else{
		if(this.hasFailAudio(id)){
			//this.eventDispatcher(InteractiveTask.EVENTS.TEST_FAIL_COMPLATE, this.getFailAudioID(id));
			InteractiveTask.AUDIO.init(this.getFailAudioID(id), true);
			return;
		};
	};
	if(this.isTaskChangeAnimation()){
		var self = this;
		this.startTaskTimeout = setTimeout(function(){
			self.startTaskTimeout = null;
			self.startCurrentTask();
		}, InteractiveTask.CONST.SHOWING_FINAL_FRAME_TIME);
	}else{
		this.startCurrentTask();
	};
};

// ѕолучение следующего задани€ при различных событи€х
InteractiveTask.Player.prototype.nextTask = function(value){
	switch (value){
		case InteractiveTask.EVENTS.TASK_MISSTAKE_MNIMOE:
		case InteractiveTask.EVENTS.TASK_SUCCESS_COMPLATE:
			if(this.isTest()) return this.getNextTaskInList(this.currentTaskID);
			return this.getNextTaskInDiffTreeWithPositive(this.currentTaskID);
		case InteractiveTask.EVENTS.TASK_MISSTAKE:
			if(this.isTest()) return this.getNextTaskInList(this.currentTaskID);
			return this.getPodvodjashee(this.currentTaskID);
		case InteractiveTask.EVENTS.TASK_DONT_KNOW:
			return this.getPodvodjashee(this.currentTaskID);
		case InteractiveTask.EVENTS.TASK_UNDERSTAND:
			if(this.isTest()){
				if(this.isMnimoe(this.currentTaskID))return this.getNextTaskInList(this.currentTaskID);
			}else{
				if(this.isMnimoe(this.currentTaskID)) return this.getNextTaskInDiffTreeWithPositive(this.currentTaskID);
				if(!this.isEqualLevels(this.currentTaskID, 0)) return this.getKornevoe(this.currentTaskID)
			};
		case InteractiveTask.EVENTS.TASK_RESTART:
			return this.currentTaskID;
		case InteractiveTask.EVENTS.TASK_DOUBLE_MISSTAKE:
			return this.getNextTaskInDiffTreeWithPositive(this.currentTaskID);
	};
};
// ѕолучение номера следующего задани€ в дифференцированном дереве  при позитивном переходе:
// - успешное завершение
// - кнопка € пон€л
// - ошибка в мнимом
InteractiveTask.Player.prototype.getNextTaskInDiffTreeWithPositive = function(value){
	switch(this.getPositionInTree(value)){
		case 'lastTask':
			return -1;
		case 'midleVetv':
			return this.getNext(value);
		case 'lastVetv':
			return this.getKornevoe(value);
	};
};
InteractiveTask.Player.prototype.getPositionInTree = function(value){
	var i,l;
	l = this.xmlTaskArray.length;
	if(this.isEqualLevels(value, 0) && this.isFinaly(value)) return 'lastTask';
	if(!this.isEqualLevels(value, 0) && this.isFinaly(value)) return 'lastVetv';
	for(i=value+1;i<l;i++){
		if(this.isEqualLevels(value, i)) return 'midleVetv';
		if(this.isLevelBigger(value, i)) return 'lastVetv';
	};
	if(this.isEqualLevels(value, 0)) return 'lastTask';
	return 'lastVetv';
};
InteractiveTask.Player.prototype.getKornevoe = function(value){
	var i,l;
	l = this.xmlTaskArray.length;
	for(i=value-1;i>=0;i--){
		if(this.isLevelBigger(value, i)) return i;
	};
	return 0;
};
InteractiveTask.Player.prototype.getMainRoot = function(value){
	if(this.isEqualLevels(value, 0)) return value;
	if(value == 0) return 0;
	var i = value-1;
	while(!this.isEqualLevels(i, 0)){
		if(i==0) return 0;
		--i;
	};
	return i;
};
InteractiveTask.Player.prototype.getNext = function(value){
	var i,l;
	l = this.xmlTaskArray.length;
	for(i=value+1;i<l;i++){
		if(this.isEqualLevels(value, i)) return i;
	};
	return value;
};
InteractiveTask.Player.prototype.getRestartDiffTree = function(value){
	var i,l;
	l = this.xmlTaskArray.length;
	if(value==0) return 0;
	if(!this.isMnimoe(value-1) && this.isEqualLevels(value, value-1)) return value;
	if(!this.isEqualLevels(value, value-1)) return value;
	for(i=value-1;i>=0;i--){
		if(!this.isMnimoe(i) && this.isEqualLevels(i, i+1)) return (i+1);
		if(!this.isEqualLevels(i, i+1)) return (i+1);
	};
	return value;
};
InteractiveTask.Player.prototype.getPodvodjashee = function(value){
	if(this.isFinaly(value)) return this.getRestartDiffTree(value);
	if(this.isLevelBigger(value+1, value)) return (value+1);
	return this.getRestartDiffTree(value);
};
// ѕолучение номера следующего задани€ в линейном списке
// возвращает -1 если следующего нет
// возвращает ID если есть
InteractiveTask.Player.prototype.getNextTaskInList = function(value){
	if(this.isFinaly(value)) return -1;
	return value+1;
};

InteractiveTask.Player.prototype.isFinaly = function(value){
	if(value >= this.xmlTaskArray.length-1) return true;
	return false;
};
InteractiveTask.Player.prototype.getTaskLevel = function(value){
	return parseInt(this.xmlTaskArray[value]["-level"]);
};
InteractiveTask.Player.prototype.isEqualLevels = function(value1, value2){
	if(this.getTaskLevel(value1)==this.getTaskLevel(value2)) return true;
	return false;
};
InteractiveTask.Player.prototype.isLevelBigger = function(value1, value2){
	if(this.getTaskLevel(value1)>this.getTaskLevel(value2)) return true;
	return false;
};

/***********************************************************************
 * –абота с экраном                                                    *
 ***********************************************************************/
InteractiveTask.Player.prototype.fullscreenPress = function(){
	this.eventDispatcher(InteractiveTask.EVENTS.FULL_SCREEN_CHANGE, null);
};
/***********************************************************************
 * –абота со звуком                                                    *
 ***********************************************************************/
InteractiveTask.Player.prototype.repeatSound = function(){
	//this.eventDispatcher(InteractiveTask.EVENTS.TEST_START, this.getStartAudioID(this.currentTaskID));
	InteractiveTask.AUDIO.init(this.getStartAudioID(this.currentTaskID), false);
};
//
/* ЅЋќ  ѕ–ќ¬≈– » ЌјЋ»„»я ѕ–» –≈ѕЋ≈ЌЌќ√ќ ј”ƒ»ќ » ¬ќ«¬–јў≈Ќ»я Ќќћ≈–ќ¬ ‘ј…Ћќ¬*/
//
InteractiveTask.Player.prototype.hasStartAudio = function(value){
	return this.hasAudio({
		id : value,
		audioType : "STARTAUDIO"
	});
};
InteractiveTask.Player.prototype.getStartAudioID = function(value){
	return this.getAudioID({
		id : value,
		audioType : "STARTAUDIO"
	});
};
InteractiveTask.Player.prototype.hasSuccessAudio = function(value){
	return this.hasAudio({
		id : value,
		audioType : "SUCCESSAUDIO"
	});
};
InteractiveTask.Player.prototype.getSuccessAudioID = function(value){
	return this.getAudioID({
		id : value,
		audioType : "SUCCESSAUDIO"
	});
};
InteractiveTask.Player.prototype.hasFailAudio = function(value){
	return this.hasAudio({
		id : value,
		audioType : "FAILAUDIO"
	});
};
InteractiveTask.Player.prototype.getFailAudioID = function(value){
	return this.getAudioID({
		id : value,
		audioType : "FAILAUDIO"
	});
};

InteractiveTask.Player.prototype.hasAudio = function(value){
	if(this.xmlTaskArray[value.id].AUDIO == undefined) return false;
	return (this.xmlTaskArray[value.id].AUDIO[value.audioType]["-isRun"] == "true");
};
InteractiveTask.Player.prototype.getAudioID = function(value){
	if(this.xmlTaskArray[value.id].AUDIO[value.audioType]["#cdata-section"]!=undefined){
		if(this.xmlTaskArray[value.id].AUDIO[value.audioType]["#cdata-section"]!=""){
			if(this.xmlTaskArray[value.id].AUDIO[value.audioType]["#cdata-section"].indexOf(" ")==-1){
				return this.xmlTaskArray[value.id].AUDIO[value.audioType]["#cdata-section"];
			};
		};
	};
	return this.xmlTaskArray[value.id].AUDIO[value.audioType]["-id"];
};
// TODO: Create frame and control buttons

/***********************************************************************
 * Select and run task                                                 *
 ***********************************************************************/
InteractiveTask.Player.prototype.startCurrentTask = function(){
	InteractiveTask.log("[Player] - start current task");
	if(this.currentTaskID!=-1){
		//  перед началом задани€, в случае необходимости снижаем балл за полученную помощь
		this.downScore();

		if(this.currentTask!=null){
			this.currentTask.clear();
			InteractiveTask.disposeObject(this.currentTask);
		};
		InteractiveTask.log("[Player] - create current task");
		this.currentTask = new InteractiveTask.SampleTask(this.xmlTaskArray[this.currentTaskID], this);
		InteractiveTask.log("[Player] - change button visible");
		this.visibleButtonsControl();
		InteractiveTask.log("[Player] - progress select");
		this.progressSelect(this.xmlTaskArray[this.currentTaskID]["-id"]);
		InteractiveTask.log("[Player] - create controllers and elements");
		this.currentTask.checkProto();


		if(this.isTaskChangeAnimation()){InteractiveTask.ANSFRAME.close();};
		InteractiveTask.log("[Player] - try start sound");
		if(this.hasStartAudio(this.currentTaskID)){
			this.repeatSound();
		};
	}else{
		InteractiveTask.log("[Player] - complate package");
		this.complatePackage();
	};
	/**
	 * Test of RUN One Task
	 */
	//this.currentTask.addEventListener("CurrentTaskComplate", this.complateCurrentTask);
	//new InteractiveTask.AnimationController();

};
/************************************************************************************
 *  онтроль визуализации кнопок
 */
InteractiveTask.Player.prototype.visibleButtonsControl = function(){
	if(this.isTest()){
		if(this.isMnimoe(this.currentTaskID)){
			this.buttonSystem.understand.visible(true);
		}else{
			this.buttonSystem.understand.visible(false);
		};
	}else{
		if(this.hasRootTask(this.currentTaskID)){
			this.buttonSystem.understand.visible(true);
		}else{
			if(this.isMnimoe(this.currentTaskID)){
				this.buttonSystem.understand.visible(true);
			}else{
				this.buttonSystem.understand.visible(false);
			};
		};
		if(this.hasHelpingTask(this.currentTaskID)){
			this.buttonSystem.dontknow.visible(true);
		}else{
			this.buttonSystem.dontknow.visible(false);
		};
	};
	if(this.hasStartAudio(this.currentTaskID)){
		this.buttonSystem.sound.visible(true);
	}else{
		this.buttonSystem.sound.visible(false);
	};
	this.buttonSystem.pause.visible(false);
	this.buttonSystem.fullscreen.visible(true);
	this.buttonSystem.replace();

};
/********************************************
 * устанавливаем снижающий балл на задние
 * @returns {*}
 */
InteractiveTask.Player.prototype.downScore = function(){
	if(this.oldTaskID+1 == this.currentTaskID){
		var downTaskID = this.getMainRoot(this.oldTaskID);
		var level = parseInt(this.xmlTaskArray[this.currentTaskID]["-level"]);
		if(this.outResult[downTaskID].numHelping<level-1){
			this.outResult[downTaskID].numHelping=level-1;
		};
	};
};

/************************************************************************************
 /************************************************************************************
 /************************************************************************************
 *    ЅЋќ   ќЌ“–ќЋя —ћ≈Ќџ «јƒјЌ»…    ќ ќЌ„≈Ќ
 ************************************************************************************/
/************************************************************************************/
/************************************************************************************/
/***********************************************************************
 * Options of task package                                             *
 ***********************************************************************/

InteractiveTask.Player.prototype.isTest = function(){
	return this.isTag("TEST", false);
};
InteractiveTask.Player.prototype.isCheck = function(){
	return this.isTag("CHECK", false);
};
InteractiveTask.Player.prototype.isRandom = function(){
	return this.isTag("RANDOM", false);
};
InteractiveTask.Player.prototype.isDelivery = function(){
	return this.isTag("DELIVERY", false);
};
InteractiveTask.Player.prototype.isAutoDelivery = function(){
	return this.isTag("ISAUTODELIVERY", false);
};
InteractiveTask.Player.prototype.isTaskChangeAnimation = function(){
	return this.isTag("TESTANIMATION", false);
};
InteractiveTask.Player.prototype.isMnimoe = function(value){
	if(this.xmlTaskArray[value].MNIMOE == "true") return true;
	return false;
};

InteractiveTask.Player.prototype.hasRootTask = function(value){
	if(this.xmlTaskArray[value]["-level"] != "1") return true;
	return false;
};
InteractiveTask.Player.prototype.hasHelpingTask = function(value){
	if(this.xmlTaskArray.length-1 == value) return false;
	var thisTaskLevel = parseInt(this.xmlTaskArray[value]["-level"]);
	var nextTaskLevel = parseInt(this.xmlTaskArray[value+1]["-level"]);
	if(nextTaskLevel>thisTaskLevel) return true;
	return false;
};
InteractiveTask.Player.prototype.getNumberResultTask = function(){
	var i,l;
	var numTasks = 0;
	l = this.xmlTaskArray.length;
	if(this.isTest()){
		for(i=0;i<l;i++){
			if(!this.isMnimoe(i)) ++numTasks;
		};
	}else{
		for(i=0;i<l;i++){
			if(!this.isMnimoe(i) && this.isEqualLevels(i, 0)) ++numTasks;
		};
	};
	return numTasks;
};

InteractiveTask.Player.prototype.isTag = function(label, defaultout){
	if(this.xml[label] == undefined) return defaultout;
	return (this.xml[label] == 'true');
};

InteractiveTask.Player.prototype.getTimeDelivery = function(){
	if(this.xml.TIMERDELIVERY==undefined) return 0;
	return (parseInt(this.xml.TIMERDELIVERY.substr(0, 2))*60+parseInt(this.xml.TIMERDELIVERY.substr(3, 2)));
};
InteractiveTask.Player.prototype.getEquivalentTask = function(){
	if(this.xml.EQUIVALENT==undefined) return 1;
	return parseInt(this.xml.EQUIVALENT);
};
InteractiveTask.Player.prototype.getNoMoreTask = function(){
	if(this.xml.NOMORE==undefined) return 0;
	return parseInt(this.xml.NOMORE);
};



/*////////////////////////////////////////////////////////////////////////////////////////////*/
/*||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||*/
/*|||||||||||||||||||||||||||||||||||||| SAMPLE TASK (START)||||||||||||||||||||||||||||||||||*/
/*||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||*/
/*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/
/**
 * SimpleTask realise one task
 * @param xml - <TAST>...</TASK> - tree of one task
 * @constructor - Object of onne task
 */
InteractiveTask.SampleTask = function(xml, player){
	this.xml = xml;
	this.player = player;
	this.initLayers();
};
/**
 * Method for checking of other methods, only for developers
 * In future this method will be parser of task
 */
InteractiveTask.SampleTask.prototype.checkProto = function(){
	//alert("check proto");
	//this.stage = stage;
	this.player.resizePlayer();
	this.postLoading = 1;
	var i=0;

	var marks = this.getArrayObjectsByTag("MARK");
	if(marks.length!=0){
		this.markController = new InteractiveTask.MarkController({
			//layer : this.getLayerByName("layer20"),
			task : this
		});
		for(i=0;i<marks.length;i++){
			this.markController.add(marks[i]);
		};
		this.markController.startCreating();
	};


	var palitra = this.getArrayObjectsByTag("PALITRA");
	if(palitra.length!=0){
		//alert("Palitra exist");
		this.palitraController = new InteractiveTask.PalitraController({
			//layer : this.getLayerByName("layer3"),
			xml : palitra[0]
		});
		this.palitraController.init();
	};
	var userTans = this.getArrayObjectsByTag("USERTAN");
	if(userTans.length!=0){
		this.userTanController = new InteractiveTask.UserTanController({
			//colorLayer:this.getLayerByName("layer18"),
			//blackLayer:this.getLayerByName("layer8"),
			task:this,
			diap:this.getDiapasonOfMovingTan(),
			uniq:this.isUniqTans(),
		});
		for(i=0;i<userTans.length;i++){
			this.userTanController.add(userTans[i]);
		};

		if(palitra.length!=0){
			for(i=0;i<userTans.length;i++){
				this.userTanController.tanArray[i].colorableEnabled();
			};
		};
	};
	var tables = this.getArrayObjectsByTag("TABLE");
	if(tables.length!=0){
		this.tableController = new InteractiveTask.TableController({
			//layer : this.getLayerByName("layer10"),
			task : this
		});
		for(i=0;i<tables.length;i++){
			this.tableController.add({
				xml : tables[i]
			});

		};
	};

	var pictureTans = this.getArrayObjectsByTag("PICTURETAN");
	if(pictureTans.length!=0){
		++this.postLoading;
		this.pictureTanController = new InteractiveTask.PictureTanController({
			//colorLayer : this.getLayerByName("layer17"),
			//blackLayer : this.getLayerByName("layer7"),
			task : this,
			diap : this.getDiapasonOfMovingTan(),
			uniq : this.isUniqTans()
		});
		for(i=0;i<pictureTans.length;i++){
			this.pictureTanController.add(pictureTans[i]);
		};
	};

	var checkBoxes = this.getArrayObjectsByTag("CHECKBOX");
	if(checkBoxes.length!=0){
		//alert("Checkbox exist");
		this.checkBoxController = new InteractiveTask.CheckBoxController({
			//layer : this.getLayerByName("layer13"),
			//xml : checkbox[0],
			task: this
		});
		for(i=0;i<checkBoxes.length;i++){
			this.checkBoxController.add(checkBoxes[i]);
		};
	};



	var pointsDraw = this.getArrayObjectsByTag("POINTDRAW");
	if(pointsDraw.length!=0){
		this.pointDrawController = new InteractiveTask.PointsDrawController({
			//layer : this.getLayerByName("layer15"),
			task : this
		});
		for(i=0;i<pointsDraw.length;i++){
			this.pointDrawController.add(pointsDraw[i]);
		};
	};

	var textFields = this.getArrayObjectsByTag("LABEL");
	if(textFields.length!=0){
		this.textFieldController = new InteractiveTask.TextFieldController({
			// layer : this.getLayerByName("layer12"),
			// blackLayer : this.getLayerByName("layer7"),
			diap : this.getDiapasonOfMovingTan(),
			controller : this
		});
		for(i=0;i<textFields.length;i++){
			this.textFieldController.add(textFields[i]);
		};
	};

	var shiftFields = this.getArrayObjectsByTag("SHIFTFIELD");
	if(shiftFields.length!=0){
		this.shiftFieldController = new InteractiveTask.ShiftFieldController({
			//layer : this.getLayerByName("layer2"),
			controller : this,
			diap : this.getDiapasonOfMovingTan()
		});
		for(i=0;i<shiftFields.length;i++){
			this.shiftFieldController.add(shiftFields[i]);
		};
	};

	var swfobject = this.getArrayObjectsByTag("SWFOBJECT");
	for (i=0;i<swfobject.length;i++){
		var puzzle = swfobject[i].SETTINGS.PAZZLE;
		if(puzzle){
			//alert("Puzzle exists");
			this.puzzleController = new InteractiveTask.PuzzleController({
				//ObjLayer : this.getLayerByName("layer21"),
				//TanLayer : this.getLayerByName("layer19"),
				xml : swfobject[i],
				controller :  this,
			});
		};
		var listingImages = swfobject[i].SETTINGS.LISTINGIMAGES;

		if(listingImages){
			this.listingImagesController = new InteractiveTask.ListingImagesController({
				//ObjLayer : this.getLayerByName("layer21"),
				xml : swfobject[i],
				controller :  this,
				path : 'TestTask/demidovich'
			});
			this.listingImagesController.init();
		};
	};
	//this.puzzleController.init();

	var positioning = this.getArrayObjectsByTag("POSITIONING");
	if(positioning.length!=0){
		//alert("Positioning exists");
		for (i=0;i<positioning.length;i++){
			this.positioningController = new InteractiveTask.PositioningController({
				//layer : this.getLayerByName("layer1"),
				xml : positioning[i],
				controller : this/*,
				 path : "http://localhost:63342/CanvasPlayer/.idea/source/lib/pictures"  */
			});
		};
	};
	//this.positioningController.init();



	var groupFields = this.getArrayObjectsByTag("GROUPFIELD");
	if(groupFields.length != 0){
		this.groupFieldController = new InteractiveTask.GroupFieldController({
			//colorLayer : this.getLayerByName("layer5"),
			//blackLayer : this.getLayerByName("layer4"),
			controller : this,
			diap : this.getDiapasonOfMovingTan()
		});
		for(i=0;i<groupFields.length;i++){
			this.groupFieldController.add(groupFields[i]);
		};
	};

	var choiceBoxes = this.getArrayObjectsByTag("CHOICEBOX");
	if(choiceBoxes.length != 0){
		this.choiceBoxController = new InteractiveTask.ChoiceBoxController({
			//layer : this.getLayerByName("layer14"),
			controller : this
		});
		for(i=0;i<choiceBoxes.length;i++){
			this.choiceBoxController.add(choiceBoxes[i]);
		};
	};

	this.complateLoadingTask();
	this.player.resizePlayer();
};
InteractiveTask.SampleTask.prototype.complateLoadingTask = function(){
	this.checkPainting();
	this.addLayersToStage();
	//this.createTimer();
	if(this.animationController!=undefined){
		this.animationController.totalPlaye();
	};
	this.isEntaerArea();
	this.initHealth();
	this.initTimer();

	if(this.timer!=undefined && this.health!=undefined){
		this.timer.setHealth(this.health);
		this.health.setTimer(this.timer);
	};
};
InteractiveTask.SampleTask.prototype.initTimer = function(){
	if(this.xml.TIMER!=undefined){
		this.player.buttonSystem.pause.visible(true);
		this.player.buttonSystem.replace();
		this.timer = new InteractiveTask.Timer({
			xml : this.xml,
			controller : this.player
		});
		if(this.timer.isInitTimer()){
			this.timer.start();
		};
	};
};
InteractiveTask.SampleTask.prototype.stopTimer = function(){
	if(this.timer!=undefined){
		this.timer.stop();
	};
};
InteractiveTask.SampleTask.prototype.getCurrentTimer = function(){
	if(this.timer!=undefined){
		return this.timer.getCurrentTime();
	};
	return -1;
};
InteractiveTask.SampleTask.prototype.initHealth = function(){
	if(this.xml.HEALTH!=undefined){
		this.health = new InteractiveTask.Health({
			xml : this.xml,
			controller : this.player
		});
		if(this.health.isInitHealth()){
			this.health.start();
		};
	};
};
InteractiveTask.SampleTask.prototype.minusHealth = function(){
	if(this.health!=undefined){
		this.health.makeMisstake();
	};
};
InteractiveTask.SampleTask.prototype.getCurrentHealth = function(){
	if(this.health!=undefined){
		return this.health.getCurrentHealth();
	};
	return 0;
};

/**************************************************************/
/********************CONTROL METHODS***************************/
/**
 * - rotate
 * - select
 * - check task
 * - check paint
 * - animation
 */
/**************************************************************/
InteractiveTask.SampleTask.prototype.rotate = function(degree){
	if(this.userTanController!=null){
		this.userTanController.rotate(degree);
	};
	if(this.pictureTanController!=null){
		this.pictureTanController.rotate(degree);
	};
};
InteractiveTask.SampleTask.prototype.deSelect = function(){
	if(this.userTanController!=null){
		this.userTanController.deSelect();
	};
	if(this.pictureTanController!=null){
		this.pictureTanController.deSelect();
	};
};
InteractiveTask.SampleTask.prototype.checkTask = function(){
	this.checkPainting();
	if(this.userTanController!=null){
		if(!this.userTanController.isComplate()) return;
	};
	if(this.checkBoxController!=null){
		if(!this.checkBoxController.isComplate()) return;
	};
	if(this.pictureTanController!=null){
		if(!this.pictureTanController.isComplate()) return;
	};
	if(this.markController!=null){
		if(!this.markController.isComplate()) return;
	};
	if(this.pointDrawController!=null){
		if(!this.pointDrawController.isComplate()) return;
	};
	if(this.textFieldController!=null){
		if(!this.textFieldController.isComplate()) return;
	};
	if(this.shiftFieldController!=null){
		if(!this.shiftFieldController.isComplate()) return;
	};
	if(this.groupFieldController!=null){
		if(!this.groupFieldController.isComplate()) return;
	};
	if(this.listingImagesController != null){
		if(!this.listingImagesController.getResult()) return;
	};
	if(this.puzzleController!=null){
		if(!this.puzzleController.getResult()) return;
	};
	if(this.positioningController!=null){
		if(!this.positioningController.getResult()) return;
	};

	if(this.choiceBoxController!=null){
		if(!this.choiceBoxController.isComplate()) return;
	};
	this.player.complateCurrentTask();
};
InteractiveTask.SampleTask.prototype.checkPainting = function(){
	if(this.userTanController!=null){
		if(!this.userTanController.checkPainting()) return;
	};
	if(this.palitraController!=null){
		this.palitraController.complatePainting();
		this.palitraController = null;
	};
};
InteractiveTask.SampleTask.prototype.isEntaerArea = function(){
	if(this.tableController == undefined) return;
	var area = this.tableController.area();
	if(area == null) return;

	if(this.userTanController!=undefined)this.userTanController.area(area);
	if(this.pictureTanController!=undefined)this.pictureTanController.area(area);
	if(this.textFieldController!=undefined)this.textFieldController.area(area);
};
InteractiveTask.SampleTask.prototype.getAnimation = function(object){
	this._tryCreateAnimationController();
	return this.animationController.add(object);
};
InteractiveTask.SampleTask.prototype.getSpriteAnimation = function(object){
	this._tryCreateAnimationController();
	return this.animationController.addSprite(object);
};
InteractiveTask.SampleTask.prototype._tryCreateAnimationController =function(){
	if(this.animationController == undefined){
		this.animationController = new InteractiveTask.AnimationController();
	};
};
InteractiveTask.SampleTask.prototype.runLabelAnimation = function(label){
	if(this.animationController != undefined){
		//this.animationController.playByLabel(label);
		var i,l;
		l = label.length;
		for(i=0;i<l;i++){
			this.animationController.playByLabel(label[i]);
		}
	};
};

/**************************************************************/
/********************OBJECTS OF TASK***************************/
/**************************************************************/
InteractiveTask.SampleTask.prototype.getArrayObjectsByTag = function(tagName){
	return InteractiveTask.getArrayObjectsByTag(this.xml.OBJECTS, tagName);
};
/**************************************************************/
/*******************ATRIBUTES OF TASK**************************/
/**************************************************************/
/**
 *
 * @returns {int} - Diapason of jumping of tans
 */
InteractiveTask.SampleTask.prototype.getDiapasonOfMovingTan = function(){
	if(this.xml.DIAP == undefined) return 20;
	return parseInt(this.xml.DIAP);
};
/**
 *
 * @returns {boolean} - if true, user can put diffrent tans on equal black positions
 */
InteractiveTask.SampleTask.prototype.isUniqTans = function(){
	if(this.xml.UNIQU == undefined) return true;
	return (this.xml.UNIQU == 'true');
};
/**
 * Tasks that called "Mnimoe" don't countanted in whole score
 * @returns {boolean}
 */
InteractiveTask.SampleTask.prototype.isMnimoe = function(){
	if(this.xml.MNIMOE == undefined) return false;
	return (this.xml.MNIMOE == 'true');
};
/**
 * Show or not icons for helping of understanding a task
 * @returns {boolean}
 */
InteractiveTask.SampleTask.prototype.isIcons = function(){
	if(this.xml.ICONS == undefined) return false;
	return (this.xml.ICONS == 'true');
};
/**
 * Does current task have marks
 * @returns {boolean}
 */
InteractiveTask.SampleTask.prototype.hasMarks = function(){
	if(this.markController!=null){
		return true;
	};
	return false;
};
/*****************************************************************************/
/** 3 methods for removing main control buttons
 * @returns {boolean}
 */
InteractiveTask.SampleTask.prototype.isRemoveDontKnowButton = function(){
	if(this.xml.DELBUT == undefined) return false;
	if(this.xml.DELBUT.split(",")[0] == "1") return true;
	return false;
};
InteractiveTask.SampleTask.prototype.isRemoveRestartButton = function(){
	if(this.xml.DELBUT == undefined) return false;
	if(this.xml.DELBUT.split(",")[1] == "1") return true;
	return false;
};
InteractiveTask.SampleTask.prototype.isRemoveUnderstandButton = function(){
	if(this.xml.DELBUT == undefined) return false;
	if(this.xml.DELBUT.split(",")[2] == "1") return true;
	return false;
};
/*****************************************************************************/
/**
 * Method for creating counter of number Marks
 * @returns {boolean}
 */
InteractiveTask.SampleTask.prototype.isMarksCounter = function(){
	if(this.xml.MARKCOUNTER == undefined) return false;
	return (this.xml.MARKCOUNTER == 'true');
};
/**************************************************************/
/**************************LAYERS******************************/
/**************************************************************/

InteractiveTask.SampleTask.prototype.initLayers = function(){
	this.layers = {
		0:{ name:"layer1",   index:21, isUse:false, controller: {
			0 : "positioningController",
			length : 1
		},  method:"addToLayer"   }, //–исование изображений
		1:{ name:"layer2",   index:20, isUse:false, controller: {
			0 : "shiftFieldController",
			length : 1
		},  method:"addToLayer"   }, //ѕол€ перестановки
		2:{ name:"layer3",   index:19, isUse:false, controller: {
			0 : "palitraController",
			length : 1
		},  method:"addToLayer"   }, // нопки
		3:{ name:"layer4",   index:18, isUse:false, controller: {
			0 : "groupFieldController",
			length : 1
		},  method:"balckAddToLayer"   }, //√рупповое поле („)
		4:{ name:"layer5",   index:17, isUse:false, controller: {
			0 : "groupFieldController",
			length : 1
		},  method:"colorAddToLayer"   }, //√рупповое поле (÷)
		5:{ name:"layer6",   index:1 , isUse:false, controller: {
			length : 0
		},  method: null   }, // омпл. таны („)
		6:{ name:"layer7",   index:2 , isUse:false, controller: {
			0 : "pictureTanController",
			1 : "textFieldController",
			length : 2
		},  method: "balckAddToLayer"   }, // артинки таны („)
		7:{ name:"layer8",   index:3 , isUse:false, controller: {
			0 : "userTanController",
			length : 1
		},  method: "balckAddToLayer"   }, //ѕольз. таны („)
		8:{ name:"layer9",   index:14, isUse:false, controller: {
			length : 0
		} , method: null   }, //SWF таны („)
		9:{ name:"layer10",  index:4 , isUse:false, controller: {
			0 : "tableController",
			length : 1
		},  method: "addToLayer"  }, //“аблицы
		10:{name:"layer11",  index:5 , isUse:false, controller: {
			length : 0
		},  method: null   }, //Ћинии
		11:{name:"layer12",  index:6 , isUse:false, controller: {
			0 : "textFieldController",
			length : 1
		},  method: "addToLayer"   }, //Ќадписи
		12:{name:"layer13",  index:7 , isUse:false, controller: {
			0 : "checkBoxController",
			length : 1
		},  method: "addToLayer"   }, //ѕеречисл. пол€
		13:{name:"layer14",  index:16, isUse:false, controller: {
			0 : "choiceBoxController",
			length : 1
		},  method: "addToLayer"   }, //¬ыбор ответов
		14:{name:"layer15",  index:8 , isUse:false, controller: {
			0 : "pointDrawController",
			length : 1
		},  method:"addToLayer"   }, //“очки соединени€
		15:{name:"layer16",  index:9 , isUse:false, controller: {
			length : 0
		},  method: null  }, // омпл. таны (÷)
		16:{name:"layer17",  index:10, isUse:false, controller: {
			0 : "pictureTanController",
			length : 1
		},  method: "colorAddToLayer"   }, // артинки таны (÷)
		17:{name:"layer18",  index:11, isUse:false, controller: {
			0 : "userTanController",
			length : 1
		},  method:"colorAddToLayer"   }, //ѕольз. таны (÷)
		18:{name:"layer19",  index:15, isUse:false, controller: {
			0 : "puzzleController",
			length : 1
		},  method:"colorAddToLayer"   }, //SWF таны (÷)
		19:{name:"layer20",  index:12, isUse:false, controller: {
			0 : "markController",
			length : 1
		},  method:"addToLayer"   }, //ќбласти выделени€
		20:{name:"layer21",  index:13, isUse:false, controller: {
			0 : "listingImagesController",
			length : 1
		},  method:"addToLayer"   }, //SWF объекты
		21:{name:"layer22",  index:22, isUse:false, controller:{
			length : 0
		} , method:null   }, //«вук
		length:22
	};
};


/**
 * @returns {Array of index layers in such stack as it constructed author of task}
 */
InteractiveTask.SampleTask.prototype.getLayersArray = function(){
	return this.xml.LAYERS.split(",");
};
/**
 * If you take layer by name, automaticly this layer will be include into stack output
 * @param name
 * @returns layer{layer:Konva.Layer, name:string, index:int, isUse:Boolean}
 */
/*InteractiveTask.SampleTask.prototype.getLayerByName = function(name){
 for(i=0;i<this.layers.length;i++){
 if(name == this.layers[i].name){
 if(!this.layers[i].isUse){
 this.layers[i].isUse = true;
 this.layers[i].layer = new Konva.Layer();
 };
 return this.layers[i].layer;
 };
 };
 return null;
 }; */
/**
 * You can get layer from full stack layers by index without changes
 * @param index of necessary layer from all layers
 * @returns layer{layer:Konva.Layer, name:string, index:int, isUse:Boolean}
 */
InteractiveTask.SampleTask.prototype.getLayerByIndex = function(index){
	for(i=0;i<this.layers.length;i++){
		if (index == this.layers[i].index) {
			return this.layers[i];
		};
	};
	return null;
};
/**
 * Added neccesary layers to stage (only full layers)
 */
InteractiveTask.SampleTask.prototype.addLayersToStage = function(){

	// alert("start function");
	var i=0;
	//alert(stage);
	var indexis = this.getLayersArray();
	var leng = indexis.length;
	var getLayer;
	var j;
	for(i=0;i<leng;i++){
		getLayer = this.getLayerByIndex(parseInt(indexis[i]));
		if (getLayer != null){
			for(j=0;j<getLayer.controller.length; j++){
				if(this[getLayer.controller[j]]){
					this[getLayer.controller[j]][getLayer.method](InteractiveTask.COMPONENTS_LAYER);
				};
			};
		};
		/*if(getLayer.isUse){
		 //alert("add layer = " + getLayer.layer + ", name = " + getLayer.name + ", index = " + getLayer.index);
		 InteractiveTask.STAGE.add(getLayer.layer);
		 //alert("add complate");
		 getLayer.layer.batchDraw();

		 };*/
	};
	if(this.shiftFieldController!=undefined){
		this.shiftFieldController.initCache();
	};
	InteractiveTask.COMPONENTS_LAYER.batchDraw();
	//InteractiveTask.DRAG_LAYER = new Konva.Layer();
	//InteractiveTask.STAGE.add(InteractiveTask.DRAG_LAYER);
	//InteractiveTask.DRAG_LAYER.batchDraw();
	/**
	 * ѕерерисовка кнопок интерфейса
	 */
	/*for(var lay in this.buttonLayers){
	 InteractiveTask.STAGE.add(this.buttonLayers[lay]);
	 };
	 for(var lay in this.buttonLayers){
	 this.buttonLayers[lay].draw();
	 };*/
};
InteractiveTask.SampleTask.prototype.clear = function(){
	try{
		if(this.animationController != undefined){
			this.animationController.clear();
			InteractiveTask.disposeObject(this.animationController);
		};
	}catch(e){
		InteractiveTask.error(e);
	};

	/*******************************************************/
	if(this.userTanController!=null){
		this.userTanController.clear();
		InteractiveTask.disposeObject(this.userTanController);
		this.userTanController = null;
	};
	if(this.checkBoxController!=null){
		this.checkBoxController.clear();
		InteractiveTask.disposeObject(this.checkBoxController);
		this.checkBoxController = null;
	};
	if(this.pictureTanController!=null){
		this.pictureTanController.clear();
		InteractiveTask.disposeObject(this.pictureTanController);
		this.pictureTanController = null;
	};
	if(this.markController!=null){
		this.markController.clear();
		InteractiveTask.disposeObject(this.markController);
		this.markController = null;
	};
	if(this.pointDrawController!=null){
		this.pointDrawController.clear();
		InteractiveTask.disposeObject(this.pointDrawController);
		this.pointDrawController = null;
	};
	if(this.textFieldController!=null){
		this.textFieldController.clear();
		InteractiveTask.disposeObject(this.textFieldController);
		this.textFieldController = null;
	};
	if(this.shiftFieldController!=null){
		this.shiftFieldController.clear();
		InteractiveTask.disposeObject(this.shiftFieldController);
		this.shiftFieldController = null;
	};
	if(this.groupFieldController!=null){
		this.groupFieldController.clear();
		InteractiveTask.disposeObject(this.groupFieldController);
		this.groupFieldController = null;
	};
	if(this.listingImagesController != null){
		this.listingImagesController.clear();
		this.listingImagesController = null;
	};
	if(this.puzzleController!=null){
		this.puzzleController.clear();
		this.puzzleController = null;
	};
	if(this.positioningController!=null){
		this.positioningController.clear();
		this.positioningController = null;
	};

	if(this.choiceBoxController!=null){
		this.choiceBoxController.clear();
		InteractiveTask.disposeObject(this.choiceBoxController);
		this.choiceBoxController = null;
	};
	if(this.tableController!=null){
		this.tableController.clear();
		InteractiveTask.disposeObject(this.tableController);
		this.tableController = null;
	};
	if(this.palitraController!=null){
		this.palitraController.complatePainting();
		this.palitraController = null;
	};
	InteractiveTask.COMPONENTS_LAYER.clearCache();

	InteractiveTask.DRAGANDDROP_LAYER.clearCache();
	InteractiveTask.COMPONENTS_LAYER.clear();
	InteractiveTask.DRAGANDDROP_LAYER.clear();
	InteractiveTask.ANIMATION_LAYER.clear();
	InteractiveTask.COMPONENTS_LAYER.destroyChildren();
	InteractiveTask.DRAGANDDROP_LAYER.destroyChildren();
	InteractiveTask.ANIMATION_LAYER.destroyChildren();


	/*var i,l;
	 l = this.layers.length;
	 for(i=0;i<l;i++){
	 if(this.layers[i].isUse){
	 this.layers[i].layer.destroyChildren();
	 this.layers[i].layer.remove();
	 this.layers[i].layer = null;
	 this.layers[i].isUse = false;
	 };
	 };
	 InteractiveTask.DRAGANDDROP_LAYER.destroyChildren();   */
	//InteractiveTask.DRAGANDDROP_LAYER.destroy();
	//InteractiveTask.DRAG_LAYER = null;
	/*******************************************************/
	if(this.timer!=undefined){
		this.timer.clear();
		this.timer = null;
	};
	if(this.health!=undefined){
		this.health.clear();
		this.health = null;
	};
	try{
		InteractiveTask.BACKGROUND.off("mousedown touchstart");
	}catch(e){};

	/* if(!this.timerLayer) return;
	 clearInterval(this.timerInterval);
	 this.timerInterval = null;
	 this.timerLayer.remove();
	 this.timerLayer = null;   */
	/*this.buttonLayers.restart.remove();
	 this.buttonLayers.dontknow.remove();
	 this.buttonLayers.understand.remove();
	 this.buttonLayers.check.remove();
	 this.buttonLayers.fullscreen.remove();   */
	//this.buttonLayer.remove();
};

/*////////////////////////////////////////////////////////////////////////////////////////////*/
/*||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||*/
/*|||||||||||||||||||||||||||||||||||||| SAMPLE TASK (END)||||||||||||||||||||||||||||||||||||*/
/*||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||*/
/*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/


/**
 * Created with IntelliJ IDEA.
 * User: Yurchik
 * Date: 01.03.15
 * Time: 6:49
 * To change this template use File | Settings | File Templates.
 */

InteractiveTask.CheckBoxController = function(options){
	this.controller = options.task;
	this.checkBoxArray = new Array();
};

InteractiveTask.CheckBoxController.prototype.add = function(xml){
	var id = this.checkBoxArray.length;
	this.checkBoxArray[id] = new InteractiveTask.SampleCheckBox( xml);
	this.checkBoxArray[id].init({
		controller: this
	});
};
InteractiveTask.CheckBoxController.prototype.checkComplate = function(){
	this.controller.checkTask();
};
InteractiveTask.CheckBoxController.prototype.isComplate = function(){
	var i,l;
	l = this.checkBoxArray.length;
	for(i=0;i<l;i++){
		if(!this.checkBoxArray[i].isComplate()) return false;
	};
	return true;
};
InteractiveTask.CheckBoxController.prototype.runLabelAnimation = function(label){
	this.controller.runLabelAnimation(label);
};
InteractiveTask.CheckBoxController.prototype.minusHealth = function(){
	this.controller.minusHealth();
};

InteractiveTask.CheckBoxController.prototype.clear = function(){
	while(this.checkBoxArray.length>0){
		InteractiveTask.disposeObject(this.checkBoxArray[0]);
		this.checkBoxArray[0] = null;
		this.checkBoxArray.shift();
	};
};

InteractiveTask.CheckBoxController.prototype.addToLayer = function(layer){
	var i,l;
	l = this.checkBoxArray.length;
	for(i=0;i<l;i++){
		layer.add(this.checkBoxArray[i].checkBox);
	};
};

/******************************************************************************************************************************/

InteractiveTask.SampleCheckBox = function( xml){
	this.xml = xml;
};



InteractiveTask.SampleCheckBox.prototype.init = function(json){
	this.controller = json.controller;
	this.checkBox = new Konva.Group();
	var checkBoxBackground = new Konva.Rect({
		x : 0,
		y : 0,
		width : this.xml.WIDTH,
		height : this.xml.HEIGHT,
		strokeWidth : 1,
		stroke : "rgba(0, 0, 0, 0)",
		fill : InteractiveTask.formatColorFlashToCanvas(this.xml.BGCOLOR)
	});

	var checkBoxText = new Konva.Text({
		x: parseFloat(this.xml.WIDTH)/2.7,
		y: parseFloat(this.xml.HEIGHT)/10,
		text: '?',
		fontSize: (parseFloat(this.xml.HEIGHT)>70)?(70*0.8):(parseFloat(this.xml.HEIGHT)*0.8),
		fontFamily: 'Calibri',
		fill: InteractiveTask.formatColorFlashToCanvas(this.xml.TEXTCOLOR)
	});
	//InteractiveTask.log("Create text checkbox");
	this.checkBox.x(parseFloat(this.xml.X));
	this.checkBox.y(parseFloat(this.xml.Y));
	this.checkBox.add(checkBoxBackground);
	this.checkBox.add(checkBoxText);

	//InteractiveTask.log("all variant = ", this.xml.ALLVARIANTS.VARIANT[0]["#cdata-section"]);
	var variant = new Array();
	var i,l;
	if(this.xml.ALLVARIANTS.VARIANT[0]==undefined){
		variant.push(this.xml.ALLVARIANTS.VARIANT["#cdata-section"]);
	}else{
		l = this.xml.ALLVARIANTS.VARIANT.length;
		for(i=0;i<l;i++){
			variant.push(this.xml.ALLVARIANTS.VARIANT[i]["#cdata-section"]);
		};
	};
	var r = this.xml.RANDOM;
	i=0;
	this.trueVariant = this.xml.TRUEVARIANT;
	this.currentVariant = "";
	if(this.xml.QUESTION=='false'){
		checkBoxText.text(variant[0]);
		i++;
		this.currentVariant = variant[0];
	};
	this.startLabelComplate = "";
	if(this.xml.STARTANIMATIONCOMPLATE!=undefined){
		this.startLabelComplate = this.xml.STARTANIMATIONCOMPLATE;
	};
	this.startLabelMouseDown = "";
	if(this.xml.STARTANIMATIONDOWN!=undefined){
		this.startLabelMouseDown = this.xml.STARTANIMATIONDOWN;
	};

//    /var text = checkBoxText.text();
	this.checkBox.controller = this;

	var randIndexis = InteractiveTask.getRandomIndexesTo(variant.length);
	var flagRepeat = false;
	this.checkBox.on('mousedown touchstart', function() {
		var index = i;
		var currentVariant;
		if(r=='true'){
			currentVariant = variant[randIndexis[index]];
		} else {
			currentVariant = variant[index];
		};
		checkBoxText.text(currentVariant);
		if (i==variant.length-1){
			i=0;
			flagRepeat = true;
		} else {
			if(i==0 && flagRepeat){
				this.controller.controller.minusHealth();
			};
			i++;
		};
		checkBoxText.x((checkBoxBackground.width()-checkBoxText.width())/2);
		this.getLayer().draw();
		this.controller.setCurrentVariant(currentVariant);
		if(this.controller.startLabelMouseDown != ""){
			this.controller.controller.runLabelAnimation(this.controller.startLabelMouseDown);
		};
	});
};
InteractiveTask.SampleCheckBox.prototype.setCurrentVariant = function(value){
	this.currentVariant = value;
	if(this.startLabelComplate!=""){
		if(this.isComplate()){
			this.startLabelComplate = "";
			this.controller.runLabelAnimation(this.startLabelComplate);
		};
	};
	this.controller.checkComplate();
};
InteractiveTask.SampleCheckBox.prototype.isComplate = function(){
	var flag =  this.currentVariant == this.trueVariant;
	this.setReport(flag);
	return flag;
};
InteractiveTask.SampleCheckBox.prototype.setReport = function(isComplate){
	if(this.xml.LESSONLINK != undefined){
		this.xml.LESSONLINK["-isComplate"] = isComplate;
	};
};



/**
 * Created with IntelliJ IDEA.
 * User: Yurchik
 * Date: 01.07.15
 * Time: 11:22
 * To change this template use File | Settings | File Templates.
 */
InteractiveTask.ChoiceBoxController = function(options){
	this.controller = options.controller;
	this.boxes = new Array();
};

InteractiveTask.ChoiceBoxController.prototype.add = function(xml){
	var id = this.boxes.length;

	this.boxes[id] = new InteractiveTask.BoxSystem({
		xml : xml,
		controller : this
	});

};

InteractiveTask.ChoiceBoxController.prototype.minusHealth = function(){
	this.controller.minusHealth();
};
InteractiveTask.ChoiceBoxController.prototype.checkComplate = function(){
	this.controller.checkTask();
};
InteractiveTask.ChoiceBoxController.prototype.isComplate = function(){
	var i,l;
	l = this.boxes.length;
	for(i=0;i<l;i++){
		if(!this.boxes[i].isComplate()) return false;
	};
	return true;
};

InteractiveTask.ChoiceBoxController.prototype.clear = function(){
	while(this.boxes.length>0){
		this.boxes[0].clear();
		InteractiveTask.disposeObject(this.boxes[0]);
		this.boxes[0] = null;
		this.boxes.shift();
	};
};

InteractiveTask.ChoiceBoxController.prototype.addToLayer = function(layer){
	var i,l;
	l = this.boxes.length;
	for(i=0;i<l;i++){
		layer.add(this.boxes[i].boxSystem);
	};
};


/****************************************************************************/
/********************************BOX SYSTEM**********************************/
/****************************************************************************/
InteractiveTask.BoxSystem = function(options){
	this.xml = options.xml;
	this.controller = options.controller;

	this.isChoice = (this.xml.CHOICE == "true");

	this.format = this.xml.FORMAT;
	this.xmlBoxArray = InteractiveTask.getArrayObjectsByTag(this.xml, "BOX");

	this.boxSystem = new Konva.Group();
	this.boxSystem.x(parseFloat(this.xml["-x"]));
	this.boxSystem.y(parseFloat(this.xml["-y"]));

	var i,l;
	l = this.xmlBoxArray.length;
	this.boxes = new Array();
	for(i=0;i<l;i++){
		this.boxes[i] = new  InteractiveTask.OneBox({
			boxSystem : this.boxSystem,
			xml : this.xmlBoxArray[i],
			format : this.format,
			controller : this
		});
	};
};
InteractiveTask.BoxSystem.prototype.minusHealth = function(){
	this.controller.minusHealth();
};
InteractiveTask.BoxSystem.prototype.checkComplate = function(){
	this.boxSystem.getLayer().batchDraw();
	this.controller.checkComplate();
};
InteractiveTask.BoxSystem.prototype.isComplate = function(){
	var i,l;
	l = this.boxes.length;
	for(i=0;i<l;i++){
		if(!this.boxes[i].isComplate()) return false;
	};
	return true;
};
InteractiveTask.BoxSystem.prototype.clearAll = function(){
	var i,l;
	l = this.boxes.length;
	for(i=0;i<l;i++){
		this.boxes[i].clear();
	};
};
InteractiveTask.BoxSystem.prototype.clear = function(){
	while(this.boxes.length>0){
		InteractiveTask.disposeObject(this.boxes[0]);
		this.boxes[0] = null;
		this.boxes.shift();
	};
};

/****************************************************************************/
/******************************** ONE BOX ***********************************/
/****************************************************************************/

InteractiveTask.OneBox = function(options){
	this.layer = options.boxSystem;
	this.xml = options.xml;
	this.format = options.format;
	this.controller = options.controller;

	var image;
	if(this.xml.TYPE == "classic"){
		image = InteractiveTask.LIBRARY.getButton(InteractiveTask.CONST.CHECKBOX_BUTTON);
	}else{
		image = InteractiveTask.LIBRARY.getButton(InteractiveTask.CONST.RADIO_BUTTON);
	};

	this.point = new Konva.Sprite({
		x : 0,
		y : 0,
		image : image,
		animation : 'standing',
		animations : {
			standing: InteractiveTask.CONST.CHECKBOX_BUTTON_POSITION
		},
		frameRate :10,
		frameIndex : 0
	});
	var boxText;
	if(this.xml.TEXT==undefined){
		boxText = " ";
	}else{
		if(this.xml.TEXT["#cdata-section"] == undefined){
			boxText = " ";
		}else{
			boxText = this.xml.TEXT["#cdata-section"];
		};
	};
	this.textField = new Konva.Text({
		x: InteractiveTask.CONST.CHECKBOX_BUTTON_SIZE + 5,
		y: 0,
		fontFamily: this.format.FONT,
		text: boxText,
		fontSize: parseInt(this.format.SIZE),
		align : "left",
		fill: InteractiveTask.formatColorFlashToCanvas(this.format.TEXTCOLOR)
	});

	this.createBackground();

	this.group = new Konva.Group();

	this.textField.y((InteractiveTask.CONST.CHECKBOX_BUTTON_SIZE - this.textField.height())/2);
	this.backgroung.y((InteractiveTask.CONST.CHECKBOX_BUTTON_SIZE - this.backgroung.height())/2);
	this.backgroung.x(InteractiveTask.CONST.CHECKBOX_BUTTON_SIZE + 3);
	this.group.add(this.point);
	this.group.add(this.backgroung);
	this.group.add(this.textField);

	this.group.x(parseFloat(this.xml["-x"]));
	this.group.y(parseFloat(this.xml["-y"]));

	this.isSelect = false;
	this.isCorrect = (this.xml.SELECT == "true");

	this.group.controller = this;

	this.group.on("mousedown touchstart", function(event){
		this.controller.select();
	});

	this.layer.add(this.group);
};
InteractiveTask.OneBox.prototype.createBackground = function(){
	var line;
	if(this.format.BORDER == "true"){
		line = InteractiveTask.formatColorFlashToCanvasRGBA(this.format.BORDERCOLOR, 1);
	}else{
		line = InteractiveTask.formatColorFlashToCanvasRGBA(this.format.BORDERCOLOR, 0);
	};
	var fill;
	if(this.format.BACKGROUND == "true"){
		fill = InteractiveTask.formatColorFlashToCanvasRGBA(this.format.BACKGROUNDCOLOR, 1);
	}else{
		fill = InteractiveTask.formatColorFlashToCanvasRGBA(this.format.BACKGROUNDCOLOR, 0);
	};
	this.backgroung = new Konva.Rect({
		x : 0,
		y : 0,
		width : parseFloat(this.xml["-width"]),
		height : parseFloat(this.xml["-height"]),
		strokeWidth : 1,
		stroke : line,
		fill : fill
	});
};

InteractiveTask.OneBox.prototype.select = function(){
	if(this.controller.isChoice){
		this.controller.clearAll();
	};

	if(this.isSelect){
		this.clear();
	}else{
		this.point.frameIndex(1);
		this.isSelect = true;
	};
	if(this.isSelect && !this.isCorrect){
		this.controller.minusHealth();
	};
	this.controller.checkComplate();
};
InteractiveTask.OneBox.prototype.clear = function(){
	this.isSelect = false;
	this.point.frameIndex(0);
};

InteractiveTask.OneBox.prototype.isComplate = function(){
	return (this.isSelect == this.isCorrect);
};
/**
 * Created with IntelliJ IDEA.
 * User: Yurchik
 * Date: 19.03.15
 * Time: 14:15
 * To change this template use File | Settings | File Templates.
 */
InteractiveTask.GroupFieldController = function(options){
	this.controller = options.controller;
	this.diap = options.diap;

	this.groupFieldArray = new Array();
};

InteractiveTask.GroupFieldController.prototype.add = function(xml){
	this.groupFieldArray.push(new InteractiveTask.SampleGroupField({
		xml : xml,
		controller : this,
		diap : this.diap
	}));
};
InteractiveTask.GroupFieldController.prototype.checkTask = function(){
	this.controller.checkTask();
};
InteractiveTask.GroupFieldController.prototype.isComplate = function(){
	var i,l;
	l = this.groupFieldArray.length;
	for(i=0;i<l;i++){
		if(!this.groupFieldArray[i].isComplate()) return false;
	};
	return true;
};

InteractiveTask.GroupFieldController.prototype.clear = function(){
	while(this.groupFieldArray.length>0){
		InteractiveTask.disposeObject(this.groupFieldArray[0]);
		this.groupFieldArray[0] = null;
		this.groupFieldArray.shift();
	};
};
InteractiveTask.GroupFieldController.prototype.balckAddToLayer = function(layer){
	var i,l;
	l = this.groupFieldArray.length;
	for(i=0;i<l;i++){
		if(this.groupFieldArray[i].isTan){
			layer.add(this.groupFieldArray[i].blackTan);
			this.groupFieldArray[i].blackTan.remZIndex = this.groupFieldArray[i].blackTan.getZIndex();
		};
	};
};
InteractiveTask.GroupFieldController.prototype.colorAddToLayer = function(layer){
	var i,l;
	l = this.groupFieldArray.length;
	for(i=0;i<l;i++){
		layer.add(this.groupFieldArray[i].colorTan);
		this.groupFieldArray[i].colorTan.remZIndex = this.groupFieldArray[i].colorTan.getZIndex();
	};
};



/********************************************************************************************************************************/
InteractiveTask.SampleGroupField = function(options){
	this.controller = options.controller;
	this.xml = options.xml;
	this.diap = options.diap;

	this.colorTan = new Konva.Group();
	this.blackTan = new Konva.Group();

	this.isTan = (this.xml.TAN == "true");
	this.isField = (this.xml.FIELD == "true");

	// InteractiveTask.log(this.xml.CONTENT);
	var elements = new Array();
	var element;
	this.content = new Array();
	var i,l;
	var index = 0;
	var changeX, changeY;
	elements = InteractiveTask.getArrayObjectsByTag(this.xml.CONTENT, "ELEMENT");
	l = elements.length;
	for(i=0;i<l;i++){

		if(elements[i]["USERTAN"]!=undefined) node = "USERTAN";
		if(elements[i]["PICTURETAN"]!=undefined) node = "PICTURETAN";

		element = InteractiveTask.getArrayObjectsByTag(elements[i], node)[0];
		//InteractiveTask.log(element);
		changeX = parseFloat(element.COLOR.X)-parseFloat(this.xml.WIDTH)/2;
		changeY = parseFloat(element.COLOR.Y)-parseFloat(this.xml.HEIGHT)/2;

		var remColorX, remColorY, remBlackX, remBlackY;
		remColorX = element.COLOR.X;
		remColorY = element.COLOR.Y;
		remBlackX = element.BLACK.X;
		remBlackY = element.BLACK.Y;
		element.COLOR.X =  changeX;
		element.BLACK.X =  changeX;
		element.COLOR.Y =  changeY;
		element.BLACK.Y =  changeY;
		switch (node){
			case "USERTAN":

				this.content.push(new InteractiveTask.SampleUserTan(element));
				break;
			case "PICTURETAN":
				InteractiveTask.log("add picture tan");
				this.content.push(new InteractiveTask.SamplePictureTan(element));
				break;

		};

		this.content[index].init({
			controller : this
		});
		element.COLOR.X =  remColorX;
		element.BLACK.X =  remBlackX;
		element.COLOR.Y =  remColorY;
		element.BLACK.Y =  remBlackY;
		this.content[index].getObject().off("mousedown touchstart");
		this.content[index].getObject().off("mouseout mouseup touchend");
		// this.content[index].getObject().draggable(false);
		//this.group.add(this.content[index].getObject());
		this.colorTan.add(this.content[index].getObject());
		if(this.isField){
			this.content[index].getObject().mustVisible = (element["-visible"]=="true");
			if(element["-visible"]=="true"){
				if(this.isTan){
					this.blackTan.add(this.content[index].getBlackObject());
					if(node == "PICTURETAN"){
						this.blackTan.cache();
						this.blackTan.filters([Konva.Filters.RGB]);
					};
				};
			};
		}else{
			if(this.isTan){
				this.blackTan.add(this.content[index].getBlackObject());
				if(node == "PICTURETAN"){
					this.blackTan.cache();
					this.blackTan.filters([Konva.Filters.RGB]);
				};
			};
		};
		++index;

	};
	InteractiveTask.log("num elements", this.content.length);
	this.colorTan.x(parseFloat(this.xml.COLOR.X));
	this.colorTan.y(parseFloat(this.xml.COLOR.Y));

	this.setObjectRotation(this.colorTan, parseFloat(this.xml.COLOR.R));
	if(this.isTan){
		this.setObjectRotation(this.blackTan, parseFloat(this.xml.BLACK.R));
	};

	if(this.isTan){
		//this.colorTan.draggable(true);
		this.blackTan.x(parseFloat(this.xml.BLACK.X));
		this.blackTan.y(parseFloat(this.xml.BLACK.Y));
		var self = this;
		this.colorTan.on("mousedown touchstart", function(){
			InteractiveTask.setDragRotate(this, {
				isRotate : true,
				isDrag   : true,
				layer    : this.getLayer(),
				callback : function(){
					self.setBack();
				},
				rotate   : function(degree){
					self.rotate(degree);
				}
			});
		});
		/*
		 this.colorTan.on("mouseup touchend", function(){
		 this.controller.setBack();
		 }); */
	};
	if(this.isField){
		var i,l;
		l = this.content.length;
		for(i=1;i<l;i++){
			this.content[i].getObject().opacity(0);
		};
		if(this.colorTan.controller == undefined) this.colorTan.controller = this;
		this.colorTan.currentIndex = 0;
		this.colorTan.on("click tap", function(){
			this.controller.setClick();
		});
	};

};

InteractiveTask.SampleGroupField.prototype.setObjectRotation = function(target, rot){
	if(rot == 360 || rot == -360) rot = 0;
	if(rot<0){
		rot = 360+rot;
	};
	if(rot>360){
		rot = rot - 360;
	};
	target.rotation(rot);
};

InteractiveTask.SampleGroupField.prototype.setBack = function(){
	var deltaX = this.colorTan.x() - this.blackTan.x();
	var deltaY = this.colorTan.y() - this.blackTan.y();
	var r = Math.sqrt(deltaX*deltaX+deltaY*deltaY);
	if(r<=this.diap && this.colorTan.rotation() == this.blackTan.rotation()){
		this.colorTan.x(this.blackTan.x());
		this.colorTan.y(this.blackTan.y());
		//this.colorTan.draggable(false);
		this.colorTan.off("mousedown touchstart");
	};
	this.colorTan.getLayer().draw();
	this.controller.checkTask();
};
InteractiveTask.SampleGroupField.prototype.rotate = function(degree){
	degree = Math.round(degree);
	this.setObjectRotation(this.colorTan, this.colorTan.rotation()+degree);
	//this.colorTan.rotate();
};
InteractiveTask.SampleGroupField.prototype.setClick = function(){
	++this.colorTan.currentIndex;
	if( this.colorTan.currentIndex == this.content.length) this.colorTan.currentIndex = 0;
	var i,l;
	for(i=0;i<this.content.length;i++){
		if(this.colorTan.currentIndex == i){
			this.content[i].getObject().opacity(1);
		}   else{
			this.content[i].getObject().opacity(0);
		};
	};
	this.colorTan.getLayer().draw();
	this.controller.checkTask();
};
InteractiveTask.SampleGroupField.prototype.isComplate = function(){
	if(!this.isTan && !this.isField) return true;
	if(this.isTan && !this.isField){
		if(this.colorTan.x() == this.blackTan.x() && this.colorTan.y() == this.blackTan.y()) return true;
	};
	var i,l;
	l = this.content.length;

	if(!this.isTan && this.isField){
		for(i=0;i<l;i++){
			if(this.content[i].getObject().mustVisible && this.content[i].getObject().opacity()==1) return true;
		};
	};
	if(this.isTan && this.isField){
		var flag = false;
		for(i=0;i<l;i++){
			if(this.content[i].getObject().mustVisible && this.content[i].getObject().opacity()==1) flag = true;
		};
		var flag2 = (this.colorTan.x() == this.blackTan.x() && this.colorTan.y() == this.blackTan.y());
		return flag&&flag2;
	};
	return false;
};
/**
 * Created by –Ф–∞—И–∞ on 02.05.15.
 */

InteractiveTask.ListingImagesController = function (options) {
	this.xml = options.xml;
	this.controller = options.controller;
	this.path = InteractiveTask.PATH;
};
InteractiveTask.ListingImagesController.prototype.addToLayer = function(layer){
	this.handler.addToLayer(layer);
	layer.add(this.resultArea);
	layer.add(this.resultText);
	var handler = this.handler;
	var resultText = this.resultText;
	var control =  this.controller;
	var picturesCount = this.picturesCount;
	layer.on('click tap', function () {
		//updating result
		if (handler.checkImages()){
			resultText.setText(handler.completedImagesCount + ' / ' + picturesCount);
		};
		layer.draw();
		control.checkTask();
	});
};
InteractiveTask.ListingImagesController.prototype.init = function () {
	var imageObjs = new Array(),
		pwidth = this.controller.player.width,
		pheight = this.controller.player.height,
		x = parseInt(this.xml.X), y = parseInt(this.xml.Y),
		fileNames = this.xml.SETTINGS.LISTINGIMAGES.NAMESPACE.FILENAME,
		picturesCount = this.picturesCount = fileNames.length,
		layer = this.ObjLayer, sample, thiscontroller = this,
		i, j,
	//config for creating pieces handler
		conf = {
			numLine: parseInt(this.xml.SETTINGS.LISTINGIMAGES.NUMLINE),
			numCol: parseInt(this.xml.SETTINGS.LISTINGIMAGES.NUMCOLUMN),
			width: parseInt(this.xml.SETTINGS.LISTINGIMAGES.WIDTH),
			height: parseInt(this.xml.SETTINGS.LISTINGIMAGES.HEIGHT),
			path: this.path
		};
	//creating images from array of file names isDone field described that image collectedor not, img - image
	this.handler = new PiecesHandler(conf, fileNames);
	//this.handler.addToLayer(layer);

	//creating rectangle with count of completed images
	this.resultArea = new Konva.Rect({
		width: 100,
		height: 30,
		stroke: 'black',
		strokeWidth: 2,
		x: pwidth / 2 - 100,
		y: pheight - 35
	});

	this.resultText = new Konva.Text({
		x: this.resultArea.getX(),
		y: this.resultArea.getY(),
		text: this.handler.completedImagesCount + ' / ' + picturesCount,
		width: this.resultArea.getWidth(),
		fontSize: 30,
		align: 'center',
		fill: 'black'
	});




	this.getResult = function () {
		return this.handler.isComplete();
	};
};

InteractiveTask.ListingImagesController.prototype.isComplate = function () {
	return this.getResult();
};
InteractiveTask.ListingImagesController.prototype.clear = function(){
	InteractiveTask.disposeObject(this);
};

function PiecesHandler(conf, fileNames) {
	this.imageObjs = [];
	this.completedImagesCount = 0;
	this.completed = {};
	for (var i in fileNames) {

		var name = fileNames[i]['#text'];
		if (!!name) {
			imageObj = {isDone: false};
			imageObj.img = InteractiveTask.LIBRARY.getImage(name);
			this.imageObjs.push(imageObj);
		};

	};

	this.piecesArray = [];
	item = 0;
	picturesCount = fileNames.length;

	var data = {
		pieceWidth: conf.width,
		pieceHeight: conf.height,
		imageObjects: this.imageObjs,
		picturesCount: picturesCount,

	};
	for (i = 0; i < conf.numCol; i++) {
		for (j = 0; j < conf.numLine; j++) {

			var imageId = Math.floor(Math.random() * picturesCount);
			data.imageId = imageId;
			data.i = i;
			data.j = j;
			this.piecesArray[item] = new PieceItem(data);
			item++;
		};
	};


};

PiecesHandler.prototype.checkImages = function () {
	imageId = this.piecesArray[0].imageId;
	for (var i in this.piecesArray) {
		if (this.piecesArray[i].imageId !== imageId) {
			return false;
		};
	};
	this.completed[imageId] = true;
	this.completedImagesCount = Object.keys(this.completed).length;
	this.shuffle();
	return true;
};

PiecesHandler.prototype.shuffle = function () {
	for (var i in this.piecesArray) {
		var piece = this.piecesArray[i];
		var imageId = Math.floor(Math.random() * picturesCount);
		piece.imageId = imageId;
		piece.imgObj.setImage(this.imageObjs[imageId].img);
	};
};

PiecesHandler.prototype.addToLayer = function (layer) {
	for (var i in this.piecesArray) {
		layer.add(this.piecesArray[i].imgObj);
	};
};

PiecesHandler.prototype.isComplete = function () {
	return this.completedImagesCount == picturesCount;
};


function PieceItem(data) {
	var that = this;

	that.imageId = data.imageId;
	that.imgObj = new Konva.Image({
		image: data.imageObjects[that.imageId].img,
		crop: {
			x: data.i * data.pieceWidth,
			y: data.j * data.pieceHeight,
			width: data.pieceWidth,
			height: data.pieceHeight
		},
		x: data.i * data.pieceWidth + data.i,
		y: data.j * data.pieceHeight + data.j,
		width: data.pieceWidth,
		height: data.pieceHeight
	});

	that.imgObj.on('click tap', function () {

		that.imageId = (that.imageId + 1 >= data.picturesCount) ? 0 : that.imageId + 1;
		this.setImage(data.imageObjects[that.imageId].img);
	});


	return that;
};/**
 * Created with IntelliJ IDEA.
 * User: Yurchik
 * Date: 02.03.15
 * Time: 14:35
 * To change this template use File | Settings | File Templates.
 */
InteractiveTask.MarkController = function(options){
	this.controller = options.task;
	this.markArray = new Array();
	this.xmlMarkArray = new Array();

	var self = this.controller;
	InteractiveTask.BACKGROUND_LAYER.on("mousedown touchstart", function(event){
		self.minusHealth();
	});
};

InteractiveTask.MarkController.prototype.add = function(xml){
	this.xmlMarkArray.push(xml);
};
InteractiveTask.MarkController.prototype.startCreating = function(){
	var i,l;
	l = this.xmlMarkArray.length;
	for(i=0;i<l;i++){
		this.markArray.push(new InteractiveTask.SampleMark({
			xml : this.xmlMarkArray[i],
			image : InteractiveTask.LIBRARY.getButton(InteractiveTask.CONST.MARK_BUTTON),
			controller : this,
		}));
	};
};

InteractiveTask.MarkController.prototype.selectClass = function(value){
	var i,l;
	l = this.markArray.length;
	for(i=0;i<l;i++){
		if(value == this.markArray[i].getClass()){
			this.markArray[i].start();
		};
	};
	this.checkComplate();
};

InteractiveTask.MarkController.prototype.runLabelAnimation = function(label){
	this.controller.runLabelAnimation(label);
};
InteractiveTask.MarkController.prototype.getSpriteAnimation = function(options){
	return this.controller.getSpriteAnimation(options);
};

InteractiveTask.MarkController.prototype.checkComplate = function(){
	this.controller.checkTask();
};
InteractiveTask.MarkController.prototype.isComplate = function(){
	var i,l;
	l = this.markArray.length;
	for(i=0;i<l;i++){
		if(!this.markArray[i].isComplate()) return false;
	};
	return true;
};
InteractiveTask.MarkController.prototype.clear = function(){
	while(this.markArray.length>0){
		InteractiveTask.disposeObject(this.markArray[0]);
		this.markArray[0] = null;
		this.markArray.shift();
	};
};

InteractiveTask.MarkController.prototype.addToLayer = function(layer){
	var i,l;
	l = this.markArray.length;
	for(i=0;i<l;i++){
		layer.add(this.markArray[i].mark);
	};
};
/*****************************************************************************************************************************/
InteractiveTask.SampleMark = function(options){
	this.xml = options.xml;
	this.image = options.image;
	this.controller = options.controller;



	var width = parseFloat(this.xml.WIDTH);
	var height = parseFloat(this.xml.HEIGHT);
	var x = parseFloat(this.xml.X);
	var y = parseFloat(this.xml.Y);
	var scaleX = width/100;
	var scaleY = height/100;
	this.mark = new Konva.Sprite({
		x : x,
		y : y,
		image : this.image,
		animation : 'standing',
		animations : {
			standing: [
				0, 0, 100, 100,
				100, 0, 100, 100,
				200, 0, 100, 100,
				300, 0, 100, 100,
				400, 0, 100, 100,
				500, 0, 100, 100,
				600, 0, 100, 100,
				700, 0, 100, 100,
				800, 0, 100, 100,
				900, 0, 100, 100,
			]
		},
		frameRate :60,
		frameIndex : 0
	});
	this.mark.scaleX(scaleX);
	this.mark.scaleY(scaleY);
	this.mark.controller = this.controller;
	this.mark.currentClass = parseInt(this.xml.CLASS);

	if(this.xml.STARTANIMATIONCOMPLATE != undefined){
		//this.startLabelComplate = this.xml.STARTANIMATIONCOMPLATE;
		/*
		 –Љ–µ–љ—П–µ–Љ –љ–∞ —Б–Њ–Ј–і–∞–љ–Є–µ –Љ–∞—Б—Б–Є–≤–∞ –Љ–µ—В–Њ–Ї –∞–љ–Є–Љ–∞—Ж–Є–Є
		 */
		this.startLabelComplate = new Array();
		if(this.xml.STARTANIMATIONCOMPLATE.indexOf(",")!=-1){
			var lblArr = this.xml.STARTANIMATIONCOMPLATE.split(",");
			var i,l;
			l = lblArr.length;
			for(i=0;i<l;i++){
				this.startLabelComplate[i] = lblArr[i];
			}
		}else{
			this.startLabelComplate[0] = this.xml.STARTANIMATIONCOMPLATE;
		}

	} else{
		this.startLabelComplate = "";
	};
	if(this.xml.STARTANIMATIONDOWN != undefined){
		//this.startLabelMouseDown = this.xml.STARTANIMATIONDOWN;
		/*
		 –Љ–µ–љ—П–µ–Љ –љ–∞ —Б–Њ–Ј–і–∞–љ–Є–µ –Љ–∞—Б—Б–Є–≤–∞ –Љ–µ—В–Њ–Ї –∞–љ–Є–Љ–∞—Ж–Є–Є
		 */
		this.startLabelMouseDown = new Array();
		if(this.xml.STARTANIMATIONDOWN.indexOf(",")!=-1){
			var lblArr = this.xml.STARTANIMATIONDOWN.split(",");
			var i,l;
			l = lblArr.length;
			for(i=0;i<l;i++){
				this.startLabelMouseDown[i] = lblArr[i];
			}
		}else{
			this.startLabelMouseDown[0] = this.xml.STARTANIMATIONDOWN;
		}
	} else{
		this.startLabelMouseDown = "";
	};
	if(this.startLabelMouseDown == ""){
		this.startLabelMouseDown = new Array();
	}
	this.startLabelMouseDown.push("markClass_" + this.xml.CLASS);

	InteractiveTask.log("[Player] - mark labels MD - ", this.startLabelMouseDown);

	this.mark.startLabelComplate = this.startLabelComplate;
	this.mark.startLabelMouseDown = this.startLabelMouseDown;

	this.complateAnimation = function(){
		this.mark.isSelect = true;

		if(this.startLabelComplate!=""){
			this.controller.runLabelAnimation(this.startLabelComplate);
			this.startLabelComplate = "";
		};
	};
	this.controller.getSpriteAnimation({
		class:this,
		object:this.mark,
		xml:{
			"-startTime":"0",
			"-cicling":false,
			"-removeObject":false,
			"-address":"0",
			"-multiple":false,
			"-label":"markClass_" + this.xml.CLASS,
			"-name":"standing",
		}
	});

	//this.mark.start();
	this.mark.isSelect = false;
	//TODO: –≤–≤–µ—Б—В–Є touchstart –Є –њ—А–Њ–≤–µ—А–Є—В—М –љ–∞ –њ–ї–∞–љ—И–µ—В–∞—Е
	this.mark.on("mousedown touchstart", function(){
		if(this.startLabelMouseDown!=""){
			this.controller.runLabelAnimation(this.startLabelMouseDown);
			this.startLabelMouseDown = "";
		};
		this.controller.selectClass(this.currentClass);
	});


};
InteractiveTask.SampleMark.prototype.getClass = function(){
	return parseInt(this.xml.CLASS);
};

InteractiveTask.SampleMark.prototype.start = function(){
	this.mark.isSelect = true;
	this.mark.off("mousedown touchstart");
};
InteractiveTask.SampleMark.prototype.isComplate = function(){
	return this.mark.isSelect;
};/**
 * Created with IntelliJ IDEA.
 * User: Yurchik
 * Date: 24.02.15
 * Time: 13:52
 * To change this template use File | Settings | File Templates.
 */
/*************************************************************************************/
/****************************** PALITRA (COLOR PICKER) *******************************/
/*************************************************************************************/
InteractiveTask.PalitraController = function(options){
	this.xml = options.xml;
};
InteractiveTask.PalitraController.prototype.init = function(){
	var xmlColor = new Array();
	if(this.xml.COLOR[0] == undefined){
		xmlColor[0] = this.xml.COLOR;
	}else{
		xmlColor = this.xml.COLOR;
	};
	var deltaX = 3;
	var deltaY = 3;
	var currentX = deltaX;
	var currentY = deltaY;
	var pickerSize = 35;

	var numLine = Math.ceil(xmlColor.length/7);
	var heightPanel = numLine*(pickerSize+deltaY) + deltaY;
	var widthPanel;
	if(xmlColor.length<7){
		widthPanel = xmlColor.length*(pickerSize+deltaX) + deltaX;
	}else{
		widthPanel = 7*(pickerSize+deltaX) + deltaX;
	};
	this.background = new Konva.Rect({
		x : 0,
		y : 0,
		width : widthPanel,
		height : heightPanel,
		strokeWidth : 1,
		stroke : 'black',
		fill : "#B6B6B6"
	});
	this.pickerArray = new Array();
	var i = 0;
	for(i=0;i<xmlColor.length;i++){
		this.pickerArray[i] = new InteractiveTask.SamplePicker(xmlColor[i], this);
	};
	this.panel = new Konva.Group();
	this.panel.add(this.background);
	for(i=0;i<this.pickerArray.length;i++){

		if(i%7==0 && i!=0) currentY += pickerSize + deltaY;
		currentX = (i%7) * (pickerSize + deltaX) + deltaX;
		this.pickerArray[i].picker.x(currentX);
		this.pickerArray[i].picker.y(currentY);
		this.panel.add(this.pickerArray[i].picker);
	};
	this.panel.x(parseFloat(this.xml.X));
	this.panel.y(parseFloat(this.xml.Y));


	this.currentColor = this.pickerArray[0].color;
};
InteractiveTask.PalitraController.prototype.allDeselect = function(picker){
	var i;
	//alert("deselect");
	for(i=0;i<this.pickerArray.length;i++){
		if(picker!=this.pickerArray[i].picker) {
			this.pickerArray[i].deselect();
		} else {
			this.pickerArray[i].select();
		};
	};
	//alert("redraw layer");
	this.panel.getLayer().draw();
};
InteractiveTask.PalitraController.prototype.complatePainting = function(){
	var layer = this.panel.getLayer();
	while(this.pickerArray.length>0){
		this.pickerArray[0].picker.remove();
		InteractiveTask.disposeObject(this.pickerArray[0]);
		this.pickerArray[0] = null;
		this.pickerArray.shift();
	};
	this.panel.remove();
	InteractiveTask.disposeObject(this);
	layer.draw();
};
InteractiveTask.PalitraController.prototype.addToLayer = function(layer){
	layer.add(this.panel);
};

InteractiveTask.SamplePicker = function(xml, controller){
	var pickerSize = 35;
	this.color = xml["#text"].substr(2, xml["#text"].length-2);
	while(this.color.length<6){
		this.color = "0"+this.color;
	};
	this.color = "#"+this.color;
	this.picker = new Konva.Rect({
		width : pickerSize,
		height : pickerSize,
		strokeWidth : 1,
		stroke : 'black',
		fill : this.color
	});
	this.picker.on("mousedown touchstart", function(event){
		//alert("controller "+controller);
		controller.currentColor = this.fill();
		controller.allDeselect(this);

	});

};
InteractiveTask.SamplePicker.prototype.select = function(){
	//alert("select start");

	this.picker.stroke("#ffffff");
	//alert("select end");
};
InteractiveTask.SamplePicker.prototype.deselect = function(){
	//alert("deselect start");
	this.picker.stroke("#000000");
	//alert("deselect end");
};/** Created with IntelliJ IDEA.
 * User: Yurchik
 * Date: 27.02.15
 * Time: 10:39
 * To change this template use File | Settings | File Templates.
 */
InteractiveTask.PictureTanController = function(options){
	//alert(task);
	this.task = options.task;
	this.diap = options.diap;
	this.isUniq = options.uniq;

	this.basePath = options.basePath;

	this.balance = 0;
	//alert(this.task);
	this.tanArray = new Array();
	//this.taskController = options.task;
};
InteractiveTask.PictureTanController.prototype.add = function(xml){
	++this.balance;
	var id = this.tanArray.length;
	this.tanArray[id] = new InteractiveTask.SamplePictureTan(xml);
	this.tanArray[id].init({
		path : this.basePath,
		controller: this
	});

};
InteractiveTask.PictureTanController.prototype.area = function(area){
	var i,l;
	l = this.tanArray.length;
	for(i=0;i<l;i++){
		this.tanArray[i].area(area);
	};
};
InteractiveTask.PictureTanController.prototype.getAnimation = function(options){
	return this.task.getAnimation(options);
};
InteractiveTask.PictureTanController.prototype.runLabelAnimation = function(label){
	this.task.runLabelAnimation(label);
};
/*InteractiveTask.PictureTanController.prototype.complateLoadingTask = function(){
 this.task.complateLoadingTask();
 } */
/*************************************************************/
/**************************CONTROL TANS***********************/
InteractiveTask.PictureTanController.prototype.select = function (tan){
	//alert("Select tan");
	this.task.deSelect();
	tan.isSelect = true;
	//alert("Select tan");
};
InteractiveTask.PictureTanController.prototype.deSelect = function(){
	var length = this.tanArray.length;
	for(i=0;i<length;i++){
		this.tanArray[i].colorTan.isSelect = false;
	};
};
InteractiveTask.PictureTanController.prototype.rotate = function(degree){
	var length = this.tanArray.length;
	for(i=0;i<length;i++){
		if(this.tanArray[i].colorTan.isSelect){
			this.tanArray[i].rotate(degree);
		};
	};
};

InteractiveTask.PictureTanController.prototype.tanMouseUp = function(tan){
	var i;
	var length = this.tanArray.length;
	var remTanObject;
	for(i=0;i<length;i++){
		if(this.tanArray[i].colorTan == tan){
			remTanObject = this.tanArray[i];
			break;
		};
	};
	if(!this.isUniq){
		remTanObject.simplePosition(this.diap);
	}else{
		var settings = remTanObject.getSettings();
		settings.diap = this.diap;
		var flag = false;
		for(i=0;i<length && !flag;i++){
			flag = this.tanArray[i].checkOtherTan(settings);
			if(flag){
				remTanObject.setPosition(this.tanArray[i].getPosition());
				this.tanArray[i].blackTan.isFree = false;
				//break;
			};
		};
		if(!flag){
			remTanObject.backPosition();
			this.task.minusHealth();
		};
	};
	this.task.checkTask();
};

InteractiveTask.PictureTanController.prototype.isComplate = function(){
	var i = 0;
	var length = this.tanArray.length;
	for(i=0;i<length;i++){
		//alert(this.tanArray[i].isComplate());
		this.tanArray[i].setReport(false);
		if(this.tanArray[i].isEnterArea()){
			if(!this.tanArray[i].isEnter()) return false;
		}   else{
			if(!this.tanArray[i].isComplate()) return false;
		};
		this.tanArray[i].setReport(true);
	};
	return true;
};

InteractiveTask.PictureTanController.prototype.hasMarks = function(){
	return this.task.hasMarks();
};
InteractiveTask.PictureTanController.prototype.minusHealth = function(){
	this.task.minusHealth();
};

InteractiveTask.PictureTanController.prototype.clear = function(){
	while(this.tanArray.length>0){
		InteractiveTask.disposeObject(this.tanArray[0]);
		this.tanArray[0] = null;
		this.tanArray.shift();
	};
};
InteractiveTask.PictureTanController.prototype.balckAddToLayer = function(layer){
	var length = this.tanArray.length;
	var i;
	for(i=0;i<length;i++){
		if(!this.tanArray[i].isDeletateBlack){
			layer.add(this.tanArray[i].blackTan);
			this.tanArray[i].blackTan.remZIndex = this.tanArray[i].blackTan.getZIndex();
			//layer.batchDraw();
			this.tanArray[i].blackTan.blackImageTan.cache();
			this.tanArray[i].blackTan.blackImageTan.filters([Konva.Filters.RGB]);
		}
	};
	/*if(this.blackLayer!=null){
	 this.blackLayer.add(this.blackTan);
	 this.blackTan.draw();
	 blackImageTan.cache();
	 blackImageTan.filters([Konva.Filters.RGB]);
	 };*/
};
InteractiveTask.PictureTanController.prototype.colorAddToLayer = function(layer){
	var length = this.tanArray.length;
	var i;
	for(i=0;i<length;i++){
		layer.add(this.tanArray[i].colorTan);
		this.tanArray[i].colorTan.remZIndex = this.tanArray[i].colorTan.getZIndex();
	};
};

/************************************************************************************************************************************/
InteractiveTask.SamplePictureTan = function(xml){
	this.xml = xml;
	this.setReport(false);
};
InteractiveTask.SamplePictureTan.prototype.setReport = function(isComplate){
	if(this.xml.BLACK.DELETE == "1") isComplate = true;
	if(this.xml.LESSONLINK != undefined){
		this.xml.LESSONLINK["-isComplate"] = isComplate;
	};
};
InteractiveTask.SamplePictureTan.prototype.init = function(options){
	//this.path = options.path+this.xml.IMAGE;
	this.controller = options.controller;
	this.enterArea = false;
	var width = parseFloat(this.xml.WIDTH);
	var height = parseFloat(this.xml.HEIGHT);
	var x = parseFloat(this.xml.COLOR.X);
	var y = parseFloat(this.xml.COLOR.Y);

	this.colorTan = new Konva.Group();
	this.colorTan.setAttrs({
		width : width,
		height : height
	});
	var colorImageTan = new Konva.Image({
		x : -width/2,
		y : -height/2,
		image : InteractiveTask.LIBRARY.getImage(this.xml.IMAGE)/*,
		 width : width,
		 height : height   */
	});


	//InteractiveTask.log("paint tan colorImageTan.width = ", colorImageTan.width(), "; paint tan colorImageTan.height = ", colorImageTan.height())
	this.scaleX = width/colorImageTan.width();
	this.scaleY = height/colorImageTan.height();
	// InteractiveTask.log("paint tan scaleX = ", this.scaleX, "; paint tan scaleY = ", this.scaleY);
	colorImageTan.width(width);
	colorImageTan.height(height);
	this.colorTan.colorImageTan = colorImageTan;
	// this.colorTan.draggable(true);
	/*
	 this.colorTan.dragBoundFunc(function(pos){
	 var X=pos.x;
	 var Y=pos.y;
	 var scaleX =InteractiveTask.STAGE.scaleX();
	 var scaleY =InteractiveTask.STAGE.scaleY();

	 if(X<width*scaleX/2){X=width*scaleX/2;};
	 if(X>InteractiveTask.STAGE.width()-width*scaleX/2){X=InteractiveTask.STAGE.width()-width*scaleX/2;};
	 if(Y<height*scaleY/2){Y=height*scaleY/2;};
	 if(Y>InteractiveTask.STAGE.height()-height*scaleY/2){Y=InteractiveTask.STAGE.height()-height*scaleY/2;};
	 return({x:X, y:Y});
	 });
	 */
	this.colorTan.add(colorImageTan);
	this.colorTan.x(x);
	this.colorTan.y(y);

	// InteractiveTask.log("Color tan was added");
	this.blackTan = new Konva.Group();

	var blackImageTan = new Konva.Image({
		x : -width/2,
		y : -height/2,
		image :  InteractiveTask.LIBRARY.getImage(this.xml.IMAGE),
		width : width,
		height : height
	});
	this.blackTan.blackImageTan = blackImageTan;
	this.blackTan.add(blackImageTan);
	this.blackTan.x(parseFloat(this.xml.BLACK.X));
	this.blackTan.y(parseFloat(this.xml.BLACK.Y));


	if(this.xml.BLACK.ALPHA == "1"){
		this.blackTan.visible(false);

	};

	this.colorTan.rotation(360 - parseInt(this.xml.COLOR.R)*(22.5));
	this.blackTan.rotation(360 - parseInt(this.xml.BLACK.R)*(22.5));
	if(this.colorTan.rotation() == 360)  this.colorTan.rotation(0);
	if(this.blackTan.rotation() == 360)  this.blackTan.rotation(0);

	if(this.xml.STARTANIMATIONCOMPLATE != undefined){
		//this.startLabelComplate = this.xml.STARTANIMATIONCOMPLATE;
		/*
		 –Љ–µ–љ—П–µ–Љ –љ–∞ —Б–Њ–Ј–і–∞–љ–Є–µ –Љ–∞—Б—Б–Є–≤–∞ –Љ–µ—В–Њ–Ї –∞–љ–Є–Љ–∞—Ж–Є–Є
		 */
		this.startLabelComplate = new Array();
		if(this.xml.STARTANIMATIONCOMPLATE.indexOf(",")!=-1){
			var lblArr = this.xml.STARTANIMATIONCOMPLATE.split(",");
			var i,l;
			l = lblArr.length;
			for(i=0;i<l;i++){
				this.startLabelComplate[i] = lblArr[i];
			};
		}else{
			this.startLabelComplate[0] = this.xml.STARTANIMATIONCOMPLATE;
		};

	} else{
		this.startLabelComplate = "";
	};
	if(this.xml.STARTANIMATIONDOWN != undefined){
		//this.startLabelMouseDown = this.xml.STARTANIMATIONDOWN;
		/*
		 –Љ–µ–љ—П–µ–Љ –љ–∞ —Б–Њ–Ј–і–∞–љ–Є–µ –Љ–∞—Б—Б–Є–≤–∞ –Љ–µ—В–Њ–Ї –∞–љ–Є–Љ–∞—Ж–Є–Є
		 */
		this.startLabelMouseDown = new Array();
		if(this.xml.STARTANIMATIONDOWN.indexOf(",")!=-1){
			var lblArr = this.xml.STARTANIMATIONDOWN.split(",");
			var i,l;
			l = lblArr.length;
			for(i=0;i<l;i++){
				this.startLabelMouseDown[i] = lblArr[i];
			};
		}else{
			this.startLabelMouseDown[0] = this.xml.STARTANIMATIONDOWN;
		};
	} else{
		this.startLabelMouseDown = "";
	};


	this.colorTan.isSelect = false;
	this.colorTan.controller =  this.controller;
	this.colorTan.startLabelMouseDown = this.startLabelMouseDown;
	this.colorTan.isRotation = (this.xml.ISROTATION == "true");
	this.colorTan.isDrag = (this.xml.ISDRAG == "true");


	this.blackTan.listening(false);
	this.isDeletateBlack = false;
	if(this.xml.BLACK.DELETE == "1"){
		this.isDeletateBlack = true;
		this.colorTan.isFree = false;
		this.blackTan.isFree = false;
		this.setReport(true);
		this.blackTan.remove();
		this.colorTan.listening(false);
		if(this.controller.hasMarks()){
			this.colorTan.on("mousedown touchstart", function(event){
				this.controller.minusHealth();
			});
		};
		if(this.xml.SETMISSTAKE!=undefined){
			if(this.xml.SETMISSTAKE == "true"){
				this.colorTan.listening(true);
				this.colorTan.on("mousedown touchstart", function(event){
					this.controller.minusHealth();
				});
			};
		};
		//InteractiveTask.log("delete tan");
	}else{
		this.colorTan.isFree = true;
		this.blackTan.isFree = true;
		this.colorTan.on("mousedown touchstart", function(event){
			//InteractiveTask.extendsDragRotate(this, event);
			InteractiveTask.tansDragRotateInterface(this, event);

		});
	};

	if(this.xml.ISDINAMYC=="true"){
		this.colorTan.isFree = false;
		this.blackTan.isFree = false;
	};

	if(this.isEnterArea())this.blackTan.isFree = false;

	// add animation for color tan
	if(this.xml.COLOR.ANIMATION!=undefined){
		this.colorTan.startX = this.colorTan.x();
		this.colorTan.startY = this.colorTan.y();
		this.colorTan.scaleX = this.scaleX;
		this.colorTan.scaleY = this.scaleY;
		this.colorTan.animation_x = function(x){
			this.x(this.startX+x);
		};
		this.colorTan.animation_y = function(y){
			this.y(this.startY+y);
		};
		this.colorTan.animation_rotation = function(r){
			var rot = (Math.floor(r*10))/10;
			this.rotation(rot);
			if(this.rotation()<0){
				this.rotation(360+this.rotation());
			};
			if(this.rotation()>=360){
				this.rotation(this.rotation()-360);
			};
		};
		this.colorTan.animation_scaleX = function(scale){
			var sc = scale/this.scaleX;
			this.colorImageTan.scaleX(sc);
			this.colorImageTan.x((-1)*((this.colorImageTan.width()*sc)/2));
		};
		this.colorTan.animation_scaleY = function(scale){
			var sc = scale/this.scaleY;
			this.colorImageTan.scaleY(sc);
			this.colorImageTan.y((-1)*((this.colorImageTan.height()*sc)/2));
		};
		this.colorTan.animation_alpha = function(alpha){
			this.colorImageTan.opacity(alpha);
		};
		this.colorTan.animation_fillRed = function(red){

		};
		this.colorTan.animation_fillGreen = function(green){

		};
		this.colorTan.animation_fillBlue = function(blue){

		};
		this.colorTan.animation_fill = function(color){

		};


		this.colorAnimation = this.controller.getAnimation({
			class:this,
			object:this.colorTan,
			xml:this.xml.COLOR.ANIMATION
		});
	};
	if(this.xml.BLACK.ANIMATION!=undefined){
		this.blackTan.startX = this.blackTan.x();
		this.blackTan.startY = this.blackTan.y();
		this.blackTan.scaleX = this.scaleX;
		this.blackTan.scaleY = this.scaleY;
		this.blackTan.animation_x = function(x){
			this.x(this.startX+x);
		};
		this.blackTan.animation_y = function(y){
			this.y(this.startY+y);
		};
		this.blackTan.animation_rotation = function(r){
			var rot = (Math.floor(r*10))/10;
			this.rotation(rot);
			if(this.rotation()<0){
				this.rotation(360+this.rotation());
			};
			if(this.rotation()>=360){
				this.rotation(this.rotation()-360);
			};
		};
		this.blackTan.animation_scaleX = function(scale){
			var sc = scale/this.scaleX;
			this.blackImageTan.scaleX(sc);
			this.blackImageTan.x((-1)*((this.blackImageTan.width()*sc)/2));
		};
		this.blackTan.animation_scaleY = function(scale){
			var sc = scale/this.scaleY;
			this.blackImageTan.scaleY(sc);
			this.blackImageTan.y((-1)*((this.blackImageTan.height()*sc)/2));
		};
		this.blackTan.animation_alpha = function(alpha){
			this.blackImageTan.opacity(alpha);
		};
		this.blackTan.animation_fillRed = function(red){

		};
		this.blackTan.animation_fillGreen = function(green){

		};
		this.blackTan.animation_fillBlue = function(blue){

		};
		this.blackTan.animation_fill = function(color){

		};


		this.blackAnimation = this.controller.getAnimation({
			class:this,
			object:this.blackTan,
			xml:this.xml.BLACK.ANIMATION
		});
	};
	//this.controller.complateLoadingTask();
};

InteractiveTask.SamplePictureTan.prototype.rotate = function(degree){
	var rot = this.colorTan.rotation()+degree;
	if(rot == 360 || rot == -360) rot = 0;
	if(rot<0){
		rot = 360+rot;
	};
	if(rot>360){
		rot = rot - 360;
	};
	//alert("color rotation = " + rot + "; black rotation = " + this.blackTan.rotation());
	//InteractiveTask.log("color rotation = ",rot,"; black rotation = ",this.blackTan.rotation());
	this.colorTan.rotation(rot);
};
InteractiveTask.SamplePictureTan.prototype.simplePosition = function(diap){
	//alert("Color tan rotation = "+this.colorTan.rotation());
	//alert("Black tan rotation = "+this.blackTan.rotation());
	var flag = this.colorTan.rotation() == this.blackTan.rotation();
	if(flag){
		//alert("rotation is equal");
		//alert("diap = " + diap);
		if(this.simpleCheckDiap(diap)){
			//alert("is set");
			this.setPosition(this.getPosition());
			this.blackTan.isFree = false;
			return;

		};
	};
	this.backPosition();
};
InteractiveTask.SamplePictureTan.prototype.simpleCheckDiap = function(diap){
	var deltaX = this.colorTan.x() - this.blackTan.x();
	var deltaY = this.colorTan.y() - this.blackTan.y();
	var delta = Math.sqrt(deltaX*deltaX + deltaY*deltaY);
	//alert("delta diap = " + delta);
	if(delta<=diap) return true;
	return false;
};

InteractiveTask.SamplePictureTan.prototype.getSettings = function(){
	var out = {
		imageName : this.xml.IMAGE,
		rotation : this.colorTan.rotation(),
		width : parseFloat(this.xml.WIDTH),
		height : parseFloat(this.xml.HEIGHT),
		x : this.colorTan.x(),
		y : this.colorTan.y(),
	};
	return out;
};

InteractiveTask.SamplePictureTan.prototype.checkOtherTan = function(settings){
	if(!this.blackTan.isFree) return false;
	if(this.xml.IMAGE != settings.imageName) return false;
	if(settings.rotation != this.blackTan.rotation()) return false;
	if((settings.width - parseFloat(this.xml.WIDTH))>3) return false;
	if((settings.height - parseFloat(this.xml.HEIGHT))>3) return false;
	var deltaX = settings.x - this.blackTan.x();
	var deltaY = settings.y - this.blackTan.y();
	var delta = Math.sqrt(deltaX*deltaX + deltaY*deltaY);
	//alert("diapason");
	//alert("delta diap = " + delta);
	if(delta<=settings.diap) return true;
	return false;
};

InteractiveTask.SamplePictureTan.prototype.backPosition = function(){
	if(this.xml.ISSTARTPOS!="true") return;
	if(this.isEnterArea()){
		InteractiveTask.log("is enter area = true");
		if(this.isEnter()) return;
	};
	this.colorTan.x(parseFloat(this.xml.COLOR.X));
	this.colorTan.y(parseFloat(this.xml.COLOR.Y));
	this.colorTan.getLayer().draw();
};
InteractiveTask.SamplePictureTan.prototype.getPosition = function(){
	var out = {
		x : this.blackTan.x(),
		y : this.blackTan.y()
	};
	return out;
};
InteractiveTask.SamplePictureTan.prototype.setPosition = function(position){
	if(!this.isEnterArea()){
		this.colorTan.setAttrs(position);
		this.colorTan.getLayer().draw();
		this.colorTan.off("mousedown touchstart");
		this.colorTan.off("mouseout mouseup touchend");
		this.colorTan.isFree = false;
		this.colorTan.listening(false);

		this.colorTan.isSelect = false;
		if(this.startLabelComplate!=""){
			this.controller.runLabelAnimation(this.startLabelComplate);
		};
	}  else{
		if(this.isEnter()){
			if(this.startLabelComplate!=""){
				this.controller.runLabelAnimation(this.startLabelComplate);
			};
		};
	};

};

/*
 –£—Б—В–∞–љ–Њ–≤–Ї–∞ –Њ–±–ї–∞—Б—В–Є –≤–љ–µ—Б–µ–љ–Є—П –≤ —Б–ї—Г—З–∞–µ –µ—Б–ї–Є —Н—В–Њ –љ–Њ–±—Е–Њ–і–Є–Љ–Њ  ///////////////////////////////////////////////////////////////////////////////////
 */
InteractiveTask.SamplePictureTan.prototype.area = function(value){
	if(this.xml.BLACK.DELETE == "1") return;
	this.arrTruePosition = new Array();
	this.arrFalsePosition = new Array();
	var x,y;
	x = parseFloat(this.xml.BLACK.X);
	y = parseFloat(this.xml.BLACK.Y);
	var i,l;
	l = value.length;
	for(i=0;i<l;i++){
		if(x>value[i][0] && x<value[i][2] && y>value[i][1] && y<value[i][3]){
			this.arrTruePosition.splice(0,0,value[i]);
		}else{
			this.arrFalsePosition.splice(0,0,value[i]);
		};
	};
	if(this.arrTruePosition.length>0) {
		this.enterArea = true;
		//this.blackTan.isFree = false;
	};
};
InteractiveTask.SamplePictureTan.prototype.isEnterArea = function(){
	return this.enterArea;
};
InteractiveTask.SamplePictureTan.prototype.isEnter = function(){
	var i,l;
	l = this.arrTruePosition.length;
	var X = this.colorTan.x();
	var Y = this.colorTan.y();
	for(i=0;i<l;i++){
		if(X<this.arrTruePosition[i][0] || X>this.arrTruePosition[i][2] || Y<this.arrTruePosition[i][1] || Y>this.arrTruePosition[i][3]) return false;
	};
	l = this.arrFalsePosition.length;
	for(i=0;i<l;i++){
		if(X>this.arrFalsePosition[i][0] && X<this.arrFalsePosition[i][2] && Y>this.arrFalsePosition[i][1] && Y<this.arrFalsePosition[i][3]) return false;
	};
	return true;
};

InteractiveTask.SamplePictureTan.prototype.isComplate = function(){
	var flag = !(this.colorTan.isFree || this.blackTan.isFree);

	return flag;
};

InteractiveTask.SamplePictureTan.prototype.getObject = function(){
	return this.colorTan;
};

InteractiveTask.SamplePictureTan.prototype.getBlackObject = function(){
	return this.blackTan;
};
/**
 * Created with IntelliJ IDEA.
 * User: Yurchik
 * Date: 03.03.15
 * Time: 11:15
 * To change this template use File | Settings | File Templates.
 */
InteractiveTask.PointsDrawController = function(options){
	this.controller = options.task;
	this.pointsArray = new Array();
};

InteractiveTask.PointsDrawController.prototype.add = function(xml){
	var id = this.pointsArray.length;
	this.pointsArray[id] = new InteractiveTask.PointsSystem(xml);
	this.pointsArray[id].init({
		controller: this
	});
};
InteractiveTask.PointsDrawController.prototype.checkTask = function(){
	this.controller.checkTask();
};

InteractiveTask.PointsDrawController.prototype.isComplate = function(){
	var i,l;
	l = this.pointsArray.length;
	for(i=0;i<l;i++){
		if(!this.pointsArray[i].isComplate()) return false;
	};
	return true;
};
InteractiveTask.PointsDrawController.prototype.minusHealth = function(){
	this.controller.minusHealth();
};

InteractiveTask.PointsDrawController.prototype.clear = function(){
	while(this.pointsArray.length>0){
		InteractiveTask.disposeObject(this.pointsArray[0]);
		this.pointsArray[0] = null;
		this.pointsArray.shift();
	};
};
InteractiveTask.PointsDrawController.prototype.addToLayer = function(layer){
	var i,l;
	l = this.pointsArray.length;
	for(i=0;i<l;i++){
		layer.add(this.pointsArray[i].system);
	};
};

/********************************************************************************************************************************/

InteractiveTask.PointsSystem = function(xml){
	this.xml = xml;

	this.setReport(false);
};
InteractiveTask.PointsSystem.prototype.setReport = function(isComplate){
	if(this.xml.LESSONLINK != undefined){
		this.xml.LESSONLINK["-isComplate"] = isComplate;
	};
};

InteractiveTask.PointsSystem.prototype.init = function(options){
	this.controller = options.controller;
	this.system = new Konva.Group();
	this.system.x(parseFloat(this.xml.X));
	this.system.y(parseFloat(this.xml.Y));
	this.selectLastPoint = (this.xml.LASTPOINT == "true");



	this.plane = new Konva.Shape({
		x : 0,
		y : 0,
		fillEnabled : false,
		strokeWidth : parseInt(this.xml.THICK),
		stroke : InteractiveTask.formatColorFlashToCanvas(this.xml.COLOR),
		sceneFunc : function(context){
			context.beginPath();
			var i,l;
			if(this.pointArray==undefined) {
				this.pointArray = new Array();
			};
			l = this.pointArray.length;
			for(i=0;i<l;i++){
				context.moveTo(this.pointArray[i]["X1"],this.pointArray[i]["Y1"]);
				context.lineTo(this.pointArray[i]["X2"],this.pointArray[i]["Y2"]);
			};
			context.closePath();
			context.fillStrokeShape(this);
		}
	});
	this.plane.lineJoin('round');
	this.system.add(this.plane);

	this.pointsArray = new Array();
	var xmlArrayPoints = InteractiveTask.getArrayObjectsByTag(this.xml.POINTS, "POINT");
	var i,l;
	l = xmlArrayPoints.length;
	// if(l==0) return;
	for(i=0;i<l;i++){
		this.pointsArray.push(new InteractiveTask.SamplePoint({
			xml : xmlArrayPoints[i],
			layer : this.system,
			controller : this,
			active : (this.xml.ACTIVE == "true"),
			alpha : (this.xml.ALPHA == "true"),
			radiusCenter : parseInt(this.xml.RADIUSCENTER),
			radiusArea : parseInt(this.xml.RADIUSAREA)

		}));
	};

	this.prepareTrueArray();
	// InteractiveTask.log(this.trueArray);
};
InteractiveTask.PointsSystem.prototype.prepareTrueArray = function(){
	this.trueArray = new Array();
	if(this.pointsArray.length == 0) return;
	var k,i,j,l;
	var currentArray;
	var flag = false;
	l = this.pointsArray.length;
	for(k=0;k<l;k++){
		currentArray =  this.pointsArray[k].getNeccessaryLines();
		//InteractiveTask.log(currentArray);
		for(i=0;i<currentArray.length;i++){
			flag = true;
			for(j=0;j<this.trueArray.length;j++){
				if(this.trueArray[j] == currentArray[i]){
					flag = false;
					break;
				};
			};
			if(flag){
				this.trueArray.push(currentArray[i]);
			};
		};
	};
};
InteractiveTask.PointsSystem.prototype.selectPoint = function(point){
	var target;
	var i,l;
	l = this.pointsArray.length;
	for(i=0;i<l;i++){
		if(this.pointsArray[i].point == point){
			target = this.pointsArray[i];
			break;
		};
	};
	if(target.isSelect){
		target.deselect();
		target.center.draw();
		this.system.getLayer().draw();
		return;
	};
	var idSelect = -1;
	for(i=0;i<l;i++){
		if(this.pointsArray[i].isSelect){
			idSelect = i;
			break;
		};
	};
	if(idSelect==-1){
		target.select();
	}else{
		this.pointsArray[idSelect].deselect();
		if(this.selectLastPoint){
			target.select();
		}else{
			target.deselect();
		};

		var firstID, secondID;
		firstID = target.getID();
		secondID = this.pointsArray[idSelect].getID();
		var label = (firstID<secondID)?(firstID+"-"+secondID):(secondID+"-"+firstID);

		var flag = true;

		var i,l;
		l = this.plane.pointArray.length;
		for(i=0;i<l;i++){
			if(label == this.plane.pointArray[i]["label"]){
				flag = false;
				this.plane.pointArray.splice(i, 1);
				break;
			};
		};
		if(flag){
			this.plane.pointArray.push({
				label : label,
				X1 : target.point.x(),
				Y1 : target.point.y(),
				X2 : this.pointsArray[idSelect].point.x(),
				Y2 : this.pointsArray[idSelect].point.y(),
			});
			for(i=0;i<this.trueArray.length;i++){
				if(label == this.trueArray[i]){
					flag = false;
					break;
				};
			};
			if(flag){
				this.controller.minusHealth();
			};
		};

		this.system.getLayer().draw();
		//InteractiveTask.log("Draw line");
		this.controller.checkTask();
	};
};

InteractiveTask.PointsSystem.prototype.isComplate = function(){
	if(this.trueArray.length != this.plane.pointArray.length) return false;
	var i,j,l;
	var flag, q;
	flag = false;
	q = true;
	l = this.plane.pointArray.length;
	for(i=0; i<l; i++){
		flag = true;
		for(j=0;j<l;j++){
			if(this.trueArray[i] == this.plane.pointArray[j]["label"]){
				flag = false;
				break;
			};
		};
		if(flag){
			q = false;
			break;
		};
	};
	this.setReport(q);
	return q;
};

/********************************************************************************************************************************/

InteractiveTask.SamplePoint = function(options){
	this.options = options;
	this.idPointsConnect = InteractiveTask.getArrayObjectsByTag(this.options.xml, "LINE_TO");
	//InteractiveTask.log("this.idPointsConnect = " + this.idPointsConnect);
	if(this.options.active && this.idPointsConnect == 0) return;

	this.selectColor ="rgba(255, 0, 0, 1)";
	this.deselectColor = "rgba(0, 0, 0, 1)";
	if(this.options.alpha){
		this.deselectColor = "rgba(0, 0, 0, 0)";
	};
	this.isSelect = false;
	this.center = new Konva.Circle({
		radius : this.options.radiusCenter,
		fill : this.deselectColor,
		stroke : "rgba(0, 0, 0, 0)",
		x : 0,
		y : 0,
	});
	this.area = new Konva.Circle({
		radius : this.options.radiusArea,
		fill : "rgba(0, 0, 0, 0)",
		stroke : "rgba(0, 0, 0, 0)",
		x : 0,
		y : 0,
	});

	this.point = new Konva.Group();
	this.point.x(parseFloat(this.options.xml["-x"]));
	this.point.y(parseFloat(this.options.xml["-y"]));
	this.point.controller = this.options.controller;
	this.point.on("mousedown touchstart", function(){
		this.controller.selectPoint(this);
	});
	this.point.add(this.center);
	this.point.add(this.area);
	this.options.layer.add(this.point);
	//InteractiveTask.log("point x = ", this.point.x(), "; point y = ", this.point.y());
};

InteractiveTask.SamplePoint.prototype.getID = function(){
	return parseInt(this.options.xml["-id"]);
};
InteractiveTask.SamplePoint.prototype.select = function(){
	this.center.fill(this.selectColor);
	this.isSelect = true;
	this.options.layer.draw();
};
InteractiveTask.SamplePoint.prototype.deselect = function(){
	this.center.fill(this.deselectColor);
	this.isSelect = false;
	this.options.layer.draw();
};

InteractiveTask.SamplePoint.prototype.getNeccessaryLines = function(){
	var out = new Array();
	var i,l;
	var str = this.idPointsConnect.toString();
	if(str.indexOf(",")==-1 && str!=""){
		out.push((this.idPointsConnect<this.getID())?(this.idPointsConnect+"-"+this.getID()):(this.getID()+"-"+this.idPointsConnect));
	}else{
		l = this.idPointsConnect.length;
		for(i=0;i<l;i++){
			out.push((this.idPointsConnect[i]<this.getID())?(this.idPointsConnect[i]+"-"+this.getID()):(this.getID()+"-"+this.idPointsConnect[i]));
		};
	};
	return out;
};
/**
 * –?—Б–њ—А–∞–≤–Є—В—М —А–∞–±–Њ—В—Г —Б —Б–ї–Њ–µ–Љ
 * @param options
 * @constructor
 */
InteractiveTask.PositioningController = function(options) {
	this.layer = options.layer;
	this.xml = options.xml;
	this.controller = options.controller;
	//this.path = options.path;

	this.init();
};
InteractiveTask.PositioningController.prototype.clear = function(){
	InteractiveTask.disposeObject(this);
};
InteractiveTask.PositioningController.prototype.init = function(){
	var image1 = InteractiveTask.LIBRARY.getImage(this.xml.FILENAME1["#text"]),// new Image(),
		image2 = InteractiveTask.LIBRARY.getImage(this.xml.FILENAME2["#text"]),//new Image(),
		altQuestionImg = InteractiveTask.LIBRARY.getImage(this.xml.FILENAME3),//new Image(),
		failImg = InteractiveTask.LIBRARY.getButton(InteractiveTask.CONST.POSITIONING_FAIL),//new Image(),
		questionImg = InteractiveTask.LIBRARY.getButton(InteractiveTask.CONST.POSITIONING_QUESTION),//new Image(),
		trueImg = InteractiveTask.LIBRARY.getImage(this.xml.FILENAME6["#text"]),//new Image(),
		controller = this, idMas = [], id=0, idd=0,
		x1 = parseInt(this.xml.X1), x2 = parseInt(this.xml.X2), y1 = parseInt(this.xml.Y1), y2 = parseInt(this.xml.Y2),
		numline = parseInt(this.xml.NUMLINE), numcolumn = parseInt(this.xml.NUMCOLUMN), layer = this.layer,
		width = parseInt(this.xml.WIDTH), height = parseInt(this.xml.HEIGHT), tryCol = parseInt(this.xml.TRY),
		net1 = [], net2 = [], stepX = width/numcolumn, stepY = height/numline, count = 0,
		isComplatePositioning = false;

// –°–Њ–Ј–і–∞—С–Љ –і–≤–∞ –Љ–∞—Б—Б–Є–≤–∞ –Ї–ї–µ—В–Њ–Ї //////////////////////////////////////////////////////////////////////////////////////////
	for(i=0;i<numline;i++){
		net1[i] = [];
		net2[i] = [];
		idMas[i] = [];
		for(j=0;j<numcolumn;j++){
			net1[i][j] = new Konva.Rect({
				x : x1 + i*stepX,
				y : y1 + j*stepY,
				width : stepX,
				height : stepY,
				stroke : "black",
			});
			net2[i][j] = new Konva.Rect({
				x : x2 + i*stepX,
				y : y2 + j*stepY,
				width : stepX,
				height : stepY,
				stroke : "black",
			});
			layer.add(net1[i][j]);
			layer.add(net2[i][j]);
			idMas[i][j] = id++;
			net2[i][j].toggle = 0;
		};
	};

// –°–≤–Њ–є—Б—В–≤–∞ –Ї–∞—А—В–Є–љ–Њ–Ї ///////////////////////////////////////////////////////////////////////////////////////////////////
	img1 = new Konva.Image({
		image: image1,
		x: x1,
		y: y1,
		width: width,
		height: height
	});
	img2 = new Konva.Image({
		image: image2,
		x: x2,
		y: y2,
		width: width,
		height: height
	});
	imgAltQuestion = new Konva.Image({
		image: altQuestionImg,
		x: net2[0][0].getX(),
		y: net2[0][0].getY(),
		width: stepX,
		height: stepY
	});
	imgFail = new Konva.Image({
		image: failImg,
		x: x1,
		y: x2,
		offset:{
			x:23,
			y:23
		},
		width: 46,
		height: 46
	});
	imgQuestion = new Konva.Image({
		image: questionImg,
		x: net2[0][0].getX(),
		y: net2[0][0].getY(),
		width: stepX,
		height: stepY
	});
	imgTrue = new Konva.Image({
		image: trueImg,
		x: x1,
		y: y1,
		width: stepX,
		height: stepY
	});

// –Я—А–Њ–≤–µ—А–Ї–∞: –Є–Ј–Њ–±—А–∞–ґ–µ–љ–Є–µ –Є–ї–Є –њ—Г—Б—В–Њ /////////////////////////////////////////////////////////////////////////////////////
	if (this.xml.FILENAME1["-exists"]=="true"){
		this.layer.add(img1);
		img1.moveToBottom();
	} else {
		for(i=0;i<numline;i++){
			for(j=0;j<numcolumn;j++){
				net1[i][j].fill("blue");
			};
		};
	};
	if (this.xml.FILENAME2["-exists"]=="true"){
		this.layer.add(img2);
		img2.moveToBottom();
	} else {
		for(i=0;i<numline;i++){
			for(j=0;j<numcolumn;j++){
				net2[i][j].fill("green");
			};
		};
	};


// –Я—А–Њ–≤–µ—А–Ї–∞ –љ–∞ —Б–ї—Г—З–∞–є–љ—Г—О –њ–Њ–Ј–Є—Ж–Є—О –≤–Њ–њ—А–Њ—Б–∞/–Є–Ј–Њ–±—А–∞–ґ–µ–љ–Є—П ///////////////////////////////////////////////////////////////////
	if(this.xml.RANDOM == "true"){
		randI = Math.floor( Math.random() * net2.length );
		randJ = Math.floor( Math.random() * net2.length );
		net2[randI][randJ].toggle=1;
		imgQuestion.setX(net2[randI][randJ].getX());
		imgQuestion.setY(net2[randI][randJ].getY());
		imgAltQuestion.setX(net2[randI][randJ].getX());
		imgAltQuestion.setY(net2[randI][randJ].getY());
	};

// –Я—А–Њ–≤–µ—А–Ї–∞: –≤–Њ–њ—А–Њ—Б –Є–ї–Є –Є–Ј–Њ–±—А–∞–ґ–µ–љ–Є–µ ////////////////////////////////////////////////////////////////////////////////////
	if(this.xml.QUESTION == "false"){
		this.layer.add(imgAltQuestion);
	}   else {
		this.layer.add(imgQuestion);
	};

	var self = this.controller;
// –Ю–±—А–∞–±–Њ—В–Ї–∞ –Ї–ї–Є–Ї–∞ –Љ—Л—И–Є /////////////////////////////////////////////////////////////////////////////////////////////////
	for (i=0;i<numline;i++){
		for (j=0;j<numcolumn;j++){

			net1[i][j].on('click', function(e){
				mX = e.evt.layerX;
				mY = e.evt.layerY;
				if (mX>net1[randI][randJ].getX() && mX<net1[randI][randJ].getX()+stepX &&
					mY>net1[randI][randJ].getY() && mY<net1[randI][randJ].getY()+stepY){
					if (controller.xml.FILENAME6["-exists"]=="true"){
						tempImg = imgTrue.clone();
						tempImg.setX(net1[randI][randJ].getX());
						tempImg.setY(net1[randI][randJ].getY());
						layer.add(tempImg);
						count++;
						if (count==numcolumn*numline){
							layer.batchDraw();
							imgQuestion.remove();
							//alert("Finish")
							isComplatePositioning = true;
							self.checkTask();
							return;
						};
					} else {
						net1[randI][randJ].fill("yellow");
						count++;
						if (count==numcolumn*numline){
							layer.batchDraw();
							imgQuestion.remove();
							//alert("Finish")
							isComplatePositioning = true;
							self.checkTask();
							return;
						};
					};
					getRandom = function(){
						randI = Math.floor( Math.random() * net2.length );
						randJ = Math.floor( Math.random() * net2.length );
						if (net2[randI][randJ].toggle == 0){
							imgQuestion.setX(net2[randI][randJ].getX());
							imgQuestion.setY(net2[randI][randJ].getY());
							net2[randI][randJ]=1;
						} else {
							getRandom();
						};
					};
					getRandom();
				} else {
					tryCol--;
					tempImg = imgFail.clone();
					tempImg.setX(mX);
					tempImg.setY(mY);
					layer.add(tempImg);
					if(tryCol==0){
						location.reload();
					};
				};
				layer.batchDraw();
			});
			net2[i][j].on('click', function(e){
				mX = e.evt.layerX;
				mY = e.evt.layerY;
				tryCol--;
				tempImg = imgFail.clone();
				tempImg.setX(mX);
				tempImg.setY(mY);
				layer.add(tempImg);
				if(tryCol==0){
					location.reload();
				};
				layer.batchDraw();
			});
		};
	};
	layer.batchDraw();

	this.getResult = function(){
		return  isComplatePositioning;
	};
};
/**
 * –?—Б–њ—А–∞–≤–Є—В—М —А–∞–±–Њ—В—Г —Б–Њ —Б–ї–Њ—П–Љ–Є
 * @param options
 * @constructor
 */
InteractiveTask.PuzzleController = function(options){
	this.xml = options.xml;
	this.controller = options.controller;

	this.init();
};
InteractiveTask.PuzzleController.prototype.clear = function(){
	InteractiveTask.disposeObject(this);
};
InteractiveTask.PuzzleController.prototype.init = function(){
	var imageObj = InteractiveTask.LIBRARY.getImage(this.xml.SETTINGS.PAZZLE.FILENAME),
		pwidth = this.controller.player.width,
		pheight = this.controller.player.height,
		numLine = parseInt(this.xml.SETTINGS.PAZZLE.NUMLINE),
		numCol = parseInt(this.xml.SETTINGS.PAZZLE.NUMCOLUMN),
		width = parseInt(this.xml.SETTINGS.PAZZLE.WIDTH),
		height = parseInt(this.xml.SETTINGS.PAZZLE.HEIGHT),
		x = parseInt(this.xml.X), y = parseInt(this.xml.Y),
		stepX = parseFloat((width/numCol).toFixed(2)), stepY = parseFloat((height/numLine).toFixed(2)),
		r  = 0.7*(1/2*Math.min(stepX, stepY)), jump = (this.xml.SETTINGS.PAZZLE.JUMP/100)*(1/2*Math.min(stepX, stepY)),
		size = numLine*numCol, m, dest, d = Math.sqrt((stepX*stepX)+(stepY*stepY)),
		sample, thiscontroller = this,
		state = false, refRotation=null,
		count = 0, boolean = false, id_net=0, id_pic=0,
		degree, c=1,
		mcX, mcY, mcXc, mcYc,
		rotateAngle, mouseStartXFromCenter, mouseStartYFromCenter, mouseStartAngle,
		mouseXFromCenter, mouseYFromCenter, mouseAngle,
		pic = [], net = [],
		variant = [22.5, -22.5, 45, -45, 67.5, -67.5, 90, -90, 112.5, -112.5, 135,
			-135, 157.5, -157.5, 180, -180, 0];
	this.layer = new Array();
	this.bgLayer = new Array();

// –Я—Г—В—М –і–Њ –Љ–µ—Б—В–Њ—А–∞—Б–њ–Њ–ї–Њ–ґ–µ–љ–Є—П –Ї–∞—А—В–Є–љ–Ї–Є + –љ–∞–Ј–≤–∞–љ–Є–µ —Б–∞–Љ–Њ–є –Ї–∞—А—В–Є–љ–Ї–Є ////////////////////////////////////////////////////////
	//imageObj.src = this.path + '/' + this.xml.SETTINGS.PAZZLE.FILENAME;



	helpImg = new Konva.Image({
		image: imageObj,
		x: x,
		y: y,
		width: width,
		height: height,
		opacity: 0.5,
		crop:{
			x: 0,
			y: 0,
			width: stepX*numCol,
			height: stepY*numLine
		},
	});

// –°–Њ–Ј–і–∞—С–Љ –Љ–∞—Б—Б–Є–≤ –Ї–ї–µ—В–Њ–Ї –Є –њ–∞–Ј–ї–Њ–≤ //////////////////////////////////////////////////////////////////////////////////////
	for (i=0;i<numCol;i++){
		net[i] = [];
		pic[i] = [];
		for(j=0;j<numLine;j++){
			net[i][j] = new Konva.Rect({
				x: x+i*stepX,
				y: y+j*stepY,
				width: stepX,
				height: stepY,
				stroke: 'black',
			});
			pic[i][j] = new Konva.Image({
				image: imageObj,
				x: stepX+Math.random()*((pwidth-2*stepX)+1),
				y: stepY+Math.random()*((pheight-2*stepY)+1),
				width: stepX,
				height: stepY,
				offset:{
					x:stepX/2,
					y:stepY/2
				},
				crop:{
					x: i*stepX,
					y: j*stepY,
					width: stepX,
					height: stepY
				},
				draggable: false,
				rotation : variant[Math.floor( Math.random() * variant.length )]
			});
// –Ф–Њ–±–∞–≤–ї—П–µ–Љ —Н–ї–µ–Љ–µ–љ—В—Л –љ–∞ —Б–ї–Њ–є —Б —Г—З–µ—В–Њ–Љ —В–µ–≥–Њ–≤ xml ///////////////////////////////////////////////////////////////////////
			net[i][j].id=id_net++;
			net[i][j].done=false;
			this.bgLayer.push(net[i][j]);
			//net[i][j].moveToBottom();

			switch(this.xml.SETTINGS.PAZZLE.POSITIONER) {
				case "RANDOM":
					pic[i][j].x(d/3+Math.random()*((pwidth-d)+1));
					pic[i][j].y(d/3+Math.random()*((pheight-d)+1));
					break;
				case "ONE COLUMN":
					pic[i][j].x(pwidth/2);
					pic[i][j].y(pheight/2);
					break;
				case "AROUND FIELD":
					/*if (x>d/3 && (pwidth-(width+x))>d/3 && y>d/3 && (pheight-(height+y))>d/3){
					 dest=parseInt(Math.random()*2);
					 } else {
					 if (x>d/3 && (pwidth-(width+x))<d/3 && y>d/3 && (pheight-(height+y))<d/3){
					 //pic[i][j].x(d/3+Math.random()*((x-d)+1));
					 //pic[i][j].y(d/3+Math.random()*((y-d)+1));
					 if(dest==1){
					 pic[i][j].x((width+x)+d/3+Math.random()*((pwidth-d/3)-((width+y)+d/3)+1));
					 }
					 } else {
					 if (x<d/3 && (pwidth-(width+x))>d/3 && y<d/3 && (pheight-(height+y))>d/3){
					 if(dest==1){
					 pic[i][j].x(d/3+Math.random()*((pwidth-d)+1));
					 pic[i][j].y((height+y)+d/3+Math.random()*((pheight-d/3)-((height+y)+d/3)+1));
					 } else {
					 pic[i][j].x((width+x)+d/3+Math.random()*((pwidth-d/3)-((width+y)+d/3)+1));
					 pic[i][j].y(d/3+Math.random()*((pheight-d)+1));
					 }
					 } else {
					 pic[i][j].x(d/3+Math.random()*((pwidth-d)+1));
					 pic[i][j].y(d/3+Math.random()*((pheight-d)+1));
					 }
					 }
					 }*/
					break;
				case "AUTHOR POSITION":
					for(q=0;q<this.xml.SETTINGS.PAZZLE.POSITION.SAMPLE.length;q++){
						if(this.xml.SETTINGS.PAZZLE.POSITION.SAMPLE[q]["-I"]==i &&
							this.xml.SETTINGS.PAZZLE.POSITION.SAMPLE[q]["-J"]==j){
							pic[i][j].setX(parseFloat(this.xml.SETTINGS.PAZZLE.POSITION.SAMPLE[q].X));
							pic[i][j].setY(parseFloat(this.xml.SETTINGS.PAZZLE.POSITION.SAMPLE[q].Y));
							break;
						};
					};
			};
			switch(this.xml.SETTINGS.PAZZLE.HELPER){
				case "SAMPLE BACKGRAUND":
					this.layer.push(helpImg);
					helpImg.moveToBottom();
				//layer.batchDraw();
			};
			pic[i][j].id=id_pic++;
			pic[i][j].done=false;
			this.layer.push(pic[i][j]);
			//pic[i][j].moveToTop();
			//layer.batchDraw();
		};
	};

// –Ю–±—А–∞–±–Њ—В–Ї–∞ –≤–Ј–∞–Є–Љ–Њ–і–µ–є—Б—В–≤–Є–є —Б –њ–∞–Ј–ї–Њ–Љ (–≤—А–∞—Й–µ–љ–Є–µ, –њ–µ—А–µ–Љ–µ—Й–µ–љ–Є–µ) ////////////////////////////////////////////////////////////
	var self = this.controller;
	for(n=0;n<numCol;n++){
		for(m=0;m<numLine;m++){
			pic[n][m].on('mousedown touchstart', function(e){
				if(this.done){
					--count;
					this.done = false;
				};
				var imgTarg = this;
				InteractiveTask.setDragRotate(imgTarg, {
					isRotate : true,
					isDrag : true,
					layer : null,
					callback : function(){
						state=false;
						//imgTarg.moveToTop();
						var degree = Math.round(imgTarg.rotation()/22.5) * 22.5;
						if(degree == 360) degree = 0;
						imgTarg.rotation(degree);
						self.checkTask();
					},
					rotate : function(degree){
						degree = imgTarg.rotation()+degree;
						if(degree == 360 || degree == -360) degree = 0;
						if(degree<0){
							degree = 360+degree;
						};
						if(degree>360){
							degree = degree - 360;
						};

						imgTarg.rotation(degree);
					}
				});
			});
			/*pic[n][m].on('mousedown touchstart', function(e){
			 this.moveToTop();
			 target=this;
			 var touchPos = InteractiveTask.STAGE.getPointerPosition();
			 mcXc = touchPos.x;
			 mcYc = touchPos.y;
			 mouseStartXFromCenter =   mcXc - this.getX();
			 mouseStartYFromCenter =  mcYc - this.getY();
			 mouseStartAngle = Math.atan2(mouseStartYFromCenter, mouseStartXFromCenter);
			 if(mcXc>=parseInt(this.getX()-r) && mcXc<=parseInt(this.getX()+r) &&
			 mcYc>=parseInt(this.getY()-r) && mcYc<=parseInt(this.getY()+r)){
			 this.draggable(true);
			 } else {
			 state = true;
			 //layer.on('mousemove touchmove', function(e) {
			 InteractiveTask.STAGE.on("mousemove touchmove", function(e){
			 var touchPos = InteractiveTask.STAGE.getPointerPosition();
			 mcX = touchPos.x;
			 mcY = touchPos.y;
			 mouseXFromCenter =  mcX - target.getX();
			 mouseYFromCenter = mcY - target.getY();
			 mouseAngle = Math.atan2(mouseYFromCenter, mouseXFromCenter);
			 rotateAngle = mouseAngle - mouseStartAngle;
			 mouseStartAngle = mouseAngle;
			 degree = rotateAngle*(180/Math.PI);

			 degree = target.rotation()+degree;
			 if(degree == 360 || degree == -360) degree = 0;
			 if(degree<0){
			 degree = 360+degree;
			 };
			 if(degree>360){
			 degree = degree - 360;
			 };
			 //alert("color rotation = " + rot + "; black rotation = " + this.blackTan.rotation());
			 //InteractiveTask.log("color rotation = ",rot,"; black rotation = ",this.blackTan.rotation())
			 // this.colorTan.rotation(rot);


			 target.rotation(degree);
			 //layer.batchDraw();
			 });

			 InteractiveTask.STAGE.on("mouseup touchend" , function(e){
			 InteractiveTask.STAGE.off("mouseup touchend");
			 InteractiveTask.STAGE.off("mousemove touchmove");
			 self.checkTask();

			 var r = Math.round(target.rotation()/22.5) * 22.5;
			 if(r == 360) r = 0;

			 target.rotation(r);
			 //layer.batchDraw();
			 });
			 };
			 });
			 pic[n][m].on('mouseup', function(e){
			 this.draggable(false);
			 state=false;
			 self.checkTask();

			 var r = Math.round(target.rotation()/22.5) * 22.5;
			 if(r == 360) r = 0;

			 target.rotation(r);
			 //layer.batchDraw();
			 });

			 pic[n][m].on('touchend', function(e){
			 this.draggable(false);
			 state=false;
			 self.checkTask();

			 var r = Math.round(target.rotation()/22.5) * 22.5;
			 if(r == 360) r = 0;

			 target.rotation(r);
			 //layer.batchDraw();
			 }); */

// –Ю–±—А–∞–±–Њ—В–Ї–∞ –њ–Њ–њ–∞–і–∞–љ–Є—П –њ–∞–Ј–ї–∞ –≤ –Ї–ї–µ—В–Ї—Г –Є –њ—А–Њ–≤–µ—А–Ї–∞ –љ–∞ –њ—А–∞–≤–Є–ї—М–љ–Њ—Б—В—М ///////////////////////////////////////////////////////
			pic[n][m].on('dragend', function(e){
				var bLeft = [],
					bRight = [],
					bTop = [],
					bBottom = [];
				for(i=0;i<numCol;i++){
					bLeft[i] = [];
					bRight[i] = [];
					bTop[i] = [];
					bBottom[i] = [];
					for(j=0;j<numLine;j++){
						bLeft[i][j] = net[i][j].getX();
						bTop[i][j] = net[i][j].getY();
						bRight[i][j] = parseFloat((parseFloat(bLeft[i][j]) + stepX*1).toFixed(2));
						bBottom[i][j] = parseFloat((parseFloat(bTop[i][j]) + stepY*1).toFixed(2));
						tmp1=((bRight[i][j]+bLeft[i][j])/2)+jump;
						tmp2=((bRight[i][j]+bLeft[i][j])/2)-jump;
						tmp3=((bBottom[i][j]+bTop[i][j])/2)+jump;
						tmp4=((bBottom[i][j]+bTop[i][j])/2)-jump;
						if(this.getX() <= tmp1 && this.getX()>=tmp2 &&
							this.getY() <= tmp3 && this.getY()>=tmp4) {
							this.setX(bLeft[i][j]+stepX/2);
							this.setY(bTop[i][j]+stepY/2);
							//layer.batchDraw();
// –Я—А–Њ–≤–µ—А–Ї–∞ ////////////////////////////////////////////////////////////////////////////////////////////////////////////
							if(this.id == net[i][j].id && this.done!=true && this.rotation()==0){
								this.done = true;
								count++;
								if (count==numLine*numCol){
									//   alert("win")
									boolean=true;
// CALLBACK ////////////////////////////////////////////////////////////////////////////////////////////////////////////
									self.checkTask();
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
								};
							};

							if(this.id != net[i][j].id && this.done==true){
								this.done = false;
								count--;
							};
							return;
						};
					};
				};
			});
		};
	};
// –§—Г–љ–Ї—Ж–Є–Є –њ–Њ–ї—Г—З–µ–љ–Є—П –њ–Њ–і—Б–Ї–∞–Ј–Ї–Є –Є –њ—А–Њ–≤–µ—А–Ї–Є —А–µ–Ј—Г–ї—М—В–∞—В–∞ ///////////////////////////////////////////////////////////////////
	this.showHelp = function(){
		this.layer.push(helpImg);
		helpImg.moveToBottom();
		//layer.batchDraw();
	};

	this.getResult = function() {
		return boolean;
	};

	this.colorAddToLayer = function(layer){
		while(this.bgLayer.length>0){
			layer.add(this.bgLayer[0]);
			this.bgLayer[0].remZIndex = this.bgLayer[0].getZIndex();
			this.bgLayer[0] = null;
			this.bgLayer.shift();
		};
		while(this.layer.length>0){
			layer.add(this.layer[0]);
			this.layer[0] = null;
			this.layer.shift();
		};
	};
};

/**
 * Created with IntelliJ IDEA.
 * User: Yurchik
 * Date: 10.03.15
 * Time: 13:12
 * To change this template use File | Settings | File Templates.
 */

InteractiveTask.ShiftFieldController = function(options){
	this.controller = options.controller;

	this.diap = options.diap;
	//this.basePath = options.basePath;

	this.shiftFieldArray = new Array();

};

InteractiveTask.ShiftFieldController.prototype.add = function(xml){
	this.shiftFieldArray.push(new InteractiveTask.SampleShiftField({
		xml : xml,
		controller : this,
		diap : this.diap,
		//basePath : this.basePath
	}));

};
InteractiveTask.ShiftFieldController.prototype.initCache = function(){
	var i,l;
	l =  this.shiftFieldArray.length;
	for(i=0;i<l;i++){
		this.shiftFieldArray[i].initCache();
	};
};
InteractiveTask.ShiftFieldController.prototype.checkComplate = function(){
	this.controller.checkTask();
};
InteractiveTask.ShiftFieldController.prototype.isComplate = function(){
	var i,l;
	l = this.shiftFieldArray.length;
	for(i=0;i<l;i++){
		if(!this.shiftFieldArray[i].isComplate()) return false;
	};
	return true;
};
InteractiveTask.ShiftFieldController.prototype.minusHealth = function(){
	this.controller.minusHealth();
};
InteractiveTask.ShiftFieldController.prototype.clear = function(){
	while(this.shiftFieldArray.length>0){
		InteractiveTask.disposeObject(this.shiftFieldArray[0]);
		this.shiftFieldArray[0] = null;
		this.shiftFieldArray.shift();
	};
};

InteractiveTask.ShiftFieldController.prototype.addToLayer = function(layer){
	var i,l;
	l = this.shiftFieldArray.length;
	for(i=0;i<l;i++){
		layer.add(this.shiftFieldArray[i].field);
	};
};

/********************************************************************************************************************************/

InteractiveTask.SampleShiftField = function(options){
	this.controller = options.controller;
	this.xml = options.xml;
	this.diap = options.diap;
	// this.basePath = options.basePath;

	var fields = InteractiveTask.getArrayObjectsByTag(this.xml,"FIELD");
	var i;
	this.fieldsArray = new Array();
	this.numComplate = 0;
	for(i=0;i<fields.length;i++){
		this.fieldsArray.push(new InteractiveTask.UnitField(fields[i], this));
	};
	this.createComplate();
};
InteractiveTask.SampleShiftField.prototype.setReport = function(isComplate){
	if(this.xml.LESSONLINK != undefined){
		this.xml.LESSONLINK["-isComplate"] = isComplate;
	};
};
InteractiveTask.SampleShiftField.prototype.createComplate = function(){
	/*++ this.numComplate;
	 if(this.fieldsArray.length != this.numComplate) return;  */
	//InteractiveTask.log("CELL is created") ;
	var i;
	this.field = new Konva.Group();

	var background = new Konva.Rect({
		width : this.xml["-width"],
		height :  this.xml["-height"],
		fill : "rgba(0, 0, 0, 0.1)",
		stroke : "rgba(0, 0, 0, 0)",
		x : 0,
		y : 0
	});
	this.field.add(background);

	this.coordinates = new Array();
	for(i=0;i<this.fieldsArray.length;i++){
		this.coordinates.push({
			x : this.fieldsArray[i].j * this.fieldsArray[i].width + (this.fieldsArray[i].j+1)*3,
			y : this.fieldsArray[i].i * this.fieldsArray[i].height + (this.fieldsArray[i].i+1)*3
		});
		this.fieldsArray[i].group.x(this.coordinates[i].x);
		this.fieldsArray[i].group.y(this.coordinates[i].y);

		this.fieldsArray[i].group.oldX = this.coordinates[i].x;
		this.fieldsArray[i].group.oldY = this.coordinates[i].y;
		// var fieldLayer =this.field
		this.fieldsArray[i].group.back = function(){
			this.x(this.oldX);
			this.y(this.oldY);
			InteractiveTask.COMPONENTS_LAYER.batchDraw();
			// try{this.getLayer().draw();}catch(e){};
		};
		this.field.add(this.fieldsArray[i].group);
		this.fieldsArray[i].group.draggable(true);
		this.fieldsArray[i].group.controller = this;
		this.fieldsArray[i].group.myIndex = i;
		var boundRectangle = this.fieldsArray[i].group.getClientRect();
		var width = boundRectangle.width;
		var height = boundRectangle.height;
		this.fieldsArray[i].group.dragBoundFunc(function(pos){
			var X=pos.x;
			var Y=pos.y;
			var scaleX =InteractiveTask.STAGE.scaleX();
			var scaleY =InteractiveTask.STAGE.scaleY();

			if(X<0){X=0;};
			if(X>InteractiveTask.STAGE.width()-width*scaleX){X=InteractiveTask.STAGE.width()-width*scaleX;};
			if(Y<0){Y=0;};
			if(Y>InteractiveTask.STAGE.height()-height*scaleY){Y=InteractiveTask.STAGE.height()-height*scaleY;};
			return({x:X, y:Y});
		});
		this.fieldsArray[i].group.cache();
		this.fieldsArray[i].group.on("mousedown touchstart", function(){
			this.moveToTop();
		});
		this.fieldsArray[i].group.on("mouseup touchend", function(){
			var index = this.controller.getClosestPosition(this);

			if(Math.abs(this.controller.coordinates[index].x - this.x())<this.controller.diap && Math.abs(this.controller.coordinates[index].y - this.y())<this.controller.diap){
				var remX, remY;
				remX = this.oldX;
				remY = this.oldY;

				var obj = this.controller.getObjectByXY(this.controller.coordinates[index].x, this.controller.coordinates[index].y);

				this.oldX = this.controller.coordinates[index].x;
				this.oldY = this.controller.coordinates[index].y;

				this.back();


				obj.group.oldX = remX;
				obj.group.oldY = remY;
				obj.group.back();
			}else{
				this.back();
			};
			if(this.myIndex != index){
				this.controller.minusHealth();
			};
			this.controller.checkComplate();

		});

	};
	var indexes = InteractiveTask.getRandomIndexesTo(this.fieldsArray.length);
	for(i=0;i<indexes.length; i++){
		this.fieldsArray[i].group.oldX = this.coordinates[indexes[i]].x;
		this.fieldsArray[i].group.oldY = this.coordinates[indexes[i]].y;
		this.fieldsArray[i].group.back();
	};


	this.field.x(parseFloat(this.xml["-x"]));
	this.field.y(parseFloat(this.xml["-y"]));
};
InteractiveTask.SampleShiftField.prototype.getObjectByXY = function(x, y){
	var i,l;
	l = this.fieldsArray.length;
	for(i=0;i<l;i++){
		if( Math.abs(this.fieldsArray[i].group.oldX - x) <=1 && Math.abs(this.fieldsArray[i].group.oldY - y) <=1 ){
			return this.fieldsArray[i];
		};
	};
	return null;
};
InteractiveTask.SampleShiftField.prototype.getObjectByIJ = function(i, j){
	var i,l;
	l = this.fieldsArray.length;
	for(i=0;i<l;i++){
		if(this.fieldsArray[i].i == i && this.fieldsArray[i].j  == j){
			return this.fieldsArray[i];
		};
	};
	return null;
};

InteractiveTask.SampleShiftField.prototype.getClosestPosition = function(object){
	var X = object.x();
	var Y = object.y();
	var i,l;
	var deltaX, deltaY;
	var minR;
	var minI;

	deltaX = X - this.coordinates[0].x;
	deltaY = Y - this.coordinates[0].y;

	minR = Math.sqrt(deltaX*deltaX + deltaY*deltaY);
	minI = 0;

	l = this.coordinates.length;
	for(i=0;i<l;i++){
		deltaX = X - this.coordinates[i].x;
		deltaY = Y - this.coordinates[i].y;
		if(Math.sqrt(deltaX*deltaX + deltaY*deltaY)<minR){
			minR = Math.sqrt(deltaX*deltaX + deltaY*deltaY);
			minI = i;
		};
	};
	return minI;
};
InteractiveTask.SampleShiftField.prototype.checkComplate = function(){
	this.controller.checkComplate();
};
InteractiveTask.SampleShiftField.prototype.isComplate = function(){
	var i,l;
	l = this.fieldsArray.length;
	for(i=0;i<l;i++){
		if(!this.fieldsArray[i].isFree && (this.coordinates[i].x != this.fieldsArray[i].group.x() || this.coordinates[i].y != this.fieldsArray[i].group.y())) {
			this.setReport(false);
			return false;
		};
	};
	this.setReport(true);
	return true;
};


InteractiveTask.SampleShiftField.prototype.initCache = function(){
	var i,l;
	l = this.fieldsArray.length;
	for(i=0;i<l;i++){
		try{this.fieldsArray[i].initCache();}catch (e){InteractiveTask.log(e);};
	};
};
InteractiveTask.SampleShiftField.prototype.minusHealth = function(){
	this.controller.minusHealth();
};

/********************************************************************************************************************************/
InteractiveTask.UnitField = function(xml, controller){
	this.xml = xml;
	this.controller = controller;

	this.i = parseInt(this.xml["-i"]);
	this.j = parseInt(this.xml["-j"]);
	this.width = parseInt(this.xml["-width"]);
	this.height = parseInt(this.xml["-height"]);
	this.group = new Konva.Group();
	var flag = false;
	this.isFree = true;
	//InteractiveTask.log(basePath);
	if(this.xml.USERTAN!=undefined){
		this.content = new InteractiveTask.SampleUserTan(this.xml.USERTAN);
		this.content.init({
			controller : this
		});
		flag = true;
		this.isFree = false;
		this.complateLoadingTask();
	};
	if(this.xml.LABEL != undefined){
		this.content = new InteractiveTask.SampleTextField({
			layer : null,
			blackLayer : null,
			controller : this,
			diap : 0,
			xml : this.xml.LABEL
		});
		flag = true;
		this.isFree = false;
		this.complateLoadingTask();

	};
	if(this.xml.PICTURETAN!=undefined){
		this.content = new InteractiveTask.SamplePictureTan(this.xml.PICTURETAN);
		this.content.init({
			controller : this
		});
		flag = true;
		this.isFree = false;
		this.complateLoadingTask();

	};

	if(flag){
		//InteractiveTask.log("Field is full");
	}else{
		this.createCell();
		this.createFrame();
		//this.controller.createComplate();
	};
};

InteractiveTask.UnitField.prototype.complateLoadingTask = function(){
	//InteractiveTask.log("Complate creation FIELD");
	this.content.getObject().off("mousedown touchstart");
	this.content.getObject().off("mouseout mouseup touchend");
	//this.content.getObject().draggable(false);
	//InteractiveTask.log(this.content.getObject());
	this.createCell();
	this.group.add(this.content.getObject());
	this.createFrame();
	//this.controller.createComplate();
	/* try{
	 this.initCache();
	 } catch(e){}*/
};
InteractiveTask.UnitField.prototype.createCell = function(){
	//InteractiveTask.log("UnitField create cell");
	var background = new Konva.Rect({
		width : this.width,
		height :  this.height,
		fill : "rgba(0, 0, 0, 0)",
		stroke : "rgba(0, 0, 0, 0)",
		x : 0,
		y : 0
	});
	this.group.add(background);
};

InteractiveTask.UnitField.prototype.createFrame = function(){
	//InteractiveTask.log("UnitField create frame");
	this.frame = new Konva.Rect({
		width : this.width,
		height :  this.height,
		fill : "rgba(0, 0, 0, 0)",
		stroke : "rgba(0, 0, 0, 0)",
		x : 0,
		y : 0
	});
	this.group.add(this.frame);
};
InteractiveTask.UnitField.prototype.select = function(){
	this.frame.strokeWidth(5);
	this.frame.stroke("rgba(0, 0, 255, 0.4)");
	this.frame.draw();
	InteractiveTask.STAGE.draw();
};


InteractiveTask.UnitField.prototype.initCache = function(){
	this.group.cache({
		x:0,
		y:0,
		width : this.xml["-width"],
		height : this.xml["-height"]
	});
};/**
 * Created with IntelliJ IDEA.
 * User: Yurchik
 * Date: 25.02.15
 * Time: 7:45
 * To change this template use File | Settings | File Templates.
 */
/*************************************************************************************/
/****************************** TABLE ************************************************/
/*************************************************************************************/
InteractiveTask.TableController = function(options){

	this.task = options.task;
	//this.diap = options.diap;
	//this.isUniq = options.uniq;
	//alert(this.task);
	this.tableArray = new Array();
};

InteractiveTask.TableController.prototype.add = function(options){
	var id = this.tableArray.length;
	options.controller = this;

	this.tableArray[id] = new InteractiveTask.SampleTable(options);
	this.tableArray[id].init();
};
InteractiveTask.TableController.prototype.area = function(){
	var outArray = new Array();
	var i,l;
	l = this.tableArray.length;
	for(i=0;i<l;i++){
		if(this.tableArray[i].area()){
			outArray = this.addArray(outArray, this.tableArray[i].arrArea());
		};
	};
	if(outArray.length == 0) return null;
	return outArray;
};
InteractiveTask.TableController.prototype.addArray = function(arr1, arr2){
	var i,l;
	l = arr2.length;
	for(i=0;i<l;i++){
		arr1.push(arr2[i]);
	};
	return arr1;
};
InteractiveTask.TableController.prototype.isArea = function(){
	var i,l;
	l = this.tableArray.length;
	for(i=0;i<l;i++){
		if(this.tableArray[i].area())return true;
	};
	return false;
};

InteractiveTask.TableController.prototype.clear = function(){
	while(this.tableArray.length>0){
		InteractiveTask.disposeObject(this.tableArray[0]);
		this.tableArray[0] = null;
		this.tableArray.shift();
	};
};
InteractiveTask.TableController.prototype.addToLayer = function(layer){
	var i,l;
	l = this.tableArray.length;
	for(i=0;i<l;i++){
		layer.add(this.tableArray[i].table);
	};
};

/***************************************************************************************************************************/

InteractiveTask.SampleTable = function(options){
	this.controller = options.controller;
	this.xml = options.xml;

	this.arrRasst = new Array();
	this.entarArea = false;

};

InteractiveTask.SampleTable.prototype.init = function(){
	this.wTable = parseFloat(this.xml.WIDTH);
	this.hTable = parseFloat(this.xml.HEIGHT);
	this.xTable = parseFloat(this.xml.X);
	this.yTable = parseFloat(this.xml.Y);
	this.tTable = parseInt(this.xml.THICK);
	this.tColor = InteractiveTask.formatColor(this.xml.COLOR, 1);

	this.numLine = parseInt(this.xml.LINE);
	if(this.numLine<1) this.numLine = 1;
	this.numColumn = parseInt(this.xml.COLUMN);
	if(this.numColumn<1) this.numColumn = 1;

	this.entarArea = (this.xml.ENTERAREA == "true");

	var X, Y, W, H, numLine, numCol;
	X = this.xTable;
	Y = this.yTable;
	W = this.wTable;
	H = this.hTable;
	numLine = this.numLine;
	numCol = this.numColumn;
	this.table = new Konva.Shape({
		fillEnabled : false,
		strokeWidth : this.tTable,
		stroke : this.tColor,
		x : 0,
		y : 0,
		sceneFunc : function(context){
			context.beginPath();
			var i,j;
			context.moveTo(X,Y);
			context.lineTo(X+W,Y);
			context.lineTo(X+W,Y+H);
			context.lineTo(X,Y+H);
			context.lineTo(X,Y);
			//numLine
			for(i=1;i<numLine;i++){
				context.moveTo(X,Y+((H/numLine)*i));
				context.lineTo(X+W,Y+((H/numLine)*i));
			};
			//numCol
			for(i=1;i<numCol;i++){
				context.moveTo(X+((W/numCol)*i),Y);
				context.lineTo(X+((W/numCol)*i),Y+H);
			};
			context.closePath();
			context.fillStrokeShape(this);
		}
	});
	var i,j;
	this.arrRasst = new Array();
	if(this.entarArea){
		InteractiveTask.log(this , ': TABLE IS ENTER AREA');
		entarArea = true;
		for(i=0;i<this.numColumn;i++){
			for(j=0;j<this.numLine;j++){
				this.arrRasst[this.arrRasst.length] = new Array();
				this.arrRasst[this.arrRasst.length-1][0] = X+i*W/this.numColumn;
				this.arrRasst[this.arrRasst.length-1][1] = Y+j*H/this.numLine;
				this.arrRasst[this.arrRasst.length-1][2] = X+(i+1)*W/this.numColumn;
				this.arrRasst[this.arrRasst.length-1][3] = Y+(j+1)*H/this.numLine;
			};
		};
	};
	InteractiveTask.log("Complate table create");
};

InteractiveTask.SampleTable.prototype.area = function(){
	return this.entarArea;
};
InteractiveTask.SampleTable.prototype.arrArea = function(){
	return this.arrRasst;
};/**
 * Created with IntelliJ IDEA.
 * User: Yurchik
 * Date: 05.03.15
 * Time: 12:36
 * To change this template use File | Settings | File Templates.
 */
InteractiveTask.TextFieldController = function(options){
	this.controller = options.controller;
	this.diap = options.diap;
	this.textFieldArray = new Array();


};
InteractiveTask.TextFieldController.prototype.add = function(xml){
	var id = this.textFieldArray.length;
	if(xml.TYPE["-name"]!="INPUT"){
		this.textFieldArray.push(new InteractiveTask.SampleTextField({
			diap : this.diap,
			controller : this,
			xml : xml
		}));
	}else{
		this.textFieldArray.push(new InteractiveTask.InputTextField({
			controller : this,
			xml : xml
		}));
	};
};
InteractiveTask.TextFieldController.prototype.area = function(area){
	var i,l;
	l = this.textFieldArray.length;
	for(i=0;i<l;i++){
		this.textFieldArray[i].area(area);
	};
};
InteractiveTask.TextFieldController.prototype.checkTask = function(){
	this.controller.checkTask();
};
InteractiveTask.TextFieldController.prototype.isComplate = function(){
	var i,l;
	l = this.textFieldArray.length;
	for(i=0;i<l;i++){
		if(!this.textFieldArray[i].isComplate()) return false;
	};
	return true;
};

InteractiveTask.TextFieldController.prototype.clear = function(){
	while(this.textFieldArray.length>0){
		InteractiveTask.disposeObject(this.textFieldArray[0]);
		this.textFieldArray[0] = null;
		this.textFieldArray.shift();
	};
};

InteractiveTask.TextFieldController.prototype.balckAddToLayer = function(layer){
	var i,l;
	l = this.textFieldArray.length;
	for(i=0;i<l;i++){
		if(this.textFieldArray[i].blackTan){
			layer.add(this.textFieldArray[i].blackTan);
		};
	};
};
InteractiveTask.TextFieldController.prototype.addToLayer = function(layer){
	var i,l;
	l = this.textFieldArray.length;
	for(i=0;i<l;i++){
		layer.add(this.textFieldArray[i].field);
	};
};
/*****************************************************************************************************************************/
InteractiveTask.SampleTextField = function(options){
	this.controller = options.controller;
	this.diap = options.diap;


	this.xml = options.xml;

	this.textField = new Konva.Text({
		x: 3,
		y: 3,
		fontFamily: this.xml.FONT,
		text: InteractiveTask.getCorrectText(this.xml.TEXT),
		fontSize: parseInt(this.xml.SIZE),
		align : this.xml.ALIGN,
		fontFamily: 'Calibri',
		fill: InteractiveTask.formatColorFlashToCanvas(this.xml.TEXTCOLOR)
	});
	var style = 'normal';
	if(this.xml.BOLD == 'true'){
		style = 'bold';
	};
	if(this.xml.ITALIC == 'true'){
		style = 'italic';
	};
	this.textField.fontStyle(style);

	this.field = new Konva.Group();

	if((this.xml.BORDER=="true")||(this.xml.BACKGROUND=="true")){
		var borderColor = InteractiveTask.formatColorFlashToCanvasRGBA(this.xml.BORDERCOLOR, 0);
		if(this.xml.BORDER=="true"){
			borderColor = InteractiveTask.formatColorFlashToCanvasRGBA(this.xml.BORDERCOLOR, 1);
		};
		var backGroundColor = InteractiveTask.formatColorFlashToCanvasRGBA(this.xml.BACKGROUNDCOLOR, 0);
		if(this.xml.BACKGROUND=="true"){
			backGroundColor = InteractiveTask.formatColorFlashToCanvasRGBA(this.xml.BACKGROUNDCOLOR, 1);
		};
		InteractiveTask.log("border color", borderColor);
		InteractiveTask.log("background color", backGroundColor);
		this.background = new Konva.Rect({
			width : parseFloat(this.xml.WIDTH),
			height : parseFloat(this.xml.HEIGHT),
			stroke : borderColor,
			fill : backGroundColor,
			strokeWidth : 1
		});
		this.field.add(this.background);
		if(this.xml.ALIGN == 'center'){
			this.textField.x((parseFloat(this.xml.WIDTH) - this.textField.width())/2);
			this.textField.y((parseFloat(this.xml.HEIGHT) - this.textField.height())/2);
		};
		if(this.xml.ALIGN == 'right'){
			this.textField.x(parseFloat(this.xml.WIDTH) - this.textField.width());
		};
	};
	this.field.x(parseFloat(this.xml.X));
	this.field.y(parseFloat(this.xml.Y));

	this.field.isFree = false;

	if(this.xml.TYPE["-name"]=="STATIC"){
		if(this.xml.TYPE.DRAGANDDROP["-tan"] == "true"){
			this.enterArea = false;
			this.blackTan = new Konva.Rect({
				width : parseFloat(this.xml.WIDTH),
				height : parseFloat(this.xml.HEIGHT),
				x :  parseFloat(this.xml.TYPE.DRAGANDDROP.X),
				y :  parseFloat(this.xml.TYPE.DRAGANDDROP.Y),
				stroke : 'black',
				fill : 'black',
				strokeWidth : 1
			});
			this.blackTan.opacity(parseFloat(this.xml.TYPE.DRAGANDDROP.ALPHA));
			this.field.isFree = true;
			this.field.draggable(true);
			this.field.blackTan = this.blackTan;
			this.field.controller = this;
			this.field.xml = this.xml;
			this.field.diap = this.diap;
			this.field.on("mousedown touchstart", function(){
				if(this.xml.TYPE.DRAGANDDROP.ISDINAMYC == "true"){
					this.isFree = false;
				}else{
					this.isFree = true;
				};

			});
			this.field.on("mouseup touchend", function(){
				if(this.xml.TYPE.DRAGANDDROP.ISDINAMYC == "true"){
					this.isFree = false;
					return;
				};
				if(this.controller.isEnterArea()){
					this.controller.controller.checkTask();
					return;
				};
				if(Math.sqrt((this.x() - this.blackTan.x())*(this.x() - this.blackTan.x())+(this.y() - this.blackTan.y())*(this.y() - this.blackTan.y()))<this.diap){
					//InteractiveTask.log("Drop this tan");

					this.x(this.blackTan.x());
					this.y(this.blackTan.y());
					if(this.xml.TYPE.DRAGANDDROP.ISDROPBACK != "true"){
						this.off("mousedown touchstart");
						this.off("mouseup touchend");
						this.draggable(false);

					};
					this.isFree = false;
					this.getLayer().draw();
					this.controller.controller.checkTask();
				};

			});
		};
	};


	this.field.add(this.textField);


};

/*
 –£—Б—В–∞–љ–Њ–≤–Ї–∞ –Њ–±–ї–∞—Б—В–Є –≤–љ–µ—Б–µ–љ–Є—П –≤ —Б–ї—Г—З–∞–µ –µ—Б–ї–Є —Н—В–Њ –љ–Њ–±—Е–Њ–і–Є–Љ–Њ  ///////////////////////////////////////////////////////////////////////////////////
 */
InteractiveTask.SampleTextField.prototype.area = function(value){
	if(!this.xml.TYPE.DRAGANDDROP) return;
	if(this.xml.TYPE.DRAGANDDROP["-tan"] != "true") return;
	this.arrTruePosition = new Array();
	this.arrFalsePosition = new Array();
	var x,y;
	x = parseFloat(this.xml.TYPE.DRAGANDDROP.X)+ parseFloat(this.xml.WIDTH)/2;
	y = parseFloat(this.xml.TYPE.DRAGANDDROP.Y)+ parseFloat(this.xml.HEIGHT)/2;
	var i,l;
	l = value.length;
	for(i=0;i<l;i++){
		if(x>value[i][0] && x<value[i][2] && y>value[i][1] && y<value[i][3]){
			this.arrTruePosition.splice(0,0,value[i]);
		}else{
			this.arrFalsePosition.splice(0,0,value[i]);
		};
	};
	if(this.arrTruePosition.length>0) {
		this.enterArea = true;
		//this.blackTan.isFree = false;
		/*colorContainer.removeEventListener(MouseEvent.MOUSE_DOWN, COLOR_MOUSE_DOWN);
		 colorContainer.removeEventListener(MouseEvent.MOUSE_UP, COLOR_MOUSE_UP);


		 colorContainer.addEventListener(MouseEvent.MOUSE_DOWN, SIMPLE_MOUSE_DOWN);
		 colorContainer.addEventListener(MouseEvent.MOUSE_UP, SIMPLE_MOUSE_UP); */
	};
};
InteractiveTask.SampleTextField.prototype.isEnterArea = function(){
	return this.enterArea;
};
InteractiveTask.SampleTextField.prototype.isEnter = function(){
	var i,l;
	l = this.arrTruePosition.length;
	var X = this.field.x()+ parseFloat(this.xml.WIDTH)/2;
	var Y = this.field.y()+ parseFloat(this.xml.HEIGHT)/2;
	for(i=0;i<l;i++){
		if(X<this.arrTruePosition[i][0] || X>this.arrTruePosition[i][2] || Y<this.arrTruePosition[i][1] || Y>this.arrTruePosition[i][3]) return false;
	};
	l = this.arrFalsePosition.length;
	for(i=0;i<l;i++){
		if(X>this.arrFalsePosition[i][0] && X<this.arrFalsePosition[i][2] && Y>this.arrFalsePosition[i][1] && Y<this.arrFalsePosition[i][3]) return false;
	};
	return true;
};

InteractiveTask.SampleTextField.prototype.isComplate = function(){

	if(!this.field.isFree) return true;
	if(this.isEnterArea()){
		if(this.isEnter()) return true;
	};
	return false;
};

InteractiveTask.SampleTextField.prototype.getObject = function(){
	return this.field;
};
InteractiveTask.SampleTextField.prototype.setCache = function(width, height){
	this.textField.cache({
		x : 0,
		y : 0,
		width : width,
		height : height
	});
	InteractiveTask.log("Text cach = ",this.background.cache());
	if(this.background!=undefined){
		this.background.cache({
			x : 0,
			y : 0,
			width : width,
			height : height
		});
	};
};


/*************************************************************************************************************************************/
InteractiveTask.InputTextField = function(options){
	this.controller = options.controller;
	this.xml = options.xml;

	this.input = new CanvasInput({
		x : parseFloat(this.xml.X),
		y : parseFloat(this.xml.Y),
		width : parseFloat(this.xml.WIDTH),
		height : parseFloat(this.xml.HEIGHT),
		fontSize : parseInt(this.xml.SIZE),
		fontFamily : this.xml.FONT,
		fontColor : InteractiveTask.formatColorFlashToCanvas(this.xml.TEXTCOLOR),
		fontWeight : (this.xml.BOLD == "true")?("bold"):("normal"),
		fontStyle : (this.xml.ITALIC == "true")?("italic"):("normal"),
		placeHolder : this.xml.TYPE.DEFAULTTEXT,
		value : ""
	});
	this.trueText = this.xml.TEXT;
	this.input.controller = this.controller;
	this.input.onkeydown(function(){
		var controller = this.controller;
		setTimeout(function(){
			controller.checkTask();
		}, 150);
	});
	this.input.renderCanvas();
	this.input.render();

};
InteractiveTask.InputTextField.prototype.area = function(value){
	return;
};

InteractiveTask.InputTextField.prototype.isComplate = function(){
	if(this.input.value() == this.trueText) {
		this.input.onkeydown(function(){});
		// this.input.readonly(true);
		return true;
	};
	return false;
};/**
 * Created with IntelliJ IDEA.
 * User: Yurchik
 * Date: 24.02.15
 * Time: 13:50
 * To change this template use File | Settings | File Templates.
 */
/*************************************************************************************/
/****************************** USER TAN *********************************************/
/*************************************************************************************/


InteractiveTask.UserTanController = function(options){
	//alert(task);
	this.task = options.task;
	this.diap = options.diap;
	this.isUniq = options.uniq;
	//this.basePath = options.basePath;
	//alert(this.task);
	this.tanArray = new Array();
	//this.taskController = options.task;
};
InteractiveTask.UserTanController.prototype.add = function(xml){
	var id = this.tanArray.length;
	this.tanArray[id] = new InteractiveTask.SampleUserTan(xml);
	this.tanArray[id].init({
		controller: this,
		//basePath : this.basePath
	});

};
InteractiveTask.UserTanController.prototype.area = function(area){
	var i,l;
	l = this.tanArray.length;
	for(i=0;i<l;i++){
		this.tanArray[i].area(area);
	};
};
InteractiveTask.UserTanController.prototype.getAnimation = function(options){
	return this.task.getAnimation(options);
};
InteractiveTask.UserTanController.prototype.runLabelAnimation = function(label){
	this.task.runLabelAnimation(label);
};
InteractiveTask.UserTanController.prototype.minusHealth = function(){
	this.task.minusHealth();
};

InteractiveTask.UserTanController.prototype.balckAddToLayer = function(layer){
	var length = this.tanArray.length;
	for(i=0;i<length;i++){
		if(!this.tanArray[i].isDeletateBlack)layer.add(this.tanArray[i].blackTan);
		this.tanArray[i].blackTan.remZIndex = this.tanArray[i].blackTan.getZIndex();
	};
};
InteractiveTask.UserTanController.prototype.colorAddToLayer = function(layer){
	var length = this.tanArray.length;
	for(i=0;i<length;i++){
		layer.add(this.tanArray[i].colorTan);
		this.tanArray[i].colorTan.remZIndex = this.tanArray[i].colorTan.getZIndex();
	};
};


/*************************************************************/
/**************************CONTROL TANS***********************/
InteractiveTask.UserTanController.prototype.select = function (tan){
	//alert("Select tan");
	this.task.deSelect();
	tan.isSelect = true;
	//alert("Select tan");
};
InteractiveTask.UserTanController.prototype.deSelect = function(){
	var length = this.tanArray.length;
	for(i=0;i<length;i++){
		this.tanArray[i].colorTan.isSelect = false;
	};
};
InteractiveTask.UserTanController.prototype.rotate = function(degree){
	var length = this.tanArray.length;
	for(i=0;i<length;i++){
		if(this.tanArray[i].colorTan.isSelect){
			this.tanArray[i].rotate(degree);
		};
	};
};

InteractiveTask.UserTanController.prototype.tanMouseUp = function(tan){
	var i;
	var length = this.tanArray.length;
	var remTanObject;
	for(i=0;i<length;i++){
		if(this.tanArray[i].colorTan == tan){
			remTanObject = this.tanArray[i];
			break;
		};
	};
	if(!this.isUniq){
		remTanObject.simplePosition(this.diap);
	}else{
		var settings = remTanObject.getSettings();
		settings.diap = this.diap;
		var flag;
		for(i=0;i<length;i++){
			flag = this.tanArray[i].checkOtherTan(settings);
			if(flag){
				remTanObject.setPosition(this.tanArray[i].getPosition());
				this.tanArray[i].blackTan.isFree = false;
				break;
			};
		};
		if(!flag){
			remTanObject.backPosition();
			this.task.minusHealth();
		};
		flag = true;
	};

	this.task.checkTask();

};
InteractiveTask.UserTanController.prototype.paintTan = function(tan){
	//alert("paint tan this");      /////////////////////////////////////////////////////////////////////////////////////////////////////
	var color = this.task.palitraController.currentColor;
	var i = 0;
	var length = this.tanArray.length;
	//alert("length = " + length);
	for(i=0;i<length;i++){
		//alert(this.tanArray[i].isPaint);
		if(this.tanArray[i].colorTan == tan){
			this.tanArray[i].setColor(color);
			break;
		};
	};



	for(i=0;i<length;i++){
		//alert(this.tanArray[i].isPaint);
		if(!this.tanArray[i].isPaint) return;
	};
	//alert("all tans was paint");
	for(i=0;i<length;i++){
		this.tanArray[i].colorableDisabled();
	};
	//alert("change tan position");
	this.task.checkTask();
};
InteractiveTask.UserTanController.prototype.isComplate = function(){
	var i = 0;
	var length = this.tanArray.length;
	for(i=0;i<length;i++){
		//alert(this.tanArray[i].isComplate());
		this.tanArray[i].setReport(false);
		if(this.tanArray[i].isEnterArea()){
			if(!this.tanArray[i].isEnter()) return false;
		}   else{
			if(!this.tanArray[i].isComplate()) return false;
		};
		this.tanArray[i].setReport(true);
	};
	return true;
};

InteractiveTask.UserTanController.prototype.checkPainting = function(){
	var i = 0;
	var length = this.tanArray.length;
	for(i=0;i<length;i++){
		//alert(this.tanArray[i].isComplate());
		if(!this.tanArray[i].checkPainting()) return false;
	};
	return true;
};

InteractiveTask.UserTanController.prototype.clear = function(){
	while(this.tanArray.length>0){
		this.tanArray[0].colorTan.remove();
		this.tanArray[0].blackTan.remove();
		InteractiveTask.disposeObject(this.tanArray[0]);
		this.tanArray[0] = null;
		this.tanArray.shift();
	};
};
/**************************************************************************************************************************/

InteractiveTask.SampleUserTan = function(xml){


	this.xml = xml;
	this.setReport(false);
};
InteractiveTask.SampleUserTan.prototype.setReport = function(isComplate){
	if(this.xml.BLACK.DELETE == "1") isComplate = true;
	if(this.xml.LESSONLINK != undefined){
		this.xml.LESSONLINK["-isComplate"] = isComplate;
	};
};
InteractiveTask.SampleUserTan.prototype.init = function(json){
	this.controller = json.controller;
	//this.basePath = json.basePath;
	/*
	 Paint tans
	 */
	var type =  this.xml["-type"];
	var colorTanFillColor = InteractiveTask.formatColor(this.xml.COLOR.COLOR, parseFloat(this.xml.COLOR.FILL));
	var colorTanLineColor = InteractiveTask.formatColor(this.xml.COLOR.COLORLINE, parseInt(this.xml.COLOR.CONTOUR));

	this.trueColor = InteractiveTask.formatColor16(this.xml.COLOR.COLOR);
	//InteractiveTask.log("this.xml.BLACK.ALPHA = " + this.xml.BLACK.ALPHA);
	if(parseInt(this.xml.BLACK.ALPHA)=="1"){
		var blackTanFillColor = InteractiveTask.formatColor(0, 0);
		//InteractiveTask.log("black tan color = " + blackTanFillColor);
		var blackTanLineColor = InteractiveTask.formatColor(0,0);
	}else{
		if(parseInt(this.xml.BLACK.ALPHABG)=="1") {
			var blackTanFillColor = InteractiveTask.formatColor(0,0);
		}else{
			var blackTanFillColor = InteractiveTask.formatColor(0,1);
		};
		if(this.xml.BLACK.ALPHALINE=="false"){
			var blackTanLineColor = InteractiveTask.formatColor(0,1);
		}else{
			var blackTanLineColor = InteractiveTask.formatColor(0,0);
		};

	};
	//InteractiveTask.log("black tan color = " + blackTanFillColor);
	var thickLine = parseInt(this.xml.COLOR.THICKLINE);

	var alpha = parseFloat(this.xml.COLOR.ALPHA);
	//InteractiveTask.log("this.xml.COLOR.ALPHA = " + alpha);
	var points;
	if(this.xml.POINTS[0] == undefined){
		points = this.xml.POINTS;
	}else{
		points = this.xml.POINTS[0];
	};

	this.colorTan = new Konva.Shape({
		fill:colorTanFillColor,
		stroke: colorTanLineColor,
		strokeWidth:thickLine,
		x:parseInt(this.xml.COLOR.X),
		y:parseInt(this.xml.COLOR.Y),
		width : parseFloat(this.xml.WIDTH),
		height : parseFloat(this.xml.HEIGHT),
		fillPriority : "pattern",
		sceneFunc : function(context){
			//alert("begin path");
			context.beginPath();

			context.moveTo(parseInt(points.POINT[0]["-x"]), parseInt(points.POINT[0]["-y"]));
			if(type=="curve"){
				for(i=1;i<points.POINT.length;i++){
					context.quadraticCurveTo(parseInt(points.POINT[i]["-anchorX"]), parseInt(points.POINT[i]["-anchorY"]), parseInt(points.POINT[i]["-x"]), parseInt(points.POINT[i]["-y"]));
				};
			}   else{
				for(i=1;i<points.POINT.length;i++){
					context.lineTo(parseInt(points.POINT[i]["-x"]), parseInt(points.POINT[i]["-y"]));
				};
			};
			//alert("draw");
			context.closePath();
			context.fillStrokeShape(this);
		}
	});
	this.colorTan.opacity(alpha);
	this.colorTan.dragBoundFunc(function(pos){
		var X=pos.x;
		var Y=pos.y;

		if(X<0){X=0;};
		if(X>InteractiveTask.STAGE.width()){X=InteractiveTask.STAGE.width();};
		if(Y<0){Y=0;};
		if(Y>InteractiveTask.STAGE.height()){Y=InteractiveTask.STAGE.height();};
		return({x:X, y:Y});
	});
//	InteractiveTask.log("this.colorTan.strokeAlpha() = " + this.colorTan.strokeAlpha());
	this.blackTan = new Konva.Shape({
		fill: blackTanFillColor,
		stroke: blackTanLineColor,
		strokeWidth:thickLine,
		x:parseInt(this.xml.BLACK.X),
		y:parseInt(this.xml.BLACK.Y),
		sceneFunc : function(context){
			//alert("begin path");
			context.beginPath();

			context.moveTo(parseInt(points.POINT[0]["-x"]), parseInt(points.POINT[0]["-y"]));
			if(type=="curve"){
				for(i=1;i<points.POINT.length;i++){
					context.quadraticCurveTo(parseInt(points.POINT[i]["-anchorX"]), parseInt(points.POINT[i]["-anchorY"]), parseInt(points.POINT[i]["-x"]), parseInt(points.POINT[i]["-y"]));
				};
			}   else{
				for(i=1;i<points.POINT.length;i++){
					context.lineTo(parseInt(points.POINT[i]["-x"]), parseInt(points.POINT[i]["-y"]));
				};
			};
			//alert("draw");
			context.closePath();
			context.fillStrokeShape(this);
		}
	});

	/*
	 Base rotate tans
	 */
	this.colorTan.rotation(360 - parseInt(this.xml.COLOR.R)*(22.5));
	this.blackTan.rotation(360 - parseInt(this.xml.BLACK.R)*(22.5));
	if(this.colorTan.rotation() == 360)  this.colorTan.rotation(0);
	if(this.blackTan.rotation() == 360)  this.blackTan.rotation(0);

	if(this.xml.STARTANIMATIONCOMPLATE != undefined){
		// this.startLabelComplate = this.xml.STARTANIMATIONCOMPLATE;
		this.startLabelComplate = new Array();
		if(this.xml.STARTANIMATIONCOMPLATE.indexOf(",")!=-1){
			var lblArr = this.xml.STARTANIMATIONCOMPLATE.split(",");
			var i,l;
			l = lblArr.length;
			for(i=0;i<l;i++){
				this.startLabelComplate[i] = lblArr[i];
			};
		}else{
			this.startLabelComplate[0] = this.xml.STARTANIMATIONCOMPLATE;
		};
	} else{
		this.startLabelComplate = "";
	};
	if(this.xml.STARTANIMATIONDOWN != undefined){
		//this.startLabelMouseDown = this.xml.STARTANIMATIONDOWN;
		this.startLabelMouseDown = new Array();
		if(this.xml.STARTANIMATIONDOWN.indexOf(",")!=-1){
			var lblArr = this.xml.STARTANIMATIONDOWN.split(",");
			var i,l;
			l = lblArr.length;
			for(i=0;i<l;i++){
				this.startLabelMouseDown[i] = lblArr[i];
			};
		}else{
			this.startLabelMouseDown[0] = this.xml.STARTANIMATIONDOWN;
		};
	} else{
		this.startLabelMouseDown = "";
	};


	this.colorTan.isSelect = false;
	this.colorTan.controller =  this.controller;
	this.colorTan.startLabelMouseDown = this.startLabelMouseDown;
	this.colorTan.isRotation = (this.xml.ISROTATION == "true");
	this.colorTan.isDrag = (this.xml.ISDRAG == "true");
	this.blackTan.listening(false);
	this.isDeletateBlack = false;
	if(this.xml.BLACK.DELETE == "1"){
		this.isDeletateBlack = true;
		this.colorTan.isFree = false;
		this.blackTan.isFree = false;
		this.blackTan.remove();
		this.colorTan.listening(false);
		this.setReport(true);
	}else{
		this.colorTan.isFree = true;
		this.blackTan.isFree = true;
		this.colorTan.touchStart = false;

		/*—Б–≤–Њ–є—Б—В–≤–Њ –і–ї—П —Д—Г–љ–Ї—Ж–Є–Є –њ–µ—А–µ–Љ–µ—Й–µ–љ–Є—П/–≤—А–∞—Й–µ–љ–Є—П –Њ–±—К–µ–Ї—В–Њ–≤ —Г—Б—В–∞–љ–∞–≤–ї–Є–≤–∞–µ—В—Б—П –≤ true –і–ї—П —В–Њ–≥–Њ —З—В–Њ–±—Л –≤—Л—З–Є—Б–ї—П–ї–∞—Б—М –Њ–±–ї–∞—Б—В—М –Ї–µ—И–Є—А–Њ–≤–∞–љ–Є—П
		 *  —В–Њ–ї—М–Ї–Њ –і–ї—П –њ–Њ–ї—М–Ј–Њ–≤–∞—В–µ–ї—М—Б–Ї–Є—Е —В–∞–љ–Њ–≤*/
		this.colorTan.cacheRectangle = true;
		this.colorTan.on("mousedown touchstart", function(event){
			//InteractiveTask.extendsDragRotate(this, event);
			InteractiveTask.tansDragRotateInterface(this, event);
		});

	};
	this.enterArea = false;
	// add animation for color tan
	if(this.xml.COLOR.ANIMATION!=undefined){
		this.colorTan.startX = this.colorTan.x();
		this.colorTan.startY = this.colorTan.y();
		this.colorTan.countour = parseInt(this.xml.COLOR.CONTOUR);
		this.colorTan.colorCountour =  this.xml.COLOR.COLORLINE;

		this.colorTan.animation_x = function(x){
			this.x(this.startX+x);
		};
		this.colorTan.animation_y = function(y){
			this.y(this.startY+y);
		};
		this.colorTan.animation_rotation = function(r){
			var rot = (Math.floor(r*10))/10;
			this.rotation(rot);
			if(this.rotation()<0){
				this.rotation(360+this.rotation());
			};
			if(this.rotation()>=360){
				this.rotation(this.rotation()-360);
			};
		};
		this.colorTan.animation_scaleX = function(scale){
			this.scaleX(scale);
		};
		this.colorTan.animation_scaleY = function(scale){
			this.scaleY(scale);
		};
		this.colorTan.animation_alpha = function(alpha){
			/* if(this.countour == 0) return;
			 this.stroke(InteractiveTask.formatColor(this.colorCountour, alpha));*/
			this.opacity(alpha);
		};
		this.colorTan.animation_fillRed = function(red){
			this.fillRed(red);
		};
		this.colorTan.animation_fillGreen = function(green){
			this.fillGreen(green);
		};
		this.colorTan.animation_fillBlue = function(blue){
			this.fillBlue(blue);
		};
		this.colorTan.animation_fill = function(color){
			//InteractiveTask.log("current color = " + color);
			this.fill(color);
			//this.layer.draw();
		};


		this.colorAnimation = this.controller.getAnimation({
			class:this,
			object:this.colorTan,
			xml:this.xml.COLOR.ANIMATION
		});
	};
	// add animation for black tan
	if(this.xml.BLACK.ANIMATION!=undefined){
		this.blackTan.startX = this.blackTan.x();
		this.blackTan.startY = this.blackTan.y();
		this.blackTan.animation_x = function(x){
			this.x(this.startX+x);
		};
		this.blackTan.animation_y = function(y){
			this.y(this.startY+y);
		};
		this.blackTan.animation_rotation = function(r){
			var rot = (Math.floor(r*10))/10;
			this.rotation(rot);
			if(this.rotation()<0){
				this.rotation(360+this.rotation());
			};
			if(this.rotation()>=360){
				this.rotation(this.rotation()-360);
			};
		};
		this.blackTan.animation_scaleX = function(scale){
			this.scaleX(scale);
		};
		this.blackTan.animation_scaleY = function(scale){
			this.scaleY(scale);
		};
		this.blackTan.animation_alpha = function(alpha){
			/* this.strokeAlpha(alpha);
			 this.fillAlpha(alpha);*/
			this.opacity(alpha);
		};
		this.blackTan.animation_fillRed = function(red){
			return;
		};
		this.blackTan.animation_fillGreen = function(green){
			return;
		};
		this.blackTan.animation_fillBlue = function(blue){
			return;
		};
		this.blackAnimation = this.controller.getAnimation({
			class:this,
			object:this.blackTan,
			xml:this.xml.BLACK.ANIMATION
		});
	};
	if(this.xml.IMAGE!=undefined){
		this.initBackgroundImage();
	};
};
InteractiveTask.SampleUserTan.prototype.initBackgroundImage = function(){
	this.colorTan.fillPatternImage(InteractiveTask.LIBRARY.getImage(this.xml.IMAGE["-name"]));
	this.colorTan.fillPatternOffset({
		x : parseFloat(this.xml.IMAGE["-x"]) + parseFloat(this.xml.IMAGE["-width"])/2,
		y : parseFloat(this.xml.IMAGE["-y"]) + parseFloat(this.xml.IMAGE["-height"])/2
	});
};

/* some Error   */
InteractiveTask.SampleUserTan.prototype.colorableEnabled = function(){
	try{
		this.colorTan.isFree = true;
		this.blackTan.isFree = true;
		this.colorTan.off("mousedown touchstart");
		this.colorTan.off("mouseout mouseup touchend");
	} catch(error){
		alert("this object doesn't contain mouse event");
	};
	try{    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if(this.xml.COLOR.PAINT == "1"){
			this.isPaint = false;
			this.colorTan.fill("#B6B6B6");
			this.colorTan.listening(true);
			this.colorTan.on("mousedown touchstart", function(){
				//alert("paint mouse down");
				//this.moveToTop();
				this.controller.paintTan(this);
				if(this.startLabelMouseDown!=""){
					this.controller.runLabelAnimation(this.startLabelMouseDown);
				};
			});
			// –љ–µ—П–≤–љ–∞—П –њ—А–Њ–≤–µ—А–Ї–∞ –љ—Г–ґ–љ–Њ–≥–Њ —Ж–≤–µ—В–∞ –љ–∞ –і–Њ—Д–Њ–ї—В–Њ–≤–Њ—Б—В—М, –µ—Б–ї–Є –Њ–љ–Є —Б–Њ–≤–њ–∞–і–∞—О—В, —В–Њ —В–∞–љ —А–∞—Б–Ї—А–∞—И–µ–љ –≤–µ—А–љ–Њ
			if(this.trueColor.toLocaleLowerCase() == this.colorTan.fill().toLocaleLowerCase()){
				this.isPaint = true;
			};
		} else{
			this.isPaint = true;
		};
	}catch(error){
		alert(error);
	};
};
InteractiveTask.SampleUserTan.prototype.colorableDisabled = function(){

	try{
		this.colorTan.off("mousedown touchstart");
	} catch(error){
		alert("this object doesn't contain mouse event");
	};
	try{    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if(this.xml.BLACK.DELETE == "1"){
			this.colorTan.listening(false);
			this.colorTan.isFree = false;
			this.blackTan.isFree = false;
		}else{
			this.colorTan.isFree = true;
			this.blackTan.isFree = true;
			if(this.isEnterArea()){
				this.blackTan.isFree = false;
			};
			this.colorTan.on("mousedown touchstart", function(event){
				// InteractiveTask.extendsDragRotate(this, event);
				InteractiveTask.tansDragRotateInterface(this, event);
			});
		};
	}catch(error){
		alert(error);
	};
};
/*********************************************/
InteractiveTask.SampleUserTan.prototype.setColor = function(color){
	//alert("true color = " + this.trueColor + "; currentColor = " + color);
	this.colorTan.fill(color);
	//alert("true color = " + this.trueColor + "; currentColor = " + color);
	this.colorTan.getLayer().draw();
	// alert("true color = " + this.trueColor + "; currentColor = " + color);
	if(this.trueColor == color){
		// alert("true color");
		this.isPaint = true;
		if(this.xml.BLACK.DELETE == "1"){
			if(this.startLabelComplate!=""){
				this.controller.runLabelAnimation(this.startLabelComplate);
				this.startLabelComplate = "";
			};
		};
	}else{
		this.controller.minusHealth();
		this.isPaint = false;
	};
	this.setReport(this.isPaint);
};
InteractiveTask.SampleUserTan.prototype.rotate = function(degree){
	var rot = this.colorTan.rotation()+degree;
	if(rot == 360 || rot == -360) rot = 0;
	if(rot<0){
		rot = 360+rot;
	};
	if(rot>360){
		rot = rot - 360;
	};
	//alert("color rotation = " + rot + "; black rotation = " + this.blackTan.rotation());
	// InteractiveTask.log("color rotation = ",rot,"; black rotation = ",this.blackTan.rotation());
	this.colorTan.rotation(rot);
};
InteractiveTask.SampleUserTan.prototype.simplePosition = function(diap){
	//alert("Color tan rotation = "+this.colorTan.rotation());
	//alert("Black tan rotation = "+this.blackTan.rotation());
	var flag = false;
	switch (parseInt(this.xml.COLOR.SYMMETRY)) {
		case 1:
			flag = this.colorTan.rotation() == this.blackTan.rotation();
			break;
		case 2:
			flag = (this.colorTan.rotation() == this.blackTan.rotation()) ||
				this.colorTan.rotation()+180 == this.blackTan.rotation() ||
				this.colorTan.rotation()-180 == this.blackTan.rotation();
			break;
		case 4:
			flag = (this.colorTan.rotation() == this.blackTan.rotation()) ||
				this.colorTan.rotation()+180 == this.blackTan.rotation() ||
				this.colorTan.rotation()-180 == this.blackTan.rotation() ||
				this.colorTan.rotation()+90 == this.blackTan.rotation() ||
				this.colorTan.rotation()-90 == this.blackTan.rotation() ||
				this.colorTan.rotation()+270 == this.blackTan.rotation() ||
				this.colorTan.rotation()-270 == this.blackTan.rotation();
			break;
		case 16:
			flag = true;
			break;
	};
	if(flag){
		//alert("rotation is equal");
		//alert("diap = " + diap);
		if(this.simpleCheckDiap(diap)){
			//alert("is set");
			this.setPosition(this.getPosition());
			this.blackTan.isFree = false;
			return;

		};
	};
	this.backPosition();
};
InteractiveTask.SampleUserTan.prototype.simpleCheckDiap = function(diap){
	var deltaX = this.colorTan.x() - this.blackTan.x();
	var deltaY = this.colorTan.y() - this.blackTan.y();
	var delta = Math.sqrt(deltaX*deltaX + deltaY*deltaY);
	//alert("delta diap = " + delta);
	if(delta<=diap) return true;
	return false;
};

InteractiveTask.SampleUserTan.prototype.getSettings = function(){
	var points;
	if(this.xml.POINTS[0] == undefined){
		points = this.xml.POINTS;
	}else{
		points = this.xml.POINTS[0];
	};
	var out = {
		points : points,
		rotation : this.colorTan.rotation(),
		color : this.colorTan.stroke(),
		symetry : parseInt(this.xml.COLOR.SYMMETRY),
		x : this.colorTan.x(),
		y : this.colorTan.y()
	};
	return out;
};

InteractiveTask.SampleUserTan.prototype.checkOtherTan = function(settings){
	if(!this.blackTan.isFree) return false;
	var points;
	if(this.xml.POINTS[0] == undefined){
		points = this.xml.POINTS;
	}else{
		points = this.xml.POINTS[0];
	};

	if(points.POINT.length != settings.points.POINT.length) return false;
	//alert("num points");
	// if(this.colorTan.stroke() != settings.color) return false;
	// alert("num points");
	if(parseInt(this.xml.COLOR.SYMMETRY) != settings.symetry) return false;
	// alert("simetry");
	var i,l;
	l = points.POINT.length;
	for(i=0;i<l;i++){
		if(points.POINT[i]["-x"]!=settings.points.POINT[i]["-x"]) return false;
		if(points.POINT[i]["-y"]!=settings.points.POINT[i]["-y"]) return false;
	};
	//alert("all points");
	var flag = false;
	switch (parseInt(this.xml.COLOR.SYMMETRY)) {
		case 1:
			flag = settings.rotation == this.blackTan.rotation();
			break;
		case 2:
			flag = (settings.rotation == this.blackTan.rotation()) ||
				settings.rotation+180 == this.blackTan.rotation() ||
				settings.rotation-180 == this.blackTan.rotation();
			break;
		case 4:
			flag = (settings.rotation == this.blackTan.rotation()) ||
				settings.rotation+180 == this.blackTan.rotation() ||
				settings.rotation-180 == this.blackTan.rotation() ||
				settings.rotation+90 == this.blackTan.rotation() ||
				settings.rotation-90 == this.blackTan.rotation() ||
				settings.rotation+270 == this.blackTan.rotation() ||
				settings.rotation-270 == this.blackTan.rotation();
			break;
		case 16:
			flag = true;
			break;
	};

	if(!flag) return false;
	//alert("rotation");
	var deltaX = settings.x - this.blackTan.x();
	var deltaY = settings.y - this.blackTan.y();
	var delta = Math.sqrt(deltaX*deltaX + deltaY*deltaY);
	//alert("diapason");
	//alert("delta diap = " + delta);
	if(delta<=settings.diap) return true;
	return false;
};

InteractiveTask.SampleUserTan.prototype.backPosition = function(){
	if(this.xml.ISSTARTPOS!="true") return;
	if(this.isEnterArea()){
		// InteractiveTask.log("is enter area = true");
		if(this.isEnter()) return;
	};
	this.colorTan.x(parseFloat(this.xml.COLOR.X));
	this.colorTan.y(parseFloat(this.xml.COLOR.Y));
	this.colorTan.getLayer().draw();
};
InteractiveTask.SampleUserTan.prototype.getPosition = function(){
	var out = {
		x : this.blackTan.x(),
		y : this.blackTan.y()
	};
	return out;
};
InteractiveTask.SampleUserTan.prototype.setPosition = function(position){
	if(!this.isEnterArea()){
		this.colorTan.setAttrs(position);
		this.colorTan.getLayer().draw();
		this.colorTan.off("mousedown touchstart");
		this.colorTan.off("mouseout mouseup touchend");
		this.colorTan.isFree = false;
		this.colorTan.listening(false);

		this.colorTan.isSelect = false;
		if(this.startLabelComplate!=""){
			this.controller.runLabelAnimation(this.startLabelComplate);
		};
	}  else{
		if(this.isEnter()){
			if(this.startLabelComplate!=""){
				this.controller.runLabelAnimation(this.startLabelComplate);
			};
		};
	};
};

/*
 –£—Б—В–∞–љ–Њ–≤–Ї–∞ –Њ–±–ї–∞—Б—В–Є –≤–љ–µ—Б–µ–љ–Є—П –≤ —Б–ї—Г—З–∞–µ –µ—Б–ї–Є —Н—В–Њ –љ–Њ–±—Е–Њ–і–Є–Љ–Њ  ///////////////////////////////////////////////////////////////////////////////////
 */
InteractiveTask.SampleUserTan.prototype.area = function(value){
	if(this.xml.BLACK.DELETE == "1") return;
	this.arrTruePosition = new Array();
	this.arrFalsePosition = new Array();
	var i,l;
	l = value.length;
	for(i=0;i<l;i++){
		if(this.getPosition().x>value[i][0] && this.getPosition().x<value[i][2] && this.getPosition().y>value[i][1] && this.getPosition().y<value[i][3]){
			this.arrTruePosition.splice(0,0,value[i]);
		}else{
			this.arrFalsePosition.splice(0,0,value[i]);
		};
	};
	if(this.arrTruePosition.length>0) {
		this.enterArea = true;
		this.blackTan.isFree = false;
		/*colorContainer.removeEventListener(MouseEvent.MOUSE_DOWN, COLOR_MOUSE_DOWN);
		 colorContainer.removeEventListener(MouseEvent.MOUSE_UP, COLOR_MOUSE_UP);


		 colorContainer.addEventListener(MouseEvent.MOUSE_DOWN, SIMPLE_MOUSE_DOWN);
		 colorContainer.addEventListener(MouseEvent.MOUSE_UP, SIMPLE_MOUSE_UP); */
	};
};
InteractiveTask.SampleUserTan.prototype.isEnterArea = function(){
	return this.enterArea;
};
InteractiveTask.SampleUserTan.prototype.isEnter = function(){
	var i,l;
	l = this.arrTruePosition.length;
	var X = this.colorTan.x();
	var Y = this.colorTan.y();
	for(i=0;i<l;i++){
		if(X<this.arrTruePosition[i][0] || X>this.arrTruePosition[i][2] || Y<this.arrTruePosition[i][1] || Y>this.arrTruePosition[i][3]) return false;
	};
	l = this.arrFalsePosition.length;
	for(i=0;i<l;i++){
		if(X>this.arrFalsePosition[i][0] && X<this.arrFalsePosition[i][2] && Y>this.arrFalsePosition[i][1] && Y<this.arrFalsePosition[i][3]) return false;
	};
	return true;
};
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
InteractiveTask.SampleUserTan.prototype.checkPainting = function(){
	if(this.isPaint == undefined) return true;
	return this.isPaint;
};

InteractiveTask.SampleUserTan.prototype.isComplate = function(){
	var flag = !(this.colorTan.isFree || this.blackTan.isFree);

	return flag;
};

InteractiveTask.SampleUserTan.prototype.getObject = function(){
	return this.colorTan;
};
InteractiveTask.SampleUserTan.prototype.getBlackObject = function(){
	return this.blackTan;
};/**
 * Created with IntelliJ IDEA.
 * User: Yurchik
 * Date: 06.04.15
 * Time: 8:06
 * To change this template use File | Settings | File Templates.
 */
InteractiveTask.Const = function(){
	this.STANDARD_IMAGES_PATH = "http://kidnet.ru/sites/default/files/TaskPlayer/Images/";
};

InteractiveTask.Const.prototype.setProperty = function(json){
	for(var e in json){
		this[e] = json[e];
	};
};
InteractiveTask.Const.prototype.IS_PRINT_LOG = false;
//  –Ю–њ—А–µ–і–µ–ї—П–µ—В —Г—Б—В–∞–љ–∞–≤–ї–Є–≤–∞—В—М –ї–Є —В–∞–љ—Л –љ–∞–Ј–∞–і –љ–∞ —Б–≤–Њ—О –≥–ї—Г–±–Є–љ—Г –≤ —Б–ї–Њ–µ (–і–ї—П –њ–µ—А–µ–Љ–µ—Й–µ–љ–Є—П –Є –∞–љ–Є–Љ–∞—Ж–Є–Є)
InteractiveTask.Const.prototype.IS_SET_BACK = false;
InteractiveTask.Const.prototype.PRELOADER_IMAGE = "load.png";

InteractiveTask.Const.prototype.RESTART_BUTTON = 1;
InteractiveTask.Const.prototype.DONT_KNOW_BUTTON = 2;
InteractiveTask.Const.prototype.UNDERSTAND_BUTTON = 3;
InteractiveTask.Const.prototype.COMPLATE_BUTTON = 4;
InteractiveTask.Const.prototype.MARK_BUTTON = 5;

InteractiveTask.Const.prototype.POSITIONING_QUESTION = 6;
InteractiveTask.Const.prototype.POSITIONING_FAIL = 7;

InteractiveTask.Const.prototype.BAD_FRAME = 8;
InteractiveTask.Const.prototype.GOOD_FRAME = 9;

InteractiveTask.Const.prototype.HEALTH = 10;
InteractiveTask.Const.prototype.TEST_PROGRESS = 11;

InteractiveTask.Const.prototype.CHECKBOX_BUTTON = 12;
InteractiveTask.Const.prototype.RADIO_BUTTON = 13;
InteractiveTask.Const.prototype.SOUND_BUTTON = 14;
InteractiveTask.Const.prototype.FULLSCREEN_BUTTON = 15;
InteractiveTask.Const.prototype.PAUSE_BUTTON = 16;
InteractiveTask.Const.prototype.WAIT_FRAME = 17;

InteractiveTask.Const.prototype.BUTTONS = {
	0  : "Buttons/restart.png",
	1  : "Buttons/dontknow.png",
	2  : "Buttons/understand.png",
	3  : "Buttons/complate.png",
	4  : "Mark.png",
	5  : "Positioning/Question.png",
	6  : "Positioning/Fail.png",
	7  : "Frames/badnews.png",
	8  : "Frames/welldone.png",
	9  : "health.png",
	10 : "progress.png",
	11 : "CheckBox/CheckButton.png",
	12 : "CheckBox/RadioButton.png",
	13 : "Buttons/sound.png",
	14 : "Buttons/fullscreen.png",
	15 : "Buttons/pause.png",
	16 : "Frames/wait.png",
	length : 17
};
InteractiveTask.Const.prototype.BUTTON_POSITION = [  0, 0, 60, 41,
	60, 0, 60, 41,
	120, 0, 60, 41];
InteractiveTask.Const.prototype.RESTART_BUTTON_POSITION = [  0, 0, 60, 41,
	60, 0, 60, 41,
	120, 0, 60, 41];
InteractiveTask.Const.prototype.DONT_KNOW_BUTTON_POSITION = [  0, 0, 60, 41,
	60, 0, 60, 41,
	120, 0, 60, 41];
InteractiveTask.Const.prototype.UNDERSTAND_BUTTON_POSITION = [  0, 0, 60, 41,
	60, 0, 60, 41,
	120, 0, 60, 41];
InteractiveTask.Const.prototype.CHECK_BUTTON_POSITION = [   0, 0, 117, 29,
	117, 0, 117, 29,
	234, 0, 117, 29];

InteractiveTask.Const.prototype.SOUND_BUTTON_POSITION = [   0, 0, 60, 41,
	60, 0, 60, 41,
	120, 0, 60, 41];
InteractiveTask.Const.prototype.FULLSCREEN_BUTTON_POSITION = [   0, 0, 60, 41,
	60, 0, 60, 41,
	120, 0, 60, 41];

InteractiveTask.Const.prototype.PAUSE_BUTTON_POSITION = [   0, 0, 60, 41,
	60, 0, 60, 41,
	120, 0, 60, 41];

InteractiveTask.Const.prototype.BIG_BUTTON_POSITION = [   0, 0, 117, 29,
	117, 0, 117, 29,
	234, 0, 117, 29];

InteractiveTask.Const.prototype.HEALTH_POSITION = [ 0, 0, 45, 34,
	45, 0, 45, 34];

InteractiveTask.Const.prototype.PROGRESS_POSITION = [  0, 0, 34, 35,
	34, 0, 34, 35,
	68, 0, 34, 35,
	102, 0, 34, 35];

InteractiveTask.Const.prototype.CHECKBOX_BUTTON_POSITION = [ 0, 0, 15, 15,
	15, 0, 15, 15];


InteractiveTask.Const.prototype.WAIT_FRAME_POSITION = [ 0   ,0,150,150,
	150 ,0,150,150,
	300 ,0,150,150,
	450 ,0,150,150,
	600 ,0,150,150,
	750 ,0,150,150,
	900 ,0,150,150,
	1050,0,150,150,
	1200,0,150,150,
	1350,0,150,150,
	1500,0,150,150,
	1650,0,150,150,
	1800,0,150,150,
	1950,0,150,150,
	2100,0,150,150,
	2250,0,150,150,
	2400,0,150,150,
	2550,0,150,150,
	2700,0,150,150,
	2850,0,150,150,];

InteractiveTask.Const.prototype.DELTA_BOTTOM = 5;
InteractiveTask.Const.prototype.DELTA_RIGHT = 5;

//  –Ф–Њ–њ—Г—Б—В–Є–Љ—Л–µ –Ї–Њ–љ—Б—В–∞–љ—В—Л –і–ї—П –≤—Л—А–∞–≤–љ–Є–≤–∞–љ–Є—П –Ї–љ–Њ–њ–Ї–Є –Ј–≤—Г–Ї–∞ –њ–Њ –≤–µ—А—В–Є–Ї–∞–ї–Є: top, center, bottom
InteractiveTask.Const.prototype.SOUND_VERTICAL_ALIGN = "top";
//  –Ф–Њ–њ—Г—Б—В–Є–Љ—Л–µ –Ї–Њ–љ—Б—В–∞–љ—В—Л –і–ї—П –≤—Л—А–∞–≤–љ–Є–≤–∞–љ–Є—П –Ї–љ–Њ–њ–Ї–Є –Ј–≤—Г–Ї–∞ –њ–Њ –≥–Њ—А–Є–Ј–Њ–љ—В–∞–ї–Є: left, center, right
InteractiveTask.Const.prototype.SOUND_HORIZONTAL_ALIGN = "left";

//  –Ю—В—Б—В—Г–њ –Њ—В –Њ–њ—А–µ–і–µ–ї–µ–љ–љ–Њ–≥–Њ –Ї—А–∞—П –њ–Њ –Њ—Б–Є –•
InteractiveTask.Const.prototype.SOUND_DELTA_X = 70;
//  –Ю—В—Б—В—Г–њ –Њ—В –Њ–њ—А–µ–і–µ–ї–µ–љ–љ–Њ–≥–Њ –Ї—А–∞—П –њ–Њ –Њ—Б–Є Y
InteractiveTask.Const.prototype.SOUND_DELTA_Y = 5;

//  –Ф–Њ–њ—Г—Б—В–Є–Љ—Л–µ –Ї–Њ–љ—Б—В–∞–љ—В—Л –і–ї—П –≤—Л—А–∞–≤–љ–Є–≤–∞–љ–Є—П –Ї–љ–Њ–њ–Ї–Є –њ–Њ–ї–љ–Њ—Н–Ї—А–∞–љ–љ–Њ–≥–Њ —А–µ–ґ–Є–Љ–∞ –њ–Њ –≤–µ—А—В–Є–Ї–∞–ї–Є: top, center, bottom
InteractiveTask.Const.prototype.FULLSCREEN_VERTICAL_ALIGN = "top";
//  –Ф–Њ–њ—Г—Б—В–Є–Љ—Л–µ –Ї–Њ–љ—Б—В–∞–љ—В—Л –і–ї—П –≤—Л—А–∞–≤–љ–Є–≤–∞–љ–Є—П –Ї–љ–Њ–њ–Ї–Є –њ–Њ–ї–љ–Њ—Н–Ї—А–∞–љ–љ–Њ–≥–Њ —А–µ–ґ–Є–Љ–∞ –њ–Њ –≥–Њ—А–Є–Ј–Њ–љ—В–∞–ї–Є: left, center, right
InteractiveTask.Const.prototype.FULLSCREEN_HORIZONTAL_ALIGN = "left";

//  –Ю—В—Б—В—Г–њ –Њ—В –Њ–њ—А–µ–і–µ–ї–µ–љ–љ–Њ–≥–Њ –Ї—А–∞—П –њ–Њ –Њ—Б–Є –•
InteractiveTask.Const.prototype.FULLSCREEN_DELTA_X = 5;
//  –Ю—В—Б—В—Г–њ –Њ—В –Њ–њ—А–µ–і–µ–ї–µ–љ–љ–Њ–≥–Њ –Ї—А–∞—П –њ–Њ –Њ—Б–Є Y
InteractiveTask.Const.prototype.FULLSCREEN_DELTA_Y = 5;

//  –Ф–Њ–њ—Г—Б—В–Є–Љ—Л–µ –Ї–Њ–љ—Б—В–∞–љ—В—Л –і–ї—П –≤—Л—А–∞–≤–љ–Є–≤–∞–љ–Є—П –Ї–љ–Њ–њ–Ї–Є –њ–∞—Г–Ј—Л –њ–Њ –≤–µ—А—В–Є–Ї–∞–ї–Є: top, center, bottom
InteractiveTask.Const.prototype.PAUSE_VERTICAL_ALIGN = "top";
//  –Ф–Њ–њ—Г—Б—В–Є–Љ—Л–µ –Ї–Њ–љ—Б—В–∞–љ—В—Л –і–ї—П –≤—Л—А–∞–≤–љ–Є–≤–∞–љ–Є—П –Ї–љ–Њ–њ–Ї–Є –њ–∞—Г–Ј—Л –њ–Њ –≥–Њ—А–Є–Ј–Њ–љ—В–∞–ї–Є: left, center, right
InteractiveTask.Const.prototype.PAUSE_HORIZONTAL_ALIGN = "right";

//  –Ю—В—Б—В—Г–њ –Њ—В –Њ–њ—А–µ–і–µ–ї–µ–љ–љ–Њ–≥–Њ –Ї—А–∞—П –њ–Њ –Њ—Б–Є –•
InteractiveTask.Const.prototype.PAUSE_DELTA_X = 5;
//  –Ю—В—Б—В—Г–њ –Њ—В –Њ–њ—А–µ–і–µ–ї–µ–љ–љ–Њ–≥–Њ –Ї—А–∞—П –њ–Њ –Њ—Б–Є Y
InteractiveTask.Const.prototype.PAUSE_DELTA_Y = 5;

InteractiveTask.Const.prototype.HEALTH_START_X = 10;
InteractiveTask.Const.prototype.HEALTH_START_Y = 10;
InteractiveTask.Const.prototype.HEALTH_DELTA_X = 5;
InteractiveTask.Const.prototype.HEALTH_WIDTH = 45;
InteractiveTask.Const.prototype.HEALTH_HEIGHT = 34;

InteractiveTask.Const.prototype.CHECKBOX_BUTTON_SIZE = 15;

InteractiveTask.Const.prototype.TEST_PROGRESS_WIDTH = 34;
InteractiveTask.Const.prototype.TEST_PROGRESS_HEIGHT = 35;
InteractiveTask.Const.prototype.TEST_PROGRESS_DELTA_X = 5;

InteractiveTask.Const.prototype.PROGRESS_POINT_DEFAULT_POSITION = 0;
InteractiveTask.Const.prototype.PROGRESS_POINT_CURRENT_POSITION = 1;
InteractiveTask.Const.prototype.PROGRESS_POINT_SUCCESS_POSITION = 2;
InteractiveTask.Const.prototype.PROGRESS_POINT_FAIL_POSITION = 3;
/*
 // –Ї–ї–∞—Б—Б—Л –Ї–љ–Њ–њ–Њ–Ї
 InteractiveTask.Const.prototype.BUTTON_CLASS = "IT_Button";
 InteractiveTask.Const.prototype.BUTTON_CLASS_UNDERSTAND = "IT_Understand";
 InteractiveTask.Const.prototype.BUTTON_CLASS_DONT_KNOW = "IT_Dontknow";
 InteractiveTask.Const.prototype.BUTTON_CLASS_RESTART = "IT_Restart";
 InteractiveTask.Const.prototype.BUTTON_CLASS_CHECK = "IT_Check";
 InteractiveTask.Const.prototype.BUTTON_CLASS_SOUND = "IT_Sound";
 InteractiveTask.Const.prototype.BUTTON_CLASS_FULLSCREEN = "IT_Fullscreen";
 InteractiveTask.Const.prototype.BUTTON_CLASS_PAUSE = "IT_Pause";      */


// –Т—А–µ–Љ—П –Њ—В–Њ–±—А–∞–ґ–µ–љ–Є—П –Њ–Ї–Њ–љ –њ–µ—А–µ—Е–Њ–і–Њ–≤ –Љ–µ–ґ–і—Г –Ј–∞–і–∞–љ–Є—П–Љ–Є (—Г—Б–њ–µ—Е/–љ–µ—Г–і–∞—З–∞) –≤ –Љ–Є–ї–Є—Б–µ–Ї—Г–љ–і–∞—Е
InteractiveTask.Const.prototype.SHOWING_FINAL_FRAME_TIME = 2000;

//  –Я–Њ–љ–Є–ґ–∞—О—Й–Є–є –Ї–Њ—Н—Д—Д–Є—Ж–Є–µ–љ—В –і–ї—П –Ј–∞–і–∞–љ–Є–є
InteractiveTask.Const.prototype.DECREASING_COEFFICIENT = 0.9;

//  –Я–∞—А–∞–Љ–µ—В—А —З–Є—Б–ї–∞ –Ї–∞–і—А–Њ–≤ –≤ —Б–µ–Ї—Г–љ–і—Г –і–ї—П –∞–љ–Є–Љ–∞—Ж–Є–Є –Њ–±—К–µ–Ї—В–Њ–≤ (–ї–Є–љ–µ–є–љ–∞—П –∞–љ–Є–Љ–∞—Ж–Є—П —Б–Њ–Ј–і–∞–љ–љ–∞—П –≤ –Ї–Њ–љ—Б—В—А—Г–Ї—В–Њ—А–µ)
InteractiveTask.Const.prototype.ANIMATION_FRAME_RATE = 24;

//  –Ъ–Њ—Н—Д—Д–Є—Ж–Є–µ–љ—В—Л –і–ї—П –≤—Л—З–Є—Б–ї–µ–љ–Є—П –і–µ–ї—М—В–∞ –Њ—В—А–µ–Ј–Ї–Њ–≤ —В–∞–є–Љ–µ—А–∞
InteractiveTask.Const.prototype.FULL_TIME_DIVIDER = 100;
InteractiveTask.Const.prototype.TIME_DIVIDER = 10;

/*–Я–∞—А–∞–Љ–µ—В—А—Л —Е–Є–љ—В–Њ–≤*/
//  –Т—Л–≤–Њ–і–Є—В—М –ї–Є —Е–Є–љ—В—Л
InteractiveTask.Const.prototype.IS_ADD_HINT = true;
//  –±–∞–Ј–Њ–≤—Л–µ –љ–∞—Б—В—А–Њ–є–Ї–Є —Е–Є–љ—В–∞ opacity - –њ—А–Њ–Ј—А–∞—З–љ–Њ—Б—В—М —Е–Є–љ—В–∞, visible - –≤–Є–і–Є–Љ –ї–Є –Є–Ј–љ–∞—З–∞–ї—М–љ–Њ —Е–Є–љ—В, listening - –і–Њ—Б—В—Г–њ–µ–љ –ї–Є –і–ї—П –њ—А–Њ—Б–ї—Г—И–Є–≤–∞–љ–Є—П —Б–Њ–±—Л—В–Є–є
InteractiveTask.Const.prototype.LABEL_SETTINGS = {
	opacity: 0.75,
	visible: false,
	listening: false
};

//  –Т–Є–Ј—Г–∞–ї–Є–Ј–∞—Ж–Є—П —Д–Њ–љ–∞ —Е–Є–љ—В–∞
InteractiveTask.Const.prototype.TAG_SETTINGS = {
	fill: 'black',
	pointerDirection: 'down',
	pointerWidth: 10,
	pointerHeight: 10,
	lineJoin: 'round',
	shadowColor: 'black',
	shadowBlur: 10,
	shadowOffset: 10,
	shadowOpacity: 0.2
};
//  –Э–∞—Б—В—А–Њ–є–Ї–Є —В–µ–Ї—Б—В–∞ —Е–Є–љ—В–∞
InteractiveTask.Const.prototype.TEXT_SETTINGS = {
	text : '',
	fontFamily: 'Calibri',
	fontSize: 18,
	padding: 5,
	fill: 'white'
};
//  –Ґ–µ–Ї—Б—В—Л —Е–Є–љ—В–Њ–≤ –і–ї—П –Ї–љ–Њ–њ–Њ–Ї
InteractiveTask.Const.prototype.RESTART_HINT_TEXT = "Restart";
InteractiveTask.Const.prototype.DONT_KNOW_HINT_TEXT = "Don't know";
InteractiveTask.Const.prototype.UNDERSTAND_HINT_TEXT = "Understand";
InteractiveTask.Const.prototype.COMPLATE_HINT_TEXT = "Complate";
InteractiveTask.Const.prototype.SOUND_HINT_TEXT = "Replay task sound";
InteractiveTask.Const.prototype.FULLSCREEN_HINT_TEXT = "Fullscreen";
InteractiveTask.Const.prototype.PAUSE_HINT_TEXT = "Pause";

//  –Э–∞–њ—А–∞–≤–ї–µ–љ–Є–µ —Б—В—А–µ–ї–Ї–Є –≤ —Е–Є–љ—В–µ
InteractiveTask.Const.prototype.RESTART_PD = "down";
InteractiveTask.Const.prototype.DONT_KNOW_PD = "down";
InteractiveTask.Const.prototype.UNDERSTAND_PD = "down";
InteractiveTask.Const.prototype.COMPLATE_PD = "down";
InteractiveTask.Const.prototype.SOUND_PD = "up";
InteractiveTask.Const.prototype.FULLSCREEN_PD = "up";
InteractiveTask.Const.prototype.PAUSE_PD = "up";

//  –Ъ–љ–Њ–њ–Ї–∞ —Б—В–∞—А—В–∞ –Ј–∞–і–∞–љ–Є—П –і–ї—П –Ј–∞–≥—А—Г–Ј–Ї–Є –Ї–Њ–љ—В–µ–љ—В–∞ –≤ –±–Є–±–ї–Є–Њ—В–µ–Ї—Г –љ–∞ –Љ–Њ–±–Є–ї—М–љ—Л—Е –і–µ–≤–∞–є—Б–∞—Е
InteractiveTask.Const.prototype.PLAY_BUTTON_LINK = "Buttons/play.png";
InteractiveTask.Const.prototype.PLAY_BUTTON_POSITION = [  0, 0, 50, 35,
	50, 0, 50, 35,
	100, 0, 50, 35];
InteractiveTask.Const.prototype.PLAY_BACKGROUND_COLOR = "0x000000";
InteractiveTask.Const.prototype.PLAY_BACKGROUND_ALPHA = 0.3;
/**
 * Created with IntelliJ IDEA.
 * User: Yurchik
 * Date: 06.04.15
 * Time: 9:37
 * To change this template use File | Settings | File Templates.
 */
InteractiveTask.ButtonSystem = function(width, height, controller){
	this.width = width;
	this.height = height;
	this.controller = controller;
	this.restart = new InteractiveTask.OneButton({
		x : 0,
		y : 0,
		width : InteractiveTask.CONST.RESTART_BUTTON_POSITION[2],
		height : InteractiveTask.CONST.RESTART_BUTTON_POSITION[3],
		image : InteractiveTask.LIBRARY.getButton(InteractiveTask.CONST.RESTART_BUTTON),
		butPosition : InteractiveTask.CONST.RESTART_BUTTON_POSITION,
		layer : InteractiveTask.BUTTONS_LAYER,
		controller : this,
		runFuncName : InteractiveTask.CONST.RESTART_BUTTON,
		hintText : InteractiveTask.CONST.RESTART_HINT_TEXT,
		hintPD : InteractiveTask.CONST.RESTART_PD
	});
	this.dontknow = new InteractiveTask.OneButton({
		x : 0,
		y : 0,
		width : InteractiveTask.CONST.DONT_KNOW_BUTTON_POSITION[2],
		height : InteractiveTask.CONST.DONT_KNOW_BUTTON_POSITION[3],
		image : InteractiveTask.LIBRARY.getButton(InteractiveTask.CONST.DONT_KNOW_BUTTON),
		butPosition : InteractiveTask.CONST.DONT_KNOW_BUTTON_POSITION,
		layer : InteractiveTask.BUTTONS_LAYER,
		controller : this,
		runFuncName : InteractiveTask.CONST.DONT_KNOW_BUTTON,
		hintText : InteractiveTask.CONST.DONT_KNOW_HINT_TEXT,
		hintPD : InteractiveTask.CONST.DONT_KNOW_PD
	});
	this.understand = new InteractiveTask.OneButton({
		x : 0,
		y : 0,
		width : InteractiveTask.CONST.UNDERSTAND_BUTTON_POSITION[2],
		height : InteractiveTask.CONST.UNDERSTAND_BUTTON_POSITION[3],
		image : InteractiveTask.LIBRARY.getButton(InteractiveTask.CONST.UNDERSTAND_BUTTON),
		butPosition : InteractiveTask.CONST.UNDERSTAND_BUTTON_POSITION,
		layer : InteractiveTask.BUTTONS_LAYER,
		controller : this,
		runFuncName : InteractiveTask.CONST.UNDERSTAND_BUTTON,
		hintText : InteractiveTask.CONST.UNDERSTAND_HINT_TEXT,
		hintPD : InteractiveTask.CONST.UNDERSTAND_PD
	});
	this.complate = new InteractiveTask.OneButton({
		x : 0,
		y : 0,
		width : InteractiveTask.CONST.CHECK_BUTTON_POSITION[2],
		height : InteractiveTask.CONST.CHECK_BUTTON_POSITION[3],
		image : InteractiveTask.LIBRARY.getButton(InteractiveTask.CONST.COMPLATE_BUTTON),
		butPosition : InteractiveTask.CONST.CHECK_BUTTON_POSITION,
		layer : InteractiveTask.BUTTONS_LAYER,
		controller : this,
		runFuncName : InteractiveTask.CONST.COMPLATE_BUTTON,
		hintText : InteractiveTask.CONST.COMPLATE_HINT_TEXT,
		hintPD : InteractiveTask.CONST.COMPLATE_PD
	});

	this.sound = new InteractiveTask.OneButton({
		x : 0,
		y : 0,
		width : InteractiveTask.CONST.SOUND_BUTTON_POSITION[2],
		height : InteractiveTask.CONST.SOUND_BUTTON_POSITION[3],
		image : InteractiveTask.LIBRARY.getButton(InteractiveTask.CONST.SOUND_BUTTON),
		butPosition : InteractiveTask.CONST.SOUND_BUTTON_POSITION,
		layer : InteractiveTask.BUTTONS_LAYER,
		controller : this,
		runFuncName : InteractiveTask.CONST.SOUND_BUTTON,
		hintText : InteractiveTask.CONST.SOUND_HINT_TEXT,
		hintPD : InteractiveTask.CONST.SOUND_PD
	});

	this.fullscreen = new InteractiveTask.OneButton({
		x : 0,
		y : 0,
		width : InteractiveTask.CONST.FULLSCREEN_BUTTON_POSITION[2],
		height : InteractiveTask.CONST.FULLSCREEN_BUTTON_POSITION[3],
		image : InteractiveTask.LIBRARY.getButton(InteractiveTask.CONST.FULLSCREEN_BUTTON),
		butPosition : InteractiveTask.CONST.FULLSCREEN_BUTTON_POSITION,
		layer : InteractiveTask.BUTTONS_LAYER,
		controller : this,
		runFuncName : InteractiveTask.CONST.FULLSCREEN_BUTTON,
		hintText : InteractiveTask.CONST.FULLSCREEN_HINT_TEXT,
		hintPD : InteractiveTask.CONST.FULLSCREEN_PD
	});

	this.pause = new InteractiveTask.OneButton({
		x : 0,
		y : 0,
		width : InteractiveTask.CONST.PAUSE_BUTTON_POSITION[2],
		height : InteractiveTask.CONST.PAUSE_BUTTON_POSITION[3],
		image : InteractiveTask.LIBRARY.getButton(InteractiveTask.CONST.PAUSE_BUTTON),
		butPosition : InteractiveTask.CONST.PAUSE_BUTTON_POSITION,
		layer : InteractiveTask.BUTTONS_LAYER,
		controller : this,
		runFuncName : InteractiveTask.CONST.PAUSE_BUTTON,
		hintText : InteractiveTask.CONST.PAUSE_HINT_TEXT,
		hintPD : InteractiveTask.CONST.PAUSE_PD
	});

	this.buttons = new Array();
	this.buttons.push(this.restart);
	this.buttons.push(this.dontknow);
	this.buttons.push(this.understand);
	this.buttons.push(this.complate);
	this.buttons.push(this.sound);
	this.buttons.push(this.fullscreen);
	this.buttons.push(this.pause);
	this.complate.visible(false);
	this.sound.visible(false);
	this.pause.visible(false);
	this.replace();
};

InteractiveTask.ButtonSystem.prototype.replace = function(){
	var startX, startY;
	var deltaX;
	startX = this.width;
	var i,l;
	var num = 0;
	l = this.buttons.length;
	for(i=0;i<l;i++){
		if(this.buttons[i].isVisible){
			startY = this.height - this.buttons[i].height - InteractiveTask.CONST.DELTA_BOTTOM;
			startX = startX - this.buttons[i].width - InteractiveTask.CONST.DELTA_RIGHT;
			this.buttons[i].x(startX);
			this.buttons[i].y(startY);
		};
	};
	this.positionCompositeConst(this.sound, "SOUND");
	this.positionCompositeConst(this.fullscreen, "FULLSCREEN");
	this.positionCompositeConst(this.pause, "PAUSE");
};
InteractiveTask.ButtonSystem.prototype.positionCompositeConst = function(button, constName){
	this.buttonAditionalPositioning(button,
		InteractiveTask.CONST[constName+"_HORIZONTAL_ALIGN"],
		InteractiveTask.CONST[constName+"_VERTICAL_ALIGN"],
		InteractiveTask.CONST[constName+"_DELTA_X"],
		InteractiveTask.CONST[constName+"_DELTA_Y"]);
};
InteractiveTask.ButtonSystem.prototype.buttonAditionalPositioning = function(button, horizontal, vertical, deltaX, deltaY){
	if(button.isVisible){
		switch (horizontal){
			case "left":
				button.x(this.width - button.width - deltaX);
				break;
			case "right":
				button.x(deltaX);
				break;
			case "center":
				button.x((this.width - button.width)/2);
				break;
		};
		switch (vertical){
			case "bottom":
				button.y(this.height - button.height - deltaY);
				break;
			case "top":
				button.y(deltaY);
				break;
			case "center":
				button.y((this.height - button.height)/2);
				break;
		};
	};
};


InteractiveTask.ButtonSystem.prototype.runFunction = function(value){
	switch (value){
		case InteractiveTask.CONST.RESTART_BUTTON:
			this.controller.restart();
			break;
		case InteractiveTask.CONST.DONT_KNOW_BUTTON:
			this.controller.dontKnow();
			break;
		case InteractiveTask.CONST.UNDERSTAND_BUTTON:
			this.controller.understand();
			break;
		case InteractiveTask.CONST.SOUND_BUTTON:
			this.controller.repeatSound();
			break;
		case InteractiveTask.CONST.FULLSCREEN_BUTTON:
			this.controller.fullscreenPress();
			break;
		case InteractiveTask.CONST.PAUSE_BUTTON:
			this.controller.pause();
			break;
	};
};
InteractiveTask.ButtonSystem.prototype.eventFunction = function(value, event){
	this.controller.buttonEvents(value, event)
};
InteractiveTask.ButtonSystem.prototype.clear = function(){
	for(button in this.buttons){
		butoon.visible(false);
	}
};



InteractiveTask.OneButton = function(options){
	this.button = new Konva.Sprite({
		x : options.x,
		y : options.y,
		image : options.image,
		animation : 'standing',
		animations : {
			standing: options.butPosition
		},
		frameRate :10,
		frameIndex : 0
	});
	this.width = options.width;
	this.height = options.height;
	//this.controller = options.controller;
	//this.runFunc = options.runFuncName;
	this.isVisible = true;
	this.layer = options.layer;

	//this.layer.canvas._canvas.classList.add(InteractiveTask.CONST.BUTTON_CLASS, options.butClass);
	//this.layer.canvas._canvas.styleSheets

	//this.layer.canvas._canvas.className = options.butClass;

	this.visible(true);

	this.button.layer = options.layer;
	this.button.runFunc = options.runFuncName;
	this.button.controller = options.controller;

	if(InteractiveTask.CONST.IS_ADD_HINT){

		var hint = new Konva.Label(InteractiveTask.CONST.LABEL_SETTINGS);

		var tagObject = new Object();
		for(var node in InteractiveTask.CONST.TAG_SETTINGS){
			tagObject[node] = InteractiveTask.CONST.TAG_SETTINGS[node];
		};

		tagObject["pointerDirection"] = options.hintPD;
		hint.add(new Konva.Tag(tagObject));

		hint.add(new Konva.Text(InteractiveTask.CONST.TEXT_SETTINGS));
		hint.getText().setText(options.hintText);

		options.layer.add(hint);
	};

	this.button.on("mouseover", function(evt){
		this.frameIndex(1);
		if(hint){
			var mousePos = this.getStage().getPointerPosition();
			hint.position({
				x : mousePos.x * 1/InteractiveTask.STAGE.scaleX(),
				y : mousePos.y * 1/InteractiveTask.STAGE.scaleY(),
			});
			this.on("mousemove", function(event){
				var mousePos = this.getStage().getPointerPosition();
				hint.position({
					x : mousePos.x * 1/InteractiveTask.STAGE.scaleX(),
					y : mousePos.y * 1/InteractiveTask.STAGE.scaleY(),
				});
			});
			hint.moveToTop();
			hint.show();
		};
		this.layer.batchDraw();
		this.controller.eventFunction(this.runFunc, evt);
	});
	this.button.on("mouseout", function(evt){
		this.frameIndex(0);
		if(hint){
			this.off("mousemove");
			hint.hide();
		};
		this.layer.batchDraw();
		this.controller.eventFunction(this.runFunc, evt);
	});
	this.button.on("mousedown touchstart", function(){
		this.frameIndex(2);
		this.layer.batchDraw();
		this.controller.runFunction(this.runFunc);
	});
	this.button.on("mouseup touchend", function(){
		this.frameIndex(1);
		this.layer.batchDraw();
	});

};

InteractiveTask.OneButton.prototype.x = function(value){
	this.button.x(value);
	this.layer.draw();
};
InteractiveTask.OneButton.prototype.y = function(value){
	this.button.y(value);
	this.layer.draw();
};
InteractiveTask.OneButton.prototype.visible = function(value){
	this.isVisible = value;
	(value)?this.layer.add(this.button):this.button.remove();
	this.layer.draw();
};/**
 * Created with IntelliJ IDEA.
 * User: Yurchik
 * Date: 18.08.15
 * Time: 7:41
 * To change this template use File | Settings | File Templates.
 */
(function() {
	var lastTime = 0;
	var vendors = ['ms', 'moz', 'webkit', 'o'];
	for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
		window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
		window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame']
			|| window[vendors[x]+'CancelRequestAnimationFrame'];
	};
	if (!window.requestAnimationFrame){
		window.requestAnimationFrame = function(callback, element) {
			var currTime = new Date().getTime();
			var timeToCall = Math.max(0, 16 - (currTime - lastTime));
			var id = window.setTimeout(function() { callback(currTime + timeToCall); },
				timeToCall);
			lastTime = currTime + timeToCall;
			return id;
		};
	};
	if (!window.cancelAnimationFrame){
		window.cancelAnimationFrame = function(id) {
			clearTimeout(id);
		};
	};
}());
InteractiveTask.AnimationController = function(){
	//alert("create controller animation");
	//  –С—Г—Д–µ—А –∞–љ–Є–Љ–∞—Ж–Є–є (–≤–љ–∞—З–∞–ї–∞ –Њ–љ–Є –љ–∞–Ї–∞–њ–ї–Є–≤–∞—О—В—Б—П –Ј–і–µ—Б—М, –Ј–∞—В–µ–Љ –њ–Њ—Б—В—Г–њ–∞—О—В –≤ –Љ–∞—Б—Б–Є–≤ playAnimation, –µ—Б–ї–Є –Є—Е –љ—Г–ґ–љ–Њ –≤–Њ—Б–њ—А–Њ–Є–Ј–≤–Њ–і–Є—В—М)
	this.bufferAnimation = new Array();
	//  –Ь–∞—Б—Б–Є–≤ –≤–Њ—Б–њ—А–Њ–Є–Ј–≤–Њ–і–Є–Љ—Л—Е –∞–љ–Є–Љ–∞—Ж–Є–є –≤ –і–∞–љ–љ—Л–є –Љ–Њ–Љ–µ–љ—В
	this.playAnimation = new Array();

	this.isRuning = false;

	this.timeout = null;
};

/**
 *
 * @param options {
 *      class - class object of animation
 *      object - object changes
 *      layer - object's layer
 *      xml - XML of animation
 * }
 */
InteractiveTask.AnimationController.prototype.add = function(options){
	var id = this.bufferAnimation.length;
	this.bufferAnimation.push(new InteractiveTask.AnimationObject(options));
	//InteractiveTask.log(this.bufferAnimation[id]);
	return this.bufferAnimation[id];
};
InteractiveTask.AnimationController.prototype.addSprite = function(options){
	var id = this.bufferAnimation.length;
	this.bufferAnimation.push(new InteractiveTask.AnimationSprite(options));
	//InteractiveTask.log(this.bufferAnimation[id]);
	return this.bufferAnimation[id];
};

//  –°—В–∞—А—В –∞–≤—В–Њ–Љ–∞—В–Є—З–µ—Б–Ї–Є—Е –∞–љ–Є–Љ–∞—Ж–Є–є –≤ –љ–∞—З–∞–ї–µ –Ј–∞–і–∞–љ–Є—П
InteractiveTask.AnimationController.prototype.totalPlaye = function(){
	var i, l, n;
	l = this.bufferAnimation.length;
	var flag = false;
	for(i=0;i<l;i++){
		//  –Х—Б–ї–Є –∞–љ–Є–Љ–∞—Ж–Є—О –љ—Г–ґ–љ–Њ —Б—В–∞—А—В–Њ–≤–∞—В—М –∞–≤—В–Њ–Љ–∞—В–Є—З–µ—Б–Ї–Є
		if(this.bufferAnimation[i].isAutoPlay()){
			flag = true;
			//  –†–∞—Б—Б—З–Є—В—Л–≤–∞–µ–Љ –њ—А–Њ–Љ–µ–ґ—Г—В–Њ—З–љ—Л–µ —В–Њ—З–Ї–Є
			this.bufferAnimation[i].middlePointsAnimation();
			//  –Ю—В–њ—А–∞–≤–ї—П–µ–Љ –Њ–±—К–µ–Ї—В –≤ —Б–ї–Њ–є –∞–љ–Є–Љ–∞—Ж–Є–Є
			this.bufferAnimation[i].moveToAnimationLayer();
			//  –Ю—В–њ—А–∞–≤–ї—П–µ–Љ –≤ –Љ–∞—Б—Б–Є–≤ –∞–љ–Є–Љ–∞—Ж–Є–є –њ—А–Њ–Є–≥—А—Л–≤–∞–љ–Є—П  –Є –Т—Л—А–µ–Ј–∞–µ–Љ –µ—С –Є–Ј –±—Г—Д–µ—А–∞
			this.playAnimation.push(this.bufferAnimation[i]);
			//InteractiveTask.log(this.playAnimation[this.playAnimation.length-1]);
			this.bufferAnimation.splice(i,1);
			//  –њ–Њ—Б–Ї–Њ–ї—М–Ї—Г –Љ—Л –≤—Л—А–µ–Ј–∞–ї–Є –∞–љ–Є–Љ–∞—Ж–Є—О –Є–Ј –±—Г—Д–µ—А–∞, —В–Њ –њ–Њ–љ–Є–ґ–∞–µ–Љ –Є –љ–і–µ–Ї—Б –Є –і–ї–Є–љ—Г –Љ–∞—Б—Б–Є–≤–∞ –±—Г—Д–µ—А–∞
			--l;
			--i;
		};
	};
	if(flag){
		InteractiveTask.COMPONENTS_LAYER.batchDraw();
	};
	//this.animateLayers = layers;
	this._run();

};
InteractiveTask.AnimationController.prototype.moveToBuffer = function(i){
	this.bufferAnimation.push(this.playAnimation[i]);
	this.playAnimation.splice(i,1);
};
InteractiveTask.AnimationController.prototype.kinetikAnimation = function(){
//	InteractiveTask.log("animation play");
	var i,l;
	l = this.playAnimation.length;
	var flag = false;
	if(l>0){
		//  –Я–Њ –≤—Б–µ–Љ –∞–љ–Є–Љ–∞—Ж–Є—П–Љ –њ—А–Њ–Є–≥—А—Л–≤–∞–љ–Є—П –њ–µ—А–µ–Љ–µ—Й–∞–µ–Љ –Њ–±—К–µ–Ї—В—Л –≤ –љ–Њ–≤—Л–µ —В–Њ—З–Ї–Є
		for(i=0;i<l;i++){
			//InteractiveTask.log(animations[i]);
			this.playAnimation[i].gotoNextPoint();
			if(this.playAnimation[i].isComplate()){
				flag = true;
				this.playAnimation[i].moveToNativeLayer();
				if(this.playAnimation[i].tryRemoveObject()){
					InteractiveTask.disposeObject(this.playAnimation[i]);
					this.playAnimation[i] = null;
					this.playAnimation.splice(i,1);
				}else{
					if(this.playAnimation[i].multiple){
						this.playAnimation[i].isPointsPrepared = false;
						this.moveToBuffer(i);
						//InteractiveTask.log("push back to buffer");
					}else{
						InteractiveTask.disposeObject(this.playAnimation[i]);
						this.playAnimation[i] = null;
						this.playAnimation.splice(i,1);
					};
				};

				--i;
				--l;
			}else{
				if(this.playAnimation[i].isStopOnFrame){
					flag = true;
					this.playAnimation[i].moveToNativeLayer();
					this.playAnimation[i].isStopOnFrame = false;
					this.moveToBuffer(i);
					--i;
					--l;
				};
			};
		};
		if(flag){
			InteractiveTask.COMPONENTS_LAYER.batchDraw();
		};
		InteractiveTask.ANIMATION_LAYER.batchDraw();

	};
	//  –Х—Б–ї–Є –Љ–∞—Б—Б–Є–≤ –±—Г—Д–µ—А–∞ –њ—Г—Б—В –Є –Љ–∞—Б—Б–Є–≤ —В–µ–Ї—Г—Й–µ–є –∞–љ–Є–Љ–∞—Ж–Є–Є —В–∞–Ї–ґ–µ –њ—Г—Б—В, —В–Њ –Њ—Б—В–∞–љ–∞–≤–ї–Є–≤–∞–µ–Љ –њ–Њ—В–Њ–Ї –∞–љ–Є–Љ–∞—Ж–Є–Є
	var self = this;
	var func = function(){self.kinetikAnimation()};
	if(this.playAnimation.length != 0){
		//this.timeout = setTimeout(function(){self.kinetikAnimation()}, Math.floor(1000/InteractiveTask.CONST.ANIMATION_FRAME_RATE));
		//this.timeout = setTimeout(function(){requestAnimationFrame(func, self);}, Math.floor(1000/InteractiveTask.CONST.ANIMATION_FRAME_RATE));
		requestAnimationFrame(func, self);
	}else{
		this.isRuning = false;
	};
};
InteractiveTask.AnimationController.prototype.playByLabel = function(label){
	//InteractiveTask.log("run by label = |" + label + "|");
	var i, l, j,n;
	l = this.bufferAnimation.length;
	//InteractiveTask.log("bufferAnimation.length = |" + this.bufferAnimation.length + "|");
	var flag = false;
	for(i=0;i<l;i++){
		if(this.bufferAnimation[i].label != label) {continue;};
		InteractiveTask.log("[Player Animation] - find label");
		if(this.bufferAnimation[i].canGetObject()){
			flag = true;
			InteractiveTask.log("[Player Animation] - prepare points");
			//  –†–∞—Б—Б—З–Є—В—Л–≤–∞–µ–Љ –њ—А–Њ–Љ–µ–ґ—Г—В–Њ—З–љ—Л–µ —В–Њ—З–Ї–Є
			this.bufferAnimation[i].middlePointsAnimation();
			//InteractiveTask.log("add layer");
			//  –Ч–∞–њ–Њ–Љ–Є–љ–∞–µ–Љ —Б–ї–Њ–Є –∞–љ–Є–Љ–∞—Ж–Є–є
			//this.KonvaAnimation.addLayer(this.bufferAnimation[i].layer);
			//  –Ю—В–њ—А–∞–≤–ї—П–µ–Љ –Њ–±—К–µ–Ї—В –≤ —Б–ї–Њ–є –∞–љ–Є–Љ–∞—Ж–Є–Є
			this.bufferAnimation[i].moveToAnimationLayer();
			//  –Ю—В–њ—А–∞–≤–ї—П–µ–Љ –≤ –Љ–∞—Б—Б–Є–≤ –∞–љ–Є–Љ–∞—Ж–Є–є –њ—А–Њ–Є–≥—А—Л–≤–∞–љ–Є—П  –Є –Т—Л—А–µ–Ј–∞–µ–Љ –µ—С –Є–Ј –±—Г—Д–µ—А–∞
			//InteractiveTask.log("to animation array");
			this.playAnimation.push(this.bufferAnimation[i]);
			this.bufferAnimation.splice(i,1);
			//  –њ–Њ—Б–Ї–Њ–ї—М–Ї—Г –Љ—Л –≤—Л—А–µ–Ј–∞–ї–Є –∞–љ–Є–Љ–∞—Ж–Є—О –Є–Ј –±—Г—Д–µ—А–∞, —В–Њ –њ–Њ–љ–Є–ґ–∞–µ–Љ –Є –љ–і–µ–Ї—Б –Є –і–ї–Є–љ—Г –Љ–∞—Б—Б–Є–≤–∞ –±—Г—Д–µ—А–∞
			--l;
			--i;
		};
	};
	if(flag){
		InteractiveTask.COMPONENTS_LAYER.batchDraw();
	};
	this._run();
};
InteractiveTask.AnimationController.prototype._run = function(){
	if(this.playAnimation.length>0 && !this.isRuning){
		this.isRuning = true;
		InteractiveTask.ANIMATION_LAYER.batchDraw();
		this.kinetikAnimation();
	};
};
InteractiveTask.AnimationController.prototype.clear = function(){
	clearTimeout(this.timeout);
	while(this.playAnimation.length>0){
		InteractiveTask.disposeObject(this.playAnimation[0]);
		this.playAnimation[0] = null;
		this.playAnimation.shift();
	};
	while(this.bufferAnimation.length>0){
		InteractiveTask.disposeObject(this.bufferAnimation[0]);
		this.bufferAnimation[0] = null;
		this.bufferAnimation.shift();
	};

};

/************************************************************************************************************************/
/************–Ю–±—К–µ–Ї—В —Б–Њ–і–µ—А–ґ–∞—Й–Є–є –њ—А–Њ–Љ–µ–ґ—Г—В–Њ—З–љ—Л–µ —Б–Њ—Б—В–Њ—П–љ–Є—П –∞–љ–Є–Љ–Є—А—Г–µ–Љ–Њ–≥–Њ –Њ–±—К–µ–Ї—В–∞ –Є –Љ–µ—В–Њ–і—Л –Є–Ј–Љ–µ–љ–µ–љ–Є—П –Њ–±—К–µ–Ї—В–∞*******************/
/************************************************************************************************************************/
InteractiveTask.AnimationObject = function(options){
	//alert("create Animation object");
	this.xml = options.xml;
	this.class = options.class;
	this.object = options.object;
	this.layer;

	this.isPointsPrepared = false;
	this.isStopOnFrame = false;

	this.zIndex = 0;

	this.parseXML();
};

InteractiveTask.AnimationObject.prototype.parseXML = function(){
	//alert("parseXml");
	//  –Ч–∞–њ–Њ–Љ–Є–љ–∞–µ–Љ —И–∞–≥ –∞–љ–Є–Љ–∞—Ж–Є–Є
	this.step = parseFloat(this.xml["-step"]);
	//  –Ч–∞–њ–Њ–Љ–Є–љ–∞–µ–Љ –≤—А–µ–Љ—П —З–µ—А–µ–Ј –Ї–Њ—В–Њ—А–Њ–µ –љ–µ–Њ–±—Е–Њ–і–Є–Љ–Њ —Б—В–∞—А—В–Њ–≤–∞—В—М –∞–љ–Є–Љ–∞—Ж–Є—О
	this.startFrom = parseFloat(this.xml["-startTime"]);
	//  –Ч–∞—Ж–Є–Ї–ї–Є–≤–∞—В—М –Є–ї–Є –љ–µ—В –∞–љ–Є–Љ–∞—Ж–Є—О
	this.cicling = (this.xml["-cicling"] == "true");
	//  –£—Б—В–∞–љ–∞–≤–ї–Є–≤–∞—В—М –љ–∞—Б—В—А–Њ–є–Ї–Є –њ–µ—А–≤–Њ–є —В–Њ—З–Ї–Є –Є–ї–Є –љ–µ—В
	var isFirstPointSettings = (this.xml["-firstPoint"] == "true");
	//  –£–і–∞–ї—П—В—М –ї–Є –Њ–±—К–µ–Ї—В –њ–Њ –Ј–∞–≤–µ—А—И–µ–љ–Є–Є –∞–љ–Є–Љ–∞—Ж–Є–Є
	this.isRemoveObject = (this.xml["-removeObject"] == "true");
	//  –£—Б—В–∞–љ–∞–≤–ї–Є–≤–∞–µ–Љ —З–Є—Б–ї–Њ –Ј–∞–њ—А–Њ—Б–Њ–≤ –і–Њ –Ј–∞–њ—Г—Б–Ї–∞ –∞–љ–Є–Љ–∞—Ж–Є–Є
	if(this.xml["-address"]!="") this.address = parseInt(this.xml["-address"]);
	//  –Ю–њ—А–µ–і–µ–ї—П–µ–Љ –љ–µ–Њ–±—Е–Њ–і–Є–Љ –ї–Є –Љ–љ–Њ–ґ–µ—Б—В–≤–µ–љ–љ—Л–є –Ј–∞–њ—Г—Б–Ї –∞–љ–Є–Љ–∞—Ж–Є–Є
	this.multiple = (this.xml["-multiple"]=="true");
	//  –Ю–њ—А–µ–і–µ–ї—П–µ–Љ –±—Г–і–µ—В –ї–Є –∞–љ–Є–Љ–∞—Ж–Є—П —Б—В–∞—В–Є—З–µ—Б–Ї–Њ–є, —В.–µ. –і–≤–Є–ґ–µ–љ–Є–µ –Ї–Њ –≤—В–Њ—А–Њ–є —В–Њ—З–Ї–µ —Б —В–µ–Ї—Г—Й–µ–є –њ–Њ–Ј–Є—Ж–Є–Є –Є–ї–Є –≤–Њ–Ј–≤—А–∞—В –љ–∞ –њ–µ—А–≤—Г—О —В–Њ—З–Ї—Г
	this.animationStatic = (this.xml["-static"]=="true");
	//  –Љ–µ—В–Ї–∞ –і–ї—П –Ј–∞–њ—Г—Б–Ї–∞ –∞–љ–Є–Љ–∞—Ж–Є–Є
	this.label = this.xml["-label"];

	// –°–Њ–Ј–і–∞–µ–Љ –Љ–∞—Б—Б–Є–≤ –Ї–ї—О—З–µ–≤—Л—Е —В–Њ—З–µ–Ї
	this.keyPoints = new Array();
	if(this.xml.POINTS.KEYPOINT[0]==undefined){
		this.keyPoints[0] = this.xml.POINTS.KEYPOINT;
	}   else{
		this.keyPoints = this.xml.POINTS.KEYPOINT;
	};
	// –Х—Б–ї–Є –≤ –Љ–∞—Б—Б–Є–≤–µ –Ї–ї—О—З–µ–≤—Л—Е —В–Њ—З–µ–Ї —Б—Г—Й–µ—Б—В–≤—Г—О—В –Њ—В—А–Є—Ж–∞—В–µ–ї—М–љ—Л–µ –њ–Њ–≤–Њ—А–Њ—В—Л, —В–Њ –і–µ–ї–∞–µ–Љ –Є—Е –њ–Њ–ї–Њ–ґ–Є—В–µ–ї—М–љ—Л–Љ–Є
	var i,l;
	l = this.keyPoints.length;
	for(i=0;i<l;i++){
		if(parseFloat(this.keyPoints[i]["-rotation"])<0){
			this.keyPoints[i]["-rotation"] = (360 + parseFloat(this.keyPoints[i]["-rotation"])).toString();
		};
	};
	//  –Э–∞—Б—В—А–∞–Є–≤–∞–µ–Љ –Њ–±—К–µ–Ї—В –њ–Њ –њ–µ—А–≤–Њ–є —В–Њ—З–Ї–µ, –µ—Б–ї–Є —Н—В–Њ –љ–µ–Њ–±—Е–Њ–і–Є–Љ–Њ
	if(isFirstPointSettings){
		this.object.animation_rotation(parseFloat(this.keyPoints[0]["-rotation"]));
		this.object.animation_alpha(parseFloat(this.keyPoints[0]["-alpha"]));
		this.object.animation_scaleX(parseFloat(this.keyPoints[0]["-scale"]));
		this.object.animation_scaleY(parseFloat(this.keyPoints[0]["-scale"]));
		//this.layer.batchDraw();
	};
};

//  –Ь–µ—В–Њ–і –њ—А–Њ—Б—З–µ—В–∞ –≤—Б–µ—Е –њ—А–Њ–Љ–µ–ґ—Г—В–Њ—З–љ—Л—Е —В–Њ—З–µ–Ї –∞–љ–Є–Љ–∞—Ж–Є–Є —Б —В–∞–є–Љ–∞—Г—В–∞–Љ–Є
InteractiveTask.AnimationObject.prototype.middlePointsAnimation = function(){
	if(this.isPointsPrepared) return;
	this.isPointsPrepared = true;
	//  –Х—Б–ї–Є –∞–љ–Є–Љ–∞—Ж–Є—П –љ–∞—З–Є–љ–∞–µ—В—Б—П —Б —В–µ–Ї—Г—Й–µ–є —В–Њ—З–Ї–Є, —В–Њ –љ–∞—Б—В—А–∞–Є–≤–∞–µ–Љ –љ–Њ–≤—Л–µ –њ–Њ–≤–Њ—А–Њ—В –Є –њ–Њ–Ј–Є—Ж–Є—О
	if(this.animationStatic){
		//alert("anim static");
		this.keyPoints[0]["-rotation"] = this.object.rotation();
		this.keyPoints[0]["-X"] = this.object.x() - this.object.startX;
		this.keyPoints[0]["-Y"] = this.object.y() - this.object.startY;
		//alert("start rotation = " + this.points[0]["-rotation"]);
	};

	var ID = 0;
	//  –і–µ–ї—М—В–∞ –њ–µ—А–µ–Љ–µ—Й–µ–љ–Є–µ –Њ–±—К–µ–Ї—В–∞
	var deltaX, deltaY;
	//  –Ф–µ–ї—М—В—Л –њ–Њ–≤–Њ—А–Њ—В–∞, –Љ–∞—Б—И—В–∞–±–Є—А–Њ–≤–∞–љ–Є—П –Є –њ—А–Њ–Ј—А–∞—З–љ–Њ—Б—В–Є —Б–Њ–Њ—В–≤–µ—В—Б—В–≤–µ–љ–љ–Њ
	var deltaR, deltaS, deltaA;
	//  –Ф–µ–ї—М—В–∞ —Ж–≤–µ—В–∞ –њ–Њ —Б–њ–µ–Ї—В—А–∞–Љ
	var deltaRed, deltaGreen, deltaBlue;
	//	–І–Є—Б–ї–Њ —З–∞—Б—В–µ–є –љ–∞ –Ї–Њ—В–Њ—А–Њ–µ –і–µ–ї–Є—В—Б—П –Њ—В—А–µ–Ј–Њ–Ї –∞–љ–Є–Љ–∞—Ж–Є–Є
	var sempleTime = Math.floor(InteractiveTask.CONST.ANIMATION_FRAME_RATE*this.step);

	var i,j,l;
	l = this.keyPoints.length;
	//	–≤—Л—З–Є—Б–ї—П–µ–Љ –љ–∞—З–∞–ї—М–љ—Л–µ –Ј–љ–∞—З–µ–љ–Є—П —Ж–≤–µ—В–∞
	var r,g,b;
	r = g = b = deltaRed = deltaGreen = deltaBlue = 0;
	//alert("start optional");
	if(this.object!=undefined){
		this.object.moveToTop();
		var color =  InteractiveTask.formatColor(this.keyPoints[0]["-color"], 1);
		//alert("color = " + color);
		r = InteractiveTask.getRed(color);
		//alert("red = " + r);
		g = InteractiveTask.getGreen(color);
		//alert("green = " + g);
		b = InteractiveTask.getBlue(color);
		//alert("blue = " + b);
	};
	//  –°–Њ–Ј–і–∞–µ–Љ –Љ–∞—Б—Б–Є–≤ –њ—А–Њ–Љ–µ–ґ—Г—В–Њ—З–љ—Л—Е —В–Њ—З–µ–Ї –∞–љ–Є–Љ–∞—Ж–Є–Є
	this.arrayAnimationPoints = new Array();
	//  –Х—Б–ї–Є –љ—Г–ґ–љ–Њ –Ј–∞–њ—Г—Б—В–Є—В—М –∞–љ–Є–Љ–∞—Ж–Є—О —З–µ—А–µ–Ј –љ–µ–Ї–Њ—В–Њ—А–Њ–µ –≤—А–µ–Љ—П, —В–Њ —Б—В–∞–≤–Є–Љ –≤ –Љ–∞—Б—Б–Є–≤ –њ—А–Њ–Љ–µ–ґ—Г—В–Њ—З–љ—Л—Е —В–Њ—З–µ–Ї –њ–Њ–і—Е–Њ–і—П—Й–µ–µ –Ї–Њ–ї–Є—З–µ—Б—В–≤–Њ
	//  –?–љ–∞—З–µ –Ј–∞–њ–Є—Б—Л–≤–∞–µ–Љ —В–Њ–ї—М–Ї–Њ –Њ–і–љ—Г –њ–µ—А–≤—Г—О —В–Њ—З–Ї—Г
	if(this.startFrom!=undefined){
		if(this.startFrom!=0){
			var numFirstPoints =  Math.floor(InteractiveTask.CONST.ANIMATION_FRAME_RATE*this.startFrom);
			for(i=0;i<numFirstPoints;i++){
				this._addKeyPoint(0, r, g, b);
			};
		}else{
			this._addKeyPoint(0, r, g, b);
		};
	}else{
		this._addKeyPoint(0, r, g, b);
	};

	//	–Я—А–Њ—Б—З–Є—В—Л–≤–∞–µ–Љ –њ–Њ–Ј–Є—Ж–Є–Є –і–ї—П –Ї–∞–ґ–і–Њ–≥–Њ –Њ—В—А–µ–Ј–Ї–∞
	var currentRed, currentBlue, currentGreen;
	if(this.step!=0){
		for(i=1;i<l;i++){
			//	–Я—А–Њ—Б—З—С—В —Б–Љ–µ—Й–µ–љ–Є–є –њ–Њ –Њ—Б—П–Љ –і–ї—П —В–µ–Ї—Г—Й–µ–≥–Њ –Њ—В—А–µ–Ј–Ї–∞
			deltaX = (parseFloat(this.keyPoints[i]["-X"])-parseFloat(this.keyPoints[i-1]["-X"]))/sempleTime;
			deltaY = (parseFloat(this.keyPoints[i]["-Y"])-parseFloat(this.keyPoints[i-1]["-Y"]))/sempleTime;
			deltaR = (parseFloat(this.keyPoints[i]["-rotation"])-parseFloat(this.keyPoints[i-1]["-rotation"]))/sempleTime;
			deltaS = (parseFloat(this.keyPoints[i]["-scale"])-parseFloat(this.keyPoints[i-1]["-scale"]))/sempleTime;
			deltaA = (parseFloat(this.keyPoints[i]["-alpha"])-parseFloat(this.keyPoints[i-1]["-alpha"]))/sempleTime;
			//	–Т—Л—З–Є—Б–ї—П–µ–Љ —Б–Љ–µ—Й–µ–љ–Є–µ –Ї–∞–ґ–і–Њ–≥–Њ —Б–њ–µ–Ї—В—А–∞ —Ж–≤–µ—В–∞
			if(this.object!=null){
				var newColor = InteractiveTask.formatColor(this.keyPoints[i]["-color"]);
				var oldColor = InteractiveTask.formatColor(this.keyPoints[i-1]["-color"]);
				deltaRed = Math.ceil((InteractiveTask.getRed(newColor) -  InteractiveTask.getRed(oldColor))/sempleTime);
				deltaGreen = Math.ceil((InteractiveTask.getGreen(newColor) -  InteractiveTask.getGreen(oldColor))/sempleTime);
				deltaBlue = Math.ceil((InteractiveTask.getBlue(newColor) -  InteractiveTask.getBlue(oldColor))/sempleTime);
			};
			//InteractiveTask.log("delta: red ",deltaRed,"; green",deltaGreen," ; blue",deltaBlue);
			//	–Ч–∞–њ–Є—Б—М –≤ –Љ–∞—Б—Б–Є–≤ –≤—Б–µ—Е –∞–љ–Є–Љ–∞—Ж–Є–Њ–љ–љ—Л—Е —В–Њ—З–µ–Ї
			for(j=0;j<sempleTime;j++){
				//  –Ю–њ—А–µ–і–µ–ї—П–µ–Љ –Є–љ–і–µ–Ї—Б –љ–Њ–≤–Њ–є —В–Њ—З–Ї–Є
				ID = this.arrayAnimationPoints.length;
				//  –Т—Л—З–Є—Б–ї—П–µ–Љ —Ж–≤–µ—В –Њ–±—К–µ–Ї—В–∞ –≤ —В–µ–Ї—Г—Й–µ–є —В–Њ—З–Ї–µ
				currentRed = this.arrayAnimationPoints[ID-1].red + deltaRed;
				if(currentRed>255) currentRed = 255;
				if(currentRed<0) currentRed = 0;
				currentBlue = this.arrayAnimationPoints[ID-1].blue + deltaBlue;
				if(currentBlue>255) currentBlue = 255;
				if(currentBlue<0) currentBlue = 0;
				currentGreen=this.arrayAnimationPoints[ID-1].green + deltaGreen;
				if(currentGreen>255) currentGreen = 255;
				if(currentGreen<0) currentGreen = 0;
				//  –Ч–∞–њ–Є—Б—Л–≤–∞–µ–Љ –љ–Њ–≤—Г—О –њ—А–Њ–Љ–µ–ґ—Г—В–Њ—З–љ—Г—О —В–Њ—З–Ї—Г
				this.arrayAnimationPoints.push({
					x:this.arrayAnimationPoints[ID-1].x + deltaX,
					y:this.arrayAnimationPoints[ID-1].y + deltaY,
					rotation:this.arrayAnimationPoints[ID-1].rotation + deltaR,
					scale:this.arrayAnimationPoints[ID-1].scale + deltaS,
					alpha:this.arrayAnimationPoints[ID-1].alpha + deltaA,
					red:currentRed,
					green:currentGreen,
					blue:currentBlue
				});
			};
			if(this.keyPoints[i]["-label"]!=undefined){
				ID = this.arrayAnimationPoints.length-1;
				if(this.keyPoints[i]["-label"]!=""){
					this.arrayAnimationPoints[ID].label = this.keyPoints[i]["-label"];
				};
				if(this.keyPoints[i]["-access"]!=undefined){
					if(parseInt(this.keyPoints[i]["-access"])>0){
						this.arrayAnimationPoints[ID].address = parseInt(this.keyPoints[i]["-access"]);
					}else{
						this.arrayAnimationPoints[ID].address = 0;
					};
				};
			};
			//  –Х—Б–ї–Є –љ–∞ —Б–ї–µ–і—Г—О—Й–µ–є —В–Њ—З–Ї–µ –∞–љ–Є–Љ–∞—Ж–Є–Є –љ—Г–ґ–µ–љ —В–∞–є–Љ–∞—Г—В, —В–Њ –Ј–∞–њ–Є—Б—Л–≤–∞–µ–Љ —Б—В–Њ–ї—М–Ї–Њ –њ—А–Њ–Љ–µ–ґ—Г—В–Њ—З–љ—Л—Е —В–Њ—З–µ–Ї —А–∞–≤–љ—Л—Е —Б–ї–µ–і—Г—О—Й–µ–є, —Б–Ї–Њ–ї—М–Ї–Њ –љ–µ–Њ–±—Е–Њ–і–Є–Љ–Њ
			if(this.keyPoints[i]["-timeOut"]!=undefined){
				if(parseFloat(this.keyPoints[i]["-timeOut"])>0){
					var numTimeOutPoints =  Math.floor(InteractiveTask.CONST.ANIMATION_FRAME_RATE*parseFloat(this.keyPoints[i]["-timeOut"]));
					for(j=0;j<numFirstPoints;j++){
						this._addKeyPoint(i, currentRed, currentGreen, currentBlue);
					};
				};
			};
		};
	} else{
		for(i=1;i<l;i++){
			var newColor = InteractiveTask.formatColor(this.keyPoints[i]["-color"]);
			this._addKeyPoint(i, InteractiveTask.getRed(newColor), InteractiveTask.getGreen(newColor), InteractiveTask.getBlue(newColor));
			ID = this.arrayAnimationPoints.length-1;
			if(this.keyPoints[i]["-label"]!=undefined){
				if(this.keyPoints[i]["-label"]!=""){
					this.arrayAnimationPoints[ID].label = this.keyPoints[i]["-label"];
				};
				if(this.keyPoints[i]["-access"]!=undefined){
					if(parseInt(this.keyPoints[i]["-access"])>0){
						this.arrayAnimationPoints[ID].address = parseInt(this.keyPoints[i]["-access"]);
					}else{
						this.arrayAnimationPoints[ID].address = 0;
					};
				};
			};
		};
	};
	//	–£–і–∞–ї—П–µ–Љ –њ–µ—А–≤—Г—О —В–Њ—З–Ї—Г –і–ї—П –±–Њ–ї–µ–µ –њ–ї–∞–≤–љ–Њ–≥–Њ –њ–µ—А–µ—Е–Њ–і–∞ –њ—А–Є –Ј–∞—Ж–Є–Ї–ї–Є–≤–∞–љ–Є–Є –∞–љ–Є–Љ–∞—Ж–Є–Є
	this.arrayAnimationPoints.shift();
};

//  –§—Г–љ–Ї—Ж–Є—П –њ–µ—А–µ—Е–Њ–і–∞ –Ї —Б–ї–µ–і—Г—О—Й–µ–є –њ—А–Њ–Љ–µ–ґ—Г—В–Њ—З–љ–Њ–є —В–Њ—З–Ї–µ –∞–љ–Є–Љ–∞—Ж–Є–Є
InteractiveTask.AnimationObject.prototype.gotoNextPoint = function(){
	//  –Я–µ—А–≤—Г—О —В–Њ—З–Ї—Г –Є–Ј –Љ–∞—Б—Б–Є–≤–∞ –њ—А–Њ–Љ–µ–ґ—Г—В–Њ—З–љ—Л—Е —В–Њ—З–µ–Ї, –Ј–∞–њ–Њ–Љ–Є–љ–∞–µ–Љ –µ—С –Є —Г–і–∞–ї—П–µ–Љ –Є–Ј –Љ–∞—Б—Б–Є–≤–∞
	var currentPoint = this.arrayAnimationPoints.shift();
	//  –Я–µ—А–µ–љ–Њ—Б–Є–Љ, –њ–Њ–≤–Њ—А–∞—З–Є–≤–∞–µ–Љ, –Љ–∞—Б—И—В–∞–±–Є—А—Г–µ–Љ –Є –Є–Ј–Љ–µ–љ—П–µ–Љ –њ—А–Њ–Ј—А–∞—З–љ–Њ—Б—В—М –Њ–±—К–µ–Ї—В–∞
	this.object.animation_x(currentPoint.x);
	this.object.animation_y(currentPoint.y);
	this.object.animation_rotation(currentPoint.rotation);
	this.object.animation_scaleX(currentPoint.scale);
	this.object.animation_scaleY(currentPoint.scale);
	this.object.animation_alpha(currentPoint.alpha);
	//  –?–Ј–Љ–µ–љ—П–µ–Љ —Ж–≤–µ—В –Њ–±—К–µ–Ї—В–∞
	if(this.class.isPaint!=undefined){
		if(this.class.isPaint){
			this.object.animation_fill("rgba("+currentPoint.red+","+currentPoint.green+","+currentPoint.blue+ ","+currentPoint.alpha+")");
		};
	}  else{
		this.object.animation_fill("rgba("+currentPoint.red+","+currentPoint.green+","+currentPoint.blue+ ","+currentPoint.alpha+")");
	};
	//  –Х—Б–ї–Є –∞–љ–Є–Љ–∞—Ж–Є—П –Ј–∞—Ж–Є–Ї–ї–Є–љ–∞, —В–Њ —Б—В–∞–≤–Є–Љ –њ–µ—А–≤—Г—О —В–Њ—З–Ї—Г –њ—А–Њ–Љ–µ–ґ—Г—В–Њ—З–љ–Њ–є –∞–љ–Є–Љ–∞—Ж–Є–Є –≤ –Ї–Њ–љ–µ—Ж –Љ–∞—Б—Б–Є–≤–∞, –Є–љ–∞—З–µ –Њ–љ–∞ –Њ—Б—В–∞–µ—В—Б—П —Г–і–∞–ї–µ–љ–љ–Њ–є
	if(this.cicling){
		this.arrayAnimationPoints.push(currentPoint);
	};
	if(currentPoint.label!=undefined){
		if(currentPoint.label!=""){
			this.isStopOnFrame = true;
			this.label = currentPoint.label;
			this.address = currentPoint.address;
		};
	};
};

//  –Я—А–Њ–≤–µ—А–Ї–∞ –љ–∞ –Ј–∞–≤–µ—А—И–µ–љ–Є–µ –∞–љ–Є–Љ–∞—Ж–Є–Є (–≤ —Б–ї—Г—З–∞–µ –µ—Б–ї–Є –Љ–∞—Б—Б–Є–≤ –њ—А–Њ–Љ–µ–ґ—Г—В–Њ—З–љ—Л—Е —В–Њ—З–µ–Ї –њ—Г—Б—В–Њ–є)
InteractiveTask.AnimationObject.prototype.isComplate = function(){
	return this.arrayAnimationPoints.length==0;
};
//  –Я—А–Њ–≤–µ—А–Ї–∞, –Љ–Њ–ґ–љ–Њ –ї–Є –Ј–∞–њ—Г—Б—В–Є—В—М –∞–љ–Є–Љ–∞—Ж–Є—О (–Є—Б—З–µ—А–њ–∞–љ –ї–Є –ї–Є–Љ–Є—В –Ј–∞–њ—А–Њ—Б–Њ–≤ –Ї –љ–µ–є)
InteractiveTask.AnimationObject.prototype.canGetObject = function(){
	if(this.address==0) return true;
	--this.address;
	return false;
};
//  –Я—А–Њ–≤–µ—А–Ї–∞ –∞–≤—В–Њ–Љ–∞—В–Є—З–µ—Б–Ї–Є –ї–Є –Ј–∞–њ—Г—Б–Ї–∞–µ—В—Б—П –∞–љ–Є–Љ–∞—Ж–Є—П
InteractiveTask.AnimationObject.prototype.isAutoPlay = function(){
	return this.label==undefined;
};



//  –Ч–∞–њ–Є—Б—М –Ї–ї—О—З–µ–≤—Л—Е —В–Њ—З–µ–Ї –≤ –Љ–∞—Б—Б–Є–≤ –њ—А–Њ–Љ–µ–ґ—Г—В–Њ—З–љ—Л—Е –∞–љ–Є–Љ–∞—Ж–Є–є
InteractiveTask.AnimationObject.prototype._addKeyPoint = function(index, r, g, b){
	this.arrayAnimationPoints.push({
		x:parseFloat(this.keyPoints[index]["-X"]),
		y:parseFloat(this.keyPoints[index]["-Y"]),
		rotation:parseFloat(this.keyPoints[index]["-rotation"]),
		scale:parseFloat(this.keyPoints[index]["-scale"]),
		alpha:parseFloat(this.keyPoints[index]["-alpha"]),
		block:(this.keyPoints[index]["-block"]=="true"),
		red:r,
		green:g,
		blue:b
	});
};

InteractiveTask.AnimationObject.prototype.moveToAnimationLayer = function(){
	this.zIndex = (this.object.remZIndex)?this.object.remZIndex:this.object.getZIndex();
	this.layer = this.object.getLayer();
	this.object.moveTo(InteractiveTask.ANIMATION_LAYER);
};

InteractiveTask.AnimationObject.prototype.moveToNativeLayer = function(){
	this.object.moveTo(this.layer);
	if(InteractiveTask.CONST.IS_SET_BACK){
		this.object.setZIndex(this.zIndex);
	};
};
InteractiveTask.AnimationObject.prototype.tryRemoveObject = function(){
	if(this.isRemoveObject){
		this.object.remove();
		return true;
	};
	return false;
};

/************************************************************************************************************************/
/************ –Ю–±—К–µ–Ї—В —Б–Њ–і–µ—А–ґ–∞—Й–Є–є –њ—А–Њ–Љ–µ–ґ—Г—В–Њ—З–љ—Л–µ —Б–Њ—Б—В–Њ—П–љ–Є—П —Б–ї–Њ–ґ–љ–Њ–є –∞–љ–Є–Љ–∞—Ж–Є–Є –Є–Ј –Ї–∞—А—В–Є–љ–Њ–Ї ************************************/
/************************************************************************************************************************/
/**
 * @param options —Б–ї–Њ–ґ–љ—Л–є –Њ–±—К–µ–Ї—В:
 *      - xml - –Ї–Њ–љ—Д–Є–≥ –∞–љ–Є–Љ–∞—Ж–Є–Є
 *      - class - —А–Њ–і–Є—В–µ–ї—М—Б–Ї–Є–є –Ї–ї–∞—Б—Б –∞–љ–Є–Љ–Є—А—Г–µ–Љ–Њ–≥–Њ –Њ–±—К–µ–Ї—В–∞  ???? - –љ–∞–≤–µ—А–љ–Њ–µ –љ–µ –љ—Г–ґ–µ–љ
 *      - object - –∞–љ–Є–Љ–Є—А—Г–µ–Љ—Л–є –Њ—О—К–µ–Ї—В (Konva.Sprite)
 * @constructor
 */
InteractiveTask.AnimationSprite = function(options){
	//alert("create Animation object");
	this.xml = options.xml;
	this.class = options.class;
	this.object = options.object;
	this.layer;


	this.isPointsPrepared = false;
	this.isStopOnFrame = false;

	this.zIndex = 0;

	this.parseXML();
};

InteractiveTask.AnimationSprite.prototype.parseXML = function(){
	InteractiveTask.log("[Player Animation] - xml -", this.xml);
	//  –Ч–∞–њ–Њ–Љ–Є–љ–∞–µ–Љ –≤—А–µ–Љ—П —З–µ—А–µ–Ј –Ї–Њ—В–Њ—А–Њ–µ –љ–µ–Њ–±—Е–Њ–і–Є–Љ–Њ —Б—В–∞—А—В–Њ–≤–∞—В—М –∞–љ–Є–Љ–∞—Ж–Є—О
	this.startFrom = parseFloat(this.xml["-startTime"]);
	//  –Ч–∞—Ж–Є–Ї–ї–Є–≤–∞—В—М –Є–ї–Є –љ–µ—В –∞–љ–Є–Љ–∞—Ж–Є—О
	this.cicling = (this.xml["-cicling"] == "true");
	//  –£–і–∞–ї—П—В—М –ї–Є –Њ–±—К–µ–Ї—В –њ–Њ –Ј–∞–≤–µ—А—И–µ–љ–Є–Є –∞–љ–Є–Љ–∞—Ж–Є–Є
	this.isRemoveObject = (this.xml["-removeObject"] == "true");
	//  –£—Б—В–∞–љ–∞–≤–ї–Є–≤–∞–µ–Љ —З–Є—Б–ї–Њ –Ј–∞–њ—А–Њ—Б–Њ–≤ –і–Њ –Ј–∞–њ—Г—Б–Ї–∞ –∞–љ–Є–Љ–∞—Ж–Є–Є
	if(this.xml["-address"]!="") this.address = parseInt(this.xml["-address"]);
	//  –Ю–њ—А–µ–і–µ–ї—П–µ–Љ –љ–µ–Њ–±—Е–Њ–і–Є–Љ –ї–Є –Љ–љ–Њ–ґ–µ—Б—В–≤–µ–љ–љ—Л–є –Ј–∞–њ—Г—Б–Ї –∞–љ–Є–Љ–∞—Ж–Є–Є
	this.multiple = (this.xml["-multiple"]=="true");
	//  –Љ–µ—В–Ї–∞ –і–ї—П –Ј–∞–њ—Г—Б–Ї–∞ –∞–љ–Є–Љ–∞—Ж–Є–Є
	this.label = this.xml["-label"];
	//  –?–Љ—П —В–µ–Ї—Г—Й–µ–є –∞–љ–Є–Љ–∞—Ж–Є–Є  animation : 'standing'
	this.animationName = this.xml["-name"];
	InteractiveTask.log("[Player Animation] - this.address -", this.address);

};
InteractiveTask.AnimationSprite.prototype.middlePointsAnimation = function(){
	var animObjectArrays = this.object.animations();
	this.animationsArray = new Object();
	for(var node in animObjectArrays){
		this.animationsArray[node] = new Object();
		this.animationsArray[node]["name"] = node;
		this.animationsArray[node]["points"] = animObjectArrays[node];
		this.animationsArray[node]["numPoints"] = animObjectArrays[node].length/4;
		this.animationsArray[node]["currentPoint"] = 0;
	};
};
InteractiveTask.AnimationSprite.prototype.gotoNextPoint = function(){
	++this.animationsArray[this.animationName]["currentPoint"];
	var currentPoint = this.animationsArray[this.animationName]["currentPoint"];
	if(currentPoint==this.animationsArray[this.animationName]["numPoints"]){
		if(this.cicling){
			currentPoint = this.animationsArray[this.animationName]["currentPoint"] = 0;
		}else{
			if(this.class.complateAnimation){
				this.class.complateAnimation();
			};
			return;
		};
	};
	this.object.frameIndex(currentPoint);
};
InteractiveTask.AnimationSprite.prototype.isComplate = function(){
	return this.animationsArray[this.animationName]["currentPoint"] == this.animationsArray[this.animationName]["numPoints"];
};
InteractiveTask.AnimationSprite.prototype.canGetObject = function(){
	if(this.address==0) return true;
	--this.address;
	return false;
};
InteractiveTask.AnimationSprite.prototype.isAutoPlay = function(){
	return this.label==undefined;
};
InteractiveTask.AnimationSprite.prototype.moveToAnimationLayer = function(){
	this.zIndex = (this.object.remZIndex)?this.object.remZIndex:this.object.getZIndex();
	this.layer = this.object.getLayer();
	this.object.moveTo(InteractiveTask.ANIMATION_LAYER);
};

InteractiveTask.AnimationSprite.prototype.moveToNativeLayer = function(){
	this.object.moveTo(this.layer);
	if(InteractiveTask.CONST.IS_SET_BACK){
		this.object.setZIndex(this.zIndex);
	};
};
InteractiveTask.AnimationSprite.prototype.tryRemoveObject = function(){
	if(this.isRemoveObject){
		this.object.remove();
		return true;
	};
	return false;
};
/**
 * Created with IntelliJ IDEA.
 * User: Yurchik
 * Date: 23.05.15
 * Time: 18:16
 * To change this template use File | Settings | File Templates.
 */
InteractiveTask.Events = function(){};
InteractiveTask.Events.prototype.INIT_PLAYER_ERROR = 1;
InteractiveTask.Events.prototype.INIT_PLAYER_SUCCESS = 2;
InteractiveTask.Events.prototype.TASK_COMPLATE = 3;
InteractiveTask.Events.prototype.TEST_START = 4;
InteractiveTask.Events.prototype.TEST_SUCCESS_COMPLATE = 5;
InteractiveTask.Events.prototype.TEST_FAIL_COMPLATE = 6;

InteractiveTask.Events.prototype.INIT_PROGRESS_ERROR = 7;

InteractiveTask.Events.prototype.MOUSE_OVER_OUT_BUTTON = 8;
InteractiveTask.Events.prototype.FULL_SCREEN_CHANGE = 9;

InteractiveTask.Events.prototype.CURRENT_TASK_COMPLATE = 10;

/*Inner events*/
InteractiveTask.Events.prototype.TASK_SUCCESS_COMPLATE = 101;
InteractiveTask.Events.prototype.TASK_MISSTAKE_MNIMOE = 102;
InteractiveTask.Events.prototype.TASK_MISSTAKE = 103;
InteractiveTask.Events.prototype.TASK_DONT_KNOW = 104;
InteractiveTask.Events.prototype.TASK_UNDERSTAND = 105;
InteractiveTask.Events.prototype.TASK_RESTART = 106;
InteractiveTask.Events.prototype.TASK_DOUBLE_MISSTAKE = 107;


/**
 * Created with IntelliJ IDEA.
 * User: Yurchik
 * Date: 23.05.15
 * Time: 19:26
 * To change this template use File | Settings | File Templates.
 */
InteractiveTask.TestChangeFrame = function(width, height, controller){
	this.width = width;
	this.height = height;

	this.successFrame = new Konva.Group();
	this.failFrame = new Konva.Group();
	this.waitFrame = new Konva.Group();

	this.controller = controller;

	var successBackground = new Konva.Rect({
		width : this.width,
		height : this.height,
		fill : InteractiveTask.formatColorFlashToCanvasRGBA("0x999999", 0.2),
		stroke : InteractiveTask.formatColorFlashToCanvasRGBA("0x666666", 0),
		strokeWidth : 1
	});

	var failBackground = new Konva.Rect({
		width : this.width,
		height : this.height,
		fill : InteractiveTask.formatColorFlashToCanvasRGBA("0x999999", 0.2),
		stroke : InteractiveTask.formatColorFlashToCanvasRGBA("0x666666", 0),
		strokeWidth : 1
	});

	var waitBackground = new Konva.Rect({
		width : this.width,
		height : this.height,
		fill : InteractiveTask.formatColorFlashToCanvasRGBA("0xBBBBBB", 1),
		stroke : InteractiveTask.formatColorFlashToCanvasRGBA("0x666666", 1),
		strokeWidth : 1
	});

	var successImage = new Konva.Image({
		image : InteractiveTask.LIBRARY.getButton(InteractiveTask.CONST.GOOD_FRAME)
	});
	var failImage = new Konva.Image({
		image : InteractiveTask.LIBRARY.getButton(InteractiveTask.CONST.BAD_FRAME)
	});
	this.waitSprite = new Konva.Sprite({
		x : 0,
		y : 0,
		image : InteractiveTask.LIBRARY.getButton(InteractiveTask.CONST.WAIT_FRAME),
		animation : 'standing',
		animations : {
			standing: InteractiveTask.CONST.WAIT_FRAME_POSITION
		},
		frameRate :10,
		frameIndex : 0
	});

	this.successFrame.add(successBackground);
	this.successFrame.add(successImage);
	successImage.x((this.width-successImage.width())/2);
	successImage.y((this.height-successImage.height())/2);

	this.failFrame.add(failBackground);
	this.failFrame.add(failImage);
	failImage.x((this.width-failImage.width())/2);
	failImage.y((this.height-failImage.height())/2);

	this.waitFrame.add(waitBackground);
	this.waitFrame.add(this.waitSprite);
	this.waitSprite.x((this.width-InteractiveTask.CONST.WAIT_FRAME_POSITION[2])/2);
	this.waitSprite.y((this.height-InteractiveTask.CONST.WAIT_FRAME_POSITION[3])/2);

	this.isWait = false;
	this.isSuccess = false;
	this.isFail = false;
	//this.layer = new Konva.Layer();
};
InteractiveTask.TestChangeFrame.prototype.setFscreenButton = function(value){
	this.button = value;
};

InteractiveTask.TestChangeFrame.prototype.success = function(){
	this.isSuccess = true;
	this._addFrame(this.successFrame);
	var self = this.controller;
	this.successFrame.on("mousedown touchstart", function(){
		InteractiveTask.AUDIO.clear();
		this.off("mousedown touchstart");
		self.startCurrentTask();
	});
};
InteractiveTask.TestChangeFrame.prototype.fail = function(){
	this.isFail = true;
	this._addFrame(this.failFrame);
	var self = this.controller;
	this.failFrame.on("mousedown touchstart", function(){
		InteractiveTask.AUDIO.clear();
		this.off("mousedown touchstart");
		self.startCurrentTask();
	});
};
InteractiveTask.TestChangeFrame.prototype.wait = function(){
	this.isWait = true;
	this._addFrame(this.waitFrame);
	this.waitSprite.start();
};
InteractiveTask.TestChangeFrame.prototype._addFrame = function(object){
	InteractiveTask.BUTTONS_LAYER.add(object);
	if(this.button)this.button.moveToTop();
	InteractiveTask.BUTTONS_LAYER.batchDraw();
};

InteractiveTask.TestChangeFrame.prototype.close = function(){
	if(this.isSuccess){
		this.successFrame.off("mousedown touchstart");
		this.successFrame.remove();
		this.isSuccess = false;
	};
	if(this.isFail){
		this.failFrame.off("mousedown touchstart");
		this.failFrame.remove();
		this.isFail = false;
	};
	if(this.isWait){
		this.waitSprite.stop();
		this.waitFrame.remove();
		this.isWait = false;
	};
	InteractiveTask.BUTTONS_LAYER.batchDraw();
	//this.layer.remove();
};

InteractiveTask.TestChangeFrame.prototype.clear = function(){
	InteractiveTask.disposeObject(this);
};


InteractiveTask.StartFrame = function(player){
	var background = new Konva.Rect({
		width : InteractiveTask.STAGE.width(),
		height : InteractiveTask.STAGE.height(),
		fill : InteractiveTask.formatColorFlashToCanvasRGBA(InteractiveTask.CONST.PLAY_BACKGROUND_COLOR, InteractiveTask.CONST.PLAY_BACKGROUND_ALPHA),
		stroke : InteractiveTask.formatColorFlashToCanvasRGBA("0x666666", 0),
		strokeWidth : 1
	});
	InteractiveTask.BUTTONS_LAYER.add(background);
	var button;
	var image = new Image();
	image.onload = function(){
		this.runFunction = function(id){

			InteractiveTask.BUTTONS_LAYER.clear();
			InteractiveTask.BUTTONS_LAYER.destroyChildren();
			InteractiveTask.disposeObject(button);
			button = null;
			image = null;
			InteractiveTask.BUTTONS_LAYER.batchDraw();

			player.startFillLibrary();
		};
		this.eventFunction = function(a ,b){

		}
		button = new InteractiveTask.OneButton({
			x : (InteractiveTask.STAGE.width() - InteractiveTask.CONST.PLAY_BUTTON_POSITION[2])/2,
			y : (InteractiveTask.STAGE.height() - InteractiveTask.CONST.PLAY_BUTTON_POSITION[3])/2,
			width : InteractiveTask.CONST.PLAY_BUTTON_POSITION[2],
			height : InteractiveTask.CONST.PLAY_BUTTON_POSITION[3],
			image : image,
			butPosition : InteractiveTask.CONST.PLAY_BUTTON_POSITION,
			layer : InteractiveTask.BUTTONS_LAYER,
			controller : this,
			runFuncName : 1,
			hintText : "Start task",
			hintPD : "down"
		});

		player.resizePlayer();
		InteractiveTask.BUTTONS_LAYER.batchDraw();
	};
	//trace(InteractiveTask.CONST.PRELOADER_IMAGE);
	try{
		//image.src = "http://kidnet.ru/sites/default/files/TaskPlayer/Images/load.png";
		image.src = InteractiveTask.CONST.STANDARD_IMAGES_PATH + InteractiveTask.CONST.PLAY_BUTTON_LINK;
	}catch(error){
		InteractiveTask.log("Load start button error = ", error);
	};
	/*
	 InteractiveTask.BUTTONS_LAYER.add(button);

	 button.on("mousedown touchstart", function(){
	 this.off("mousedown touchstart");
	 this.remove();
	 InteractiveTask.BUTTONS_LAYER.batchDraw();
	 player.startFillLibrary();
	 });

	 InteractiveTask.BUTTONS_LAYER.batchDraw();    */
};
/**
 * Created with IntelliJ IDEA.
 * User: Yurchik
 * Date: 14.06.15
 * Time: 13:53
 * To change this template use File | Settings | File Templates.
 */
InteractiveTask.Health = function(options){
	this.xml = options.xml;
	this.controller = options.controller;

	this.totalHealth = 0;
	this.currentHealth = 0;

	this.isMnimoe = (this.xml.MNIMOE == "true");
	this.isTest = this.controller.isTest();
	this.isFirstLevel = (this.xml["-level"] == "1");

	this.layer = InteractiveTask.BUTTONS_LAYER;
	this.healthes = new Array();
};
InteractiveTask.Health.prototype.isInitHealth = function(){
	if(this.xml.MISSTAKE_COUNTER==undefined){
		this.xml.MISSTAKE_COUNTER = 2;
	};
	if(this.xml.CURRENT_HEALTH==undefined){
		this.updateCurrentHealth();
	};

	if(this.xml.CURRENT_HEALTH == 0){
		if(this.isTest){
			this.controller.misstake();
			return false;
		}else{
			this.updateCurrentHealth();
		};
	};
	this.totalHealth = parseInt(this.xml.HEALTH);
	this.currentHealth = this.xml.CURRENT_HEALTH;
	if(this.currentHealth>this.totalHealth || this.currentHealth<=0){
		this.controller.misstake();
		return false;
	};
	return true;
};
InteractiveTask.Health.prototype.setTimer = function(timer){
	this.timer = timer;
};

InteractiveTask.Health.prototype.start = function(){
	var i,
		x, y, image, position;
	image = InteractiveTask.LIBRARY.getButton(InteractiveTask.CONST.HEALTH);
	position = InteractiveTask.CONST.HEALTH_POSITION;
	for(i=0;i<this.totalHealth;i++){
		x = InteractiveTask.CONST.HEALTH_START_X + i*(InteractiveTask.CONST.HEALTH_WIDTH+InteractiveTask.CONST.HEALTH_DELTA_X);
		y = InteractiveTask.CONST.HEALTH_START_Y;
		this.healthes[i] = new Konva.Sprite({
			x : x,
			y : y,
			image : image,
			animation : 'standing',
			animations : {
				standing: position
			},
			frameRate :10,
			frameIndex : 0
		});
		this.layer.add(this.healthes[i]);
	};
	for(i=0;i<(this.totalHealth - this.currentHealth);i++){
		this.healthes[this.totalHealth - (i+1)].frameIndex(1);
	};

	this.layer.batchDraw();
};

InteractiveTask.Health.prototype.makeMisstake = function(){
	--this.currentHealth;
	this.xml.CURRENT_HEALTH = this.currentHealth;
	var i;
	for(i=0;i<(this.totalHealth - this.currentHealth);i++){
		this.healthes[this.totalHealth - (i+1)].frameIndex(1);
	};
	this.layer.batchDraw();
	if(this.currentHealth == 0){
		if(this.isTest){
			this.controller.misstake();
		}else{
			if(this.isFirstLevel){
				--this.xml.MISSTAKE_COUNTER;
				if(this.timer != undefined){
					this.timer.updateBackTimer();
				};
				if(this.xml.MISSTAKE_COUNTER<=0){
					this.controller.doubleMisstake();
				}else{
					this.controller.misstake();
				};
			}else{
				this.controller.misstake();
			};
		};
	};
};

InteractiveTask.Health.prototype.getCurrentHealth = function(){
	return this.currentHealth;
};
InteractiveTask.Health.prototype.clear = function(){
	if(!this.layer) return;
	while(this.healthes.length>0){
		this.healthes[0].remove();
		this.healthes[0] = null;
		this.healthes.shift();
	};
	InteractiveTask.disposeObject(this);
};

InteractiveTask.Health.prototype.updateCurrentHealth = function(){
	var h = parseInt(this.xml.HEALTH);
	this.xml.CURRENT_HEALTH = h;
};
/**
 * Created with IntelliJ IDEA.
 * User: Yurchik
 * Date: 15.03.15
 * Time: 21:55
 * To change this template use File | Settings | File Templates.
 */
InteractiveTask.ImageLibrary = function(xml, controller, imagesPath){
	if(imagesPath) InteractiveTask.CONST.STANDARD_IMAGES_PATH = imagesPath;
	this.path = InteractiveTask.PATH;
	this.xml = xml;
	this.controller = controller;
	this.imagesName = new Array();
	this.images = new Array();
	this.audioLib = new Object();
};
InteractiveTask.ImageLibrary.prototype.findImages = function(){
	var task = InteractiveTask.getArrayObjectsByTag(this.xml, "TASK");
	var userTans, imageTans, shiftFields, swfObjects, fields, groupFields, groupUserTan, groupPictureTan, positioningFields;
	var i, j,l;
	var taskIndex, taskLength;
	taskLength = task.length;
	for(taskIndex=0;taskIndex<taskLength;taskIndex++){
		//InteractiveTask.log(task[taskIndex]);
		userTans = InteractiveTask.getArrayObjectsByTag(task[taskIndex].OBJECTS, "USERTAN");
		imageTans = InteractiveTask.getArrayObjectsByTag(task[taskIndex].OBJECTS, "PICTURETAN");
		shiftFields = InteractiveTask.getArrayObjectsByTag(task[taskIndex].OBJECTS, "SHIFTFIELD");
		swfObjects = InteractiveTask.getArrayObjectsByTag(task[taskIndex].OBJECTS, "SWFOBJECT");
		//InteractiveTask.log(imageTans);
		groupFields =  InteractiveTask.getArrayObjectsByTag(task[taskIndex].OBJECTS, "GROUPFIELD");
		positioningFields =  InteractiveTask.getArrayObjectsByTag(task[taskIndex].OBJECTS, "POSITIONING");
		groupUserTan = new Array();
		groupPictureTan = new Array();
		if(groupFields.length!=0){
			var sampTan;
			var i1,i2, l1,l2;
			var a,b;
			var elements;
			l1 = groupFields.length;
			for(i1=0;i1<l1;i1++){
				elements = InteractiveTask.getArrayObjectsByTag(groupFields[i1].CONTENT, "ELEMENT");
				for(a=0;a<elements.length;a++){
					sampTan = InteractiveTask.getArrayObjectsByTag(elements[a], "USERTAN");
					l2 = sampTan.length;
					for(i2=0;i2<l2; i2++){
						groupUserTan.push(sampTan[i2]);
					};
					sampTan = InteractiveTask.getArrayObjectsByTag(elements[a], "PICTURETAN");
					l2 = sampTan.length;
					for(i2=0;i2<l2; i2++){
						groupPictureTan.push(sampTan[i2]);
					};
				};


			};
			l = groupUserTan.length;
			for(i=0;i<l;i++){
				if(groupUserTan[i].IMAGE!=undefined) this.setImageName(groupUserTan[i].IMAGE["-name"]);
			};
			l = groupPictureTan.length;
			for(i=0;i<l;i++){
				if(groupPictureTan[i].IMAGE!=undefined) this.setImageName(groupPictureTan[i].IMAGE);
			};
		};



		l = userTans.length;
		for(i=0;i<l;i++){
			if(userTans[i].IMAGE!=undefined) this.setImageName(userTans[i].IMAGE["-name"]);
		};
		l = imageTans.length;
		for(i=0;i<l;i++){
			if(imageTans[i].IMAGE!=undefined) this.setImageName(imageTans[i].IMAGE);
		};
		l = shiftFields.length;
		for(i=0;i<l;i++){
			fields = InteractiveTask.getArrayObjectsByTag(shiftFields[i], "FIELD");
			for(j=0;j<fields.length;j++){
				if(fields[j].USERTAN!=undefined){
					if(fields[j].USERTAN.IMAGE!=undefined){
						this.setImageName(fields[j].USERTAN.IMAGE["-name"]);
					};
				};
				if(fields[j].PICTURETAN!=undefined){
					this.setImageName(fields[j].PICTURETAN.IMAGE);
				};
			};
		};
		l = swfObjects.length;
		for(i=0;i<l;i++){
			if(swfObjects[i].NAME == "Pazzle.swf"){
				this.setImageName(swfObjects[i].SETTINGS.PAZZLE.FILENAME);
			};
			if(swfObjects[i].NAME == "ListingImage.swf"){
				var listingFileNames = swfObjects[i].SETTINGS.LISTINGIMAGES.NAMESPACE.FILENAME;
				for (var indexList in listingFileNames) {
					this.setImageName(listingFileNames[indexList]['#text']);
				};
			};
		};
		l = positioningFields.length;
		for(i=0;i<l;i++){
			if(positioningFields[i].FILENAME1!=undefined){
				if(positioningFields[i].FILENAME1["-exists"]=='true'){
					this.setImageName(positioningFields[i].FILENAME1["#text"]);
				};
			};
			if(positioningFields[i].FILENAME2!=undefined){
				if(positioningFields[i].FILENAME2["-exists"]=='true'){
					this.setImageName(positioningFields[i].FILENAME2["#text"]);
				};
			};

			if(positioningFields[i].FILENAME3!=undefined){
				this.setImageName(positioningFields[i].FILENAME3);
			};
			if(positioningFields[i].FILENAME6!=undefined){
				if(positioningFields[i].FILENAME6["-exists"]=='true'){
					this.setImageName(positioningFields[i].FILENAME6["#text"]);
				};
			};
		};
		//   InteractiveTask.log(this.imagesName);


	};
	this.findAudio(task);
};
InteractiveTask.ImageLibrary.prototype.findAudio = function(task){
	var i,l;
	l = task.length;
	for(i=0;i<l;i++){
		if(task[i]["AUDIO"]){
			this._setNewAudio(this._getAudioName(task[i], "STARTAUDIO"));
			this._setNewAudio(this._getAudioName(task[i], "FAILAUDIO"));
			this._setNewAudio(this._getAudioName(task[i], "SUCCESSAUDIO"));
		};
	};
	//this.loadAudio();
	/*for(var node in this.audioLib){
	 InteractiveTask.log("[Player library] - has audio["+node+"]");
	 };*/
};
InteractiveTask.ImageLibrary.prototype._setNewAudio = function(name){
	if(name == "") return;
	this.setAudio(name, new Audio(InteractiveTask.PATH+"audio/"+name+".wav"));
};
InteractiveTask.ImageLibrary.prototype._getAudioName = function(task, part){
	var name = "";
	if(task["AUDIO"][part]){
		if(task["AUDIO"][part]["-isRun"]=="true"){
			if(task["AUDIO"][part]["#cdata-section"]!=undefined){
				if(task["AUDIO"][part]["#cdata-section"]!=""){
					if(task["AUDIO"][part]["#cdata-section"].indexOf(" ")==-1){
						name = task["AUDIO"][part]["#cdata-section"];
					}else{
						name = task["AUDIO"][part]["-id"];
					};
				}else{
					name = task["AUDIO"][part]["-id"];
				};
			}else{
				name = task["AUDIO"][part]["-id"];
			};
		};
	};
	return name;
};

InteractiveTask.ImageLibrary.prototype.startLoading = function(){
	//trace("start loading");
	var image = new Image();
	var self = this;
	image.onload = function(){
		self.loadLabelComplate(this);
	};
	//trace(InteractiveTask.CONST.PRELOADER_IMAGE);
	try{
		//image.src = "http://kidnet.ru/sites/default/files/TaskPlayer/Images/load.png";
		image.src = InteractiveTask.CONST.STANDARD_IMAGES_PATH + InteractiveTask.CONST.PRELOADER_IMAGE;
	}catch(error){
		InteractiveTask.log("Load mark error = ", error);
		image.src = InteractiveTask.CONST.STANDARD_IMAGES_PATH + InteractiveTask.CONST.MARK_IMAGE;
	};
};
InteractiveTask.ImageLibrary.prototype.loadLabelComplate = function(image){
	//trace("label loading complate");
	this.layer = InteractiveTask.COMPONENTS_LAYER;
	this.loadingLabel = new Konva.Sprite({
		x : (parseFloat(this.xml.WIDTH)-100)/2,
		y : (parseFloat(this.xml.HEIGHT)-100)/2,
		image : image,
		animation : 'standing',
		animations : {
			standing: [
				0, 0, 64, 64,
				64, 0, 64, 64,
				128, 0, 64, 64,
				192, 0, 64, 64,
				256, 0, 64, 64,
				320, 0, 64, 64,
				384, 0, 64, 64,
				448, 0, 64, 64,
			]
		},
		frameRate :10,
		frameIndex : 0
	});
	//InteractiveTask.log(image);
	//InteractiveTask.log(this.loadingLabel);

	this.layer.add(this.loadingLabel);
	this.layer.draw();
	this.controller.resizePlayer();
	this.loadingLabel.start();

	this.currentIndex = -1;
	this.buttons = new Array();
	this.loadButtons();
};

InteractiveTask.ImageLibrary.prototype.loadButtons = function(){
	++this.currentIndex;
	if(this.currentIndex == InteractiveTask.CONST.BUTTONS.length){
		this.currentIndex = -1;
		this.loadIteration();
		return;
	};
	var image = new Image();
	var self = this;
	image.onload = function(){
		self.buttonLoadComplate(this);
	};
	//trace(InteractiveTask.CONST.STANDARD_IMAGES_PATH + InteractiveTask.CONST.BUTTONS[this.currentIndex]);
	image.src = InteractiveTask.CONST.STANDARD_IMAGES_PATH + InteractiveTask.CONST.BUTTONS[this.currentIndex];

	// image.src = this.path + this.imagesName[this.currentIndex];
};
InteractiveTask.ImageLibrary.prototype.buttonLoadComplate = function(image){
	//InteractiveTask.log("load");
	this.buttons.push(image);
	this.loadButtons();
};

InteractiveTask.ImageLibrary.prototype.loadIteration = function(){
	++this.currentIndex;
	if(this.currentIndex == this.imagesName.length){

		//this.controller.libraryLoadComplate();
		this.dispatchComplate();
		return;
	};
	var image = new Image();
	var self = this;
	image.onload = function(){
		self.sampleLoadComplate(this);
	};
	image.src = this.path + this.imagesName[this.currentIndex];
};
InteractiveTask.ImageLibrary.prototype.sampleLoadComplate = function(image){
	//InteractiveTask.log("load");
	this.images.push({
		name : this.imagesName[this.currentIndex],
		image : image
	});
	this.loadIteration();
};


InteractiveTask.ImageLibrary.prototype.setImageName = function(name){
	var i,l;
	l = this.imagesName.length;
	for(i=0;i<l;i++){
		if(name == this.imagesName[i]) return;
	};
	this.imagesName.push(name);
};
InteractiveTask.ImageLibrary.prototype.getImage = function(name){
	var i,l;
	l = this.images.length;
	for(i=0;i<l;i++){
		if(name == this.images[i].name){
			return this.images[i].image;
		};
	};
	return null;
};

InteractiveTask.ImageLibrary.prototype.dispatchComplate = function(){
	if(!this.hasAudio()){
		this.loadingLabel.stop();
		this.loadingLabel.remove();
		this.loadingLabel = null;
		this.layer.clear();
		this.layer.destroyChildren();

		this.layer = null;
		this.controller.libraryLoadComplate();
		return;
	};
	if(this.isAudioLoaded()){
		this.loadingLabel.stop();
		this.loadingLabel.remove();
		this.loadingLabel = null;
		this.layer.clear();
		this.layer.destroyChildren();

		this.layer = null;
		this.controller.libraryLoadComplate();
	}else{
		var self = this;
		setTimeout(function(){self.dispatchComplate()}, 1000);
	};
};

InteractiveTask.ImageLibrary.prototype.printImages = function(){
	//InteractiveTask.log("print images");
	for(var s in this.images){
		InteractiveTask.log(s, " : ", this.images[s]);
	};
};

InteractiveTask.ImageLibrary.prototype.getButton = function(type){
	if(type-1<this.buttons.length) {
		return this.buttons[type-1];
	};
	return new Image();
};
InteractiveTask.ImageLibrary.prototype.setAudio = function(name, audio){
	if(!this.audioLib[name]){
		this.audioLib[name] = new Object();
		this.audioLib[name]["audio"] = audio;
		this.audioLib[name]["isLoaded"] = false;
		this.audioLib[name]["name"] = name;
	};
};
InteractiveTask.ImageLibrary.prototype.getAudio = function(name){
	if(!this.audioLib[name]){
		return null;
	};
	if(!this.audioLib[name]["isLoaded"]){
		return null;
	};
	return this.audioLib[name]["audio"];
};
InteractiveTask.ImageLibrary.prototype.loadAudio = function(){
	for(var node in this.audioLib){
		this.audioLib[node]["audio"].addEventListener('loadeddata', function(event){
			InteractiveTask.log("[Player library] - Audio load, name = " + event.target.parent["name"]);
			event.target.parent["isLoaded"] = true;
			event.target.parent = null;
		}, false);
		this.audioLib[node]["audio"].parent = this.audioLib[node];
		this.audioLib[node]["audio"].load();
	};
};
InteractiveTask.ImageLibrary.prototype.hasAudio = function(){
	for(var node in this.audioLib){
		return true;
	};
	return false;
};
InteractiveTask.ImageLibrary.prototype.isAudioLoaded = function(){
	for(var node in this.audioLib){
		if(!this.audioLib[node]["isLoaded"]){
			return false;
		};
	};
	return true;
};



InteractiveTask.ImageLibrary.prototype.clear = function(){
	while(this.images.length>0){
		this.images[0].name = null;
		this.images[0].image = null;
		this.images.shift();
	};
	for(var node in this.audioLib){
		InteractiveTask.disposeObject(this.audioLib[node]);
	};
	InteractiveTask.disposeObject(this.audioLib);
	this.audioLib = null;
};




/**
 * Created with IntelliJ IDEA.
 * User: Yurchik
 * Date: 17.06.15
 * Time: 9:40
 * To change this template use File | Settings | File Templates.
 */
InteractiveTask.TestProgress = function(options){
	this.xml = options.xml;
	this.contID = options.containerID;
	this.width = InteractiveTask.STAGE.width();
	this.height = InteractiveTask.CONST.TEST_PROGRESS_HEIGHT;
	this.progressStage = new Konva.Stage({
		container : this.contID,
		width: this.width,
		height: this.height
	});
	this.layer = new Konva.Layer();
	var tasksArray = InteractiveTask.getArrayObjectsByTag(this.xml, "TASK");
	this.equalsArray = new Array();
	var i,l;
	var counterPoints = 0;
	l =  tasksArray.length;
	if(this.xml.TEST == "true"){
		for(i=0;i<l;i++){
			if(tasksArray[i].MNIMOE != "true"){
				++counterPoints;
				this.addPoint(tasksArray[i]["-id"], counterPoints);
			};
		};
	}else{
		for(i=0;i<l;i++){
			if(tasksArray[i].MNIMOE != "true" && tasksArray[i]["-level"] == "1"){
				++counterPoints;
				this.addPoint(tasksArray[i]["-id"], counterPoints);
			};
		};
	};

	this.deltaX = (((InteractiveTask.CONST.TEST_PROGRESS_WIDTH + InteractiveTask.CONST.TEST_PROGRESS_DELTA_X)*counterPoints) - this.width);
	if(this.deltaX>0){
		this.deltaX = this.deltaX/counterPoints;
	}else{
		this.deltaX = 0;
	};

	InteractiveTask.log("this.deltaX = " + this.deltaX);
	this.progressStage.add(this.layer);
};

InteractiveTask.TestProgress.prototype.addPoint = function(taskID, pointID){
	var id = this.equalsArray.length;
	var currentPoint = new InteractiveTask.TestProgressPoint({
		number : pointID,
		x :  (pointID-1) * (InteractiveTask.CONST.TEST_PROGRESS_WIDTH + InteractiveTask.CONST.TEST_PROGRESS_DELTA_X),
		y : 0
	});
	this.equalsArray[id] = {
		taskID : taskID,
		progressPointID : pointID,
		point : currentPoint
	};
	this.layer.add(this.equalsArray[id].point.getPoint());
};
InteractiveTask.TestProgress.prototype.scale = function(size){
	this.progressStage.scaleX(size);
	this.progressStage.scaleY(size);
	this.progressStage.width(this.width*size);
	this.progressStage.height(this.height*size);
};

InteractiveTask.TestProgress.prototype.select = function(taskID){
	var i, l,num, pos;
	l = this.equalsArray.length;
	for(i=0;i<l;i++){
		if(taskID == this.equalsArray[i].taskID){
			this.equalsArray[i].point.select();
			num = (i>((l-1)/2))?(i+1):(i);
			pos = ((-1)*this.deltaX) * num;
			InteractiveTask.log("num = " + num);
			InteractiveTask.log("new position = " + pos);

			this.layer.x(pos);
			this.layer.batchDraw();
			return;
		};
	};
};
InteractiveTask.TestProgress.prototype.setComplate = function(taskID, flag){
	var i,l;
	l = this.equalsArray.length;
	for(i=0;i<l;i++){
		if(taskID == this.equalsArray[i].taskID){
			if(flag){
				this.equalsArray[i].point.setTrue();
			}else{
				this.equalsArray[i].point.setFalse();
			};
			this.layer.batchDraw();
			return;
		};
	};
};

InteractiveTask.TestProgress.prototype.clear = function(){
	while(this.equalsArray.length>0){
		InteractiveTask.disposeObject(this.equalsArray[0].point);
		this.equalsArray[0] = null;
		this.equalsArray.shift();
	};
	this.progressStage.destroyChildren();
	InteractiveTask.disposeObject(this);
};



InteractiveTask.TestProgressPoint = function(options){
	this.number = options.number;
	this.group = new Konva.Group({
		x : options.x,
		y : options.y
	});

	this.point = new Konva.Sprite({
		x : 0,
		y : 0,
		image : InteractiveTask.LIBRARY.getButton(InteractiveTask.CONST.TEST_PROGRESS),
		animation : 'standing',
		animations : {
			standing: InteractiveTask.CONST.PROGRESS_POSITION
		},
		frameRate :10,
		frameIndex : InteractiveTask.CONST.PROGRESS_POINT_DEFAULT_POSITION
	});
	this.text = new Konva.Text({
		x : 0,
		y : 0,
		text : this.number,
		fontSize : 14,
		fontStyle : 'bold',
		fontFamily : 'Verdana',
		fill : 'black',
		align : 'center'
	});
	this.group.add(this.point);
	this.group.add(this.text);
	var tX = ((InteractiveTask.CONST.TEST_PROGRESS_WIDTH - this.text.width())/ 2) - 1,
		tY = (InteractiveTask.CONST.TEST_PROGRESS_HEIGHT - this.text.height())/ 2;
	this.text.x(tX);
	this.text.y(tY);
};

InteractiveTask.TestProgressPoint.prototype.getPoint = function(){
	return this.group;
};
InteractiveTask.TestProgressPoint.prototype.select = function(){
	this.point.frameIndex(InteractiveTask.CONST.PROGRESS_POINT_CURRENT_POSITION);
};
InteractiveTask.TestProgressPoint.prototype.setTrue = function(){
	this.point.frameIndex(InteractiveTask.CONST.PROGRESS_POINT_SUCCESS_POSITION);
};
InteractiveTask.TestProgressPoint.prototype.setFalse = function(){
	this.point.frameIndex(InteractiveTask.CONST.PROGRESS_POINT_FAIL_POSITION);
};

/**
 * Created with IntelliJ IDEA.
 * User: Yurchik
 * Date: 14.06.15
 * Time: 8:48
 * To change this template use File | Settings | File Templates.
 */

// controller - main player
InteractiveTask.Timer = function(options){
	this.xml = options.xml;
	this.controller = options.controller;

	/*init object variables*/
	this.currentTime = 0;
	this.interval = null;

	this.isMnimoe = (this.xml.MNIMOE == "true");
	this.isTest = this.controller.isTest();
	this.isFirstLevel = (this.xml["-level"] == "1");

	this.field = null;
	this.layer = null;
};

InteractiveTask.Timer.prototype.isInitTimer = function(){
	if(this.xml.MISSTAKE_COUNTER==undefined){
		this.xml.MISSTAKE_COUNTER = 2;
	};
	if(this.xml.BACK_TIMER==undefined){
		this.updateBackTimer();
	};
	if(this.xml.BACK_TIMER == 0){
		if(this.isTest){
			this.controller.misstake();
			return false;
		}else{
			this.updateBackTimer();
		};
	};
	this.currentTime = this.xml.BACK_TIMER;
	return true;
};
InteractiveTask.Timer.prototype.setHealth = function(health){
	this.health = health;
};

InteractiveTask.Timer.prototype.start = function(){
	//var totalTimer = parseInt(this.xml.TIMER.substr(0,2))*60 +  parseInt(this.xml.TIMER.substr(3,2));
	this.field = new Konva.Text({
		x: 10,
		y: InteractiveTask.STAGE.height() - 30,
		fontSize: 30,
		fontFamily: 'Calibri',
		fill: 'green'
	});
	this.layer = InteractiveTask.BUTTONS_LAYER;
	this.layer.add(this.field);
	//InteractiveTask.STAGE.add(this.layer);
	this.currentSeconds = 0;
	this.currentMinutes = 0;
	this.resume();
};


InteractiveTask.Timer.prototype.tick = function(){
	this.currentMinutes = Math.floor(this.currentTime / 60);
	this.currentSeconds = this.currentTime % 60;
	if(this.currentMinutes <= 9) this.currentMinutes = "0" + this.currentMinutes;
	if(this.currentSeconds <= 9) this.currentSeconds = "0" + this.currentSeconds;
	if(this.currentTime<=10) this.field.fill('red');
	this.currentTime--;
	this.xml.BACK_TIMER = this.currentTime;
	this.field.text(this.currentMinutes + ":" + this.currentSeconds); //Set the element id you need the time put into.
	this.layer.draw();
	if(this.currentTime <= -1) {
		this.timeIsOver();
	};
};
InteractiveTask.Timer.prototype.timeIsOver = function(){
	this.xml.BACK_TIMER = 0;
	//this.xml.TIMER_COUNTER = 0;
	if(this.isTest){
		this.controller.misstake();
	}else{
		if(this.isFirstLevel){
			--this.xml.MISSTAKE_COUNTER;
			if(this.health!=undefined){
				this.health.updateCurrentHealth();
			};
			if(this.xml.MISSTAKE_COUNTER<=0){
				this.controller.doubleMisstake();
			}else{
				this.controller.misstake();
			};
		}else{
			this.controller.misstake();
		};
	};
};

InteractiveTask.Timer.prototype.stop = function(){
	clearInterval(this.interval);
};
InteractiveTask.Timer.prototype.resume = function(){
	var self = this;
	this.interval = setInterval(function(){self.tick();},1000);
};

InteractiveTask.Timer.prototype.getCurrentTime = function(){
	return this.currentTime;
};
InteractiveTask.Timer.prototype.clear = function(){
	if(!this.layer) return;
	this.field.remove();
	InteractiveTask.disposeObject(this);
};



InteractiveTask.Timer.prototype.updateBackTimer = function(){
	var time = this.getTimeFromString(this.xml.TIMER);
	this.xml.BACK_TIMER = time;
};
InteractiveTask.Timer.prototype.getTimeFromString = function(str){
	//return parseInt(str.substr(0,2))*60 +  parseInt(str.substr(3,2));
	return InteractiveTask.getTimeByString(str);
};/**
 * Created with IntelliJ IDEA.
 * User: Yurchik
 * Date: 01.03.15
 * Time: 12:19
 * To change this template use File | Settings | File Templates.
 */
/*////////////////////////////////////////////////////////////////////////////////////////////*/
/*||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||*/
/*|||||||||||||||||||||||||||||||||||||||||| UTILS |||||||||||||||||||||||||||||||||||||||||||*/
/*||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||*/
/*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/

InteractiveTask.formatColor = function(color, alpha){
	var fillColor = parseInt(color).toString(16);
	fillColor = InteractiveTask.getFullColor(fillColor);
	var red = parseInt(fillColor.substr(0,2), 16);
	var green = parseInt(fillColor.substr(2,2), 16);
	var blue = parseInt(fillColor.substr(4,2), 16);
	return "rgba("+red+","+green+","+blue+","+alpha+")";
};

InteractiveTask.formatColor16 = function(color){
	var fillColor = parseInt(color).toString(16);
	fillColor = InteractiveTask.getFullColor(fillColor);
	fillColor = "#"+fillColor;
	return fillColor;
};
InteractiveTask.formatColorFlashToCanvasRGBA = function(color, alpha){
	color = InteractiveTask.formatColorFlashToCanvas(color);
	var red = parseInt(color.substr(1,2), 16);
	var green = parseInt(color.substr(3,2), 16);
	var blue = parseInt(color.substr(5,2), 16);
	return "rgba("+red+","+green+","+blue+","+alpha+")";
};
InteractiveTask.formatColorFlashToCanvas = function(color){
	color = color.substring(color.indexOf("x")+1, color.length);
	color = InteractiveTask.getFullColor(color);
	return "#"+color;
};
InteractiveTask.getFullColor = function(color){
	while(color.length<6){
		color = "0"+color;
	};
	return color;
};
InteractiveTask.getRed = function(color){
	return InteractiveTask.getSpectr("red", color);
};
InteractiveTask.getGreen = function(color){
	return InteractiveTask.getSpectr("green", color);
};
InteractiveTask.getBlue = function(color){
	return InteractiveTask.getSpectr("blue", color);
};
InteractiveTask.getSpectr = function(name, color){
	var startIndex = color.indexOf("(",0)+1;
	var endIndex = color.indexOf(")",0);
	var str = color.substring(startIndex, endIndex);
	var colores = str.split(",");
	//InteractiveTask.log("colores: ", colores[0] , "    " , colores[1] , "      " , colores[2]);
	switch (name){
		case "red":
			return parseInt(colores[0]);
		case "green":
			return parseInt(colores[1]);
		case "blue":
			return parseInt(colores[2]);
		default: return 0;
	};
	return 0;
};

InteractiveTask.getArrayObjectsByTag = function(xml, tag){
	var outArray = new Array();
	if(xml[tag]!=undefined){
		if(xml[tag][0]!=undefined){
			//InteractiveTask.log(xml[tag])
			outArray = xml[tag];
		}else{
			outArray[0] = xml[tag];
		};
	};
	return outArray;
};

InteractiveTask.getCorrectText = function(text){
	var i,l;
	l = text.length;
	var str = "";
	for(i=0;i<l;i++){
		if(text.charCodeAt(i)==13){
			str = str + "\n";
		}else{
			str = str + text[i];
		};
	};
	return str;
};

InteractiveTask.getRandomIndexesTo = function(num){
	var outArray = new Array();
	var i,current;
	var flag = false;
	while(outArray.length<num){
		current = Math.round(Math.random()*(num-1));
		flag = true;
		for(i=0;i<outArray.length;i++){
			if(current == outArray[i]){
				flag = false;
				break;
			};
		};
		if(flag) outArray.push(current);
	};
	flag = true;
	for(i=0;i<outArray.length;i++){
		if(outArray[i]!=i){
			flag = false;
		};
	};
	if(flag){
		var rem = outArray[0];
		outArray[0] = outArray[outArray.length-1];
		outArray[outArray.length-1] = rem;
	};
	return outArray;
};


InteractiveTask.getIDLessons = function(xml){
	var tags = ["USERTAN", "CHECKBOX", "PICTURETAN", "SHIFTFIELD", "POINTDRAW"];
	var tasksXml =  InteractiveTask.getArrayObjectsByTag(xml, "TASK");
	var out = new Array();
	var samples;
	var i,l;
	var j,k;
	var index, length;
	var o,p;
	var flag;
	l = tasksXml.length;
	for(i=0;i<l;i++){
		k = tags.length;
		for(j=0;j<k;j++){
			samples = InteractiveTask.getArrayObjectsByTag(tasksXml[i].OBJECTS, tags[j]);
			length = samples.length;
			for(index=0;index<length;index++){
				if(samples[index].LESSONLINK){
					if(samples[index].LESSONLINK["-isComplate"])continue;
					p = out.length;
					flag = true;
					for(o=0;o<p;o++){
						if(out[o].id == samples[index].LESSONLINK.lesson.id &&
							out[o].name == samples[index].LESSONLINK.lesson.name ) flag = false;
					};
					if(flag){
						out.push({
							id : samples[index].LESSONLINK.lesson.id,
							name : samples[index].LESSONLINK.lesson.name,
							comment : samples[index].LESSONLINK.lesson.comment
						});
					};
				};
			};
		};
	};
	return out;

};

InteractiveTask.isMobileBrowser = function(){
	var isMobile = {
		Android: function() {
			return navigator.userAgent.match(/Android/i);
		},
		BlackBerry: function() {
			return navigator.userAgent.match(/BlackBerry/i);
		},
		iOS: function() {
			return navigator.userAgent.match(/iPhone|iPad|iPod/i);
		},
		Opera: function() {
			return navigator.userAgent.match(/Opera Mini/i);
		},
		Windows: function() {
			return navigator.userAgent.match(/IEMobile/i);
		},
		any: function() {
			return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());
		}
	};
	return isMobile.any();
};


InteractiveTask.error = function(){
	InteractiveTask._printLog("error", arguments);
};
InteractiveTask.log = function (){
	InteractiveTask._printLog("log", arguments);
};
InteractiveTask.info = function (){
	InteractiveTask._printLog("info", arguments);
};
InteractiveTask.warn = function (){
	InteractiveTask._printLog("warn", arguments);
};
InteractiveTask._printLog = function (func, arguments){
	if(!InteractiveTask.CONST.IS_PRINT_LOG)	return;
	console[func]("[Player " + func + "] - ",
		(arguments[0])?arguments[0]:"",
		(arguments[1])?arguments[1]:"",
		(arguments[2])?arguments[2]:"",
		(arguments[3])?arguments[3]:"",
		(arguments[4])?arguments[4]:"",
		(arguments[5])?arguments[5]:"",
		(arguments[6])?arguments[6]:"",
		(arguments[7])?arguments[7]:"",
		(arguments[8])?arguments[8]:"",
		(arguments[9])?arguments[9]:""
	);
};

/**
 * функци€ дл€ установки вращени€ и перемещени€ танов (пользовательских и цветных)
 * @param self - объект тана который должен перемещатьс€
 * @param event - событие нажати€ на тан дл€ определени€ сенсорного событи€
 */
InteractiveTask.tansDragRotateInterface = function(self, event){
	if(self.startLabelMouseDown!=""){
		self.controller.runLabelAnimation(self.startLabelMouseDown);
		self.startLabelMouseDown = "";
	};
	if(event.evt.type == "touchstart"){
		if(self.touchStart) return;
		self.touchStart = true;
	};
	self.controller.select(self);
	InteractiveTask.setDragRotate(self, {
		isRotate : self.isRotation,
		isDrag : self.isDrag,
		layer : self.layer,
		callback : function(){
			self.touchStart = false;
			var r = Math.round(self.rotation()/22.5) * 22.5;
			if(r == 360) r = 0;
			self.rotation(r);
			self.controller.tanMouseUp(self);
		},
		rotate : function(degree){
			self.controller.rotate(degree);
		}
	});
};
/**
 *
 * @param target
 * @param options = {
 *    isRotate : boolean,           - Ќужноли поворачивать объект
 *    isDrag : boolean,             - Ќужно ли перемещать объект
 *    layer : Konva.Layer,          - —лой в котором находитс€ объект до этой функции
 *    callback() : Function         - ‘ункци€, которую нужно вызвать после заверщени€ работы с объектом
 *    rotate(degree) : Function     - ‘ункци€ выполн€ема€ при элементарном повороте
 * }
 */
InteractiveTask.setDragRotate = function(target, options){
	if(!options.isRotate && !options.isDrag){
		options.callback();
		return;
	};
	var dragLayer = InteractiveTask.DRAGANDDROP_LAYER || options.layer || new Konva.Layer();
	var layer =  target.getLayer();
	var zIndex = (target.remZIndex)?target.remZIndex:target.getZIndex();

	var targetRect = target.getClientRect();
	var cacheOffset = Math.abs(targetRect.width/2 - targetRect.height/2);

	target.moveTo(dragLayer);

	layer.batchDraw();
	dragLayer.batchDraw();
	var isDrawBorderForCache = false;
	if(target.cacheRectangle){
		target.cache({
			x : -targetRect.width/2,
			y : -targetRect.height/2,
			width : targetRect.width,
			height : targetRect.height,
			offset : cacheOffset,
			drawBorder : isDrawBorderForCache
		});
	}else{
		target.cache({
			offset : cacheOffset,
			drawBorder : isDrawBorderForCache
		});
	};


	InteractiveTask.STAGE.on("mouseup touchend", function(){
		this.off("mousemove touchmove");
		this.off("mouseup touchend");
		target.dragBoundFunc(function(pos){return pos;});
		target.stopDrag();
		target.clearCache();
		target.moveTo(layer);
		if(InteractiveTask.CONST.IS_SET_BACK){
			target.setZIndex(zIndex);
		};

		options.callback();
		dragLayer.batchDraw();
		layer.batchDraw();
	});


	if(!options.isRotate){
		InteractiveTask.dragFunction(target);
	}else if(!options.isDrag){
		InteractiveTask.rotateFunction(target, options.rotate, dragLayer);
	}else{
		InteractiveTask.rotateOrDragFunction(target, options.rotate, dragLayer);
	};
};
InteractiveTask.rotateFunction = function(target, callback, draglayer){
	var touchPos = InteractiveTask.STAGE.getPointerPosition();
	var mcXc = touchPos.x;
	var mcYc = touchPos.y;
	var mouseStartXFromCenter =   mcXc - target.getAbsolutePosition()["x"];
	var mouseStartYFromCenter =  mcYc - target.getAbsolutePosition()["y"];
	var mouseStartAngle = Math.atan2(mouseStartYFromCenter, mouseStartXFromCenter);

	InteractiveTask.STAGE.on("mousemove touchmove", function(e){
		var touchPos = InteractiveTask.STAGE.getPointerPosition();
		var mcX = touchPos.x;
		var mcY = touchPos.y;
		var mouseXFromCenter =  mcX - target.getAbsolutePosition()["x"];
		var mouseYFromCenter = mcY - target.getAbsolutePosition()["y"];
		var mouseAngle = Math.atan2(mouseYFromCenter, mouseXFromCenter);
		var rotateAngle = mouseAngle - mouseStartAngle;
		mouseStartAngle = mouseAngle;
		var degree = rotateAngle*(180/Math.PI);
		//InteractiveTask.log("Current rotation" + degree);
		callback(degree);
		draglayer.batchDraw();
	});
};
InteractiveTask.dragFunction = function(target){
	var boundRectangle = target.getClientRect();
	var width = boundRectangle.width;
	var height = boundRectangle.height;
	target.dragBoundFunc(function(pos){
		var X=pos.x;
		var Y=pos.y;
		var scaleX =InteractiveTask.STAGE.scaleX();
		var scaleY =InteractiveTask.STAGE.scaleY();

		if(X<width*scaleX/2){X=width*scaleX/2;};
		if(X>InteractiveTask.STAGE.width()-width*scaleX/2){X=InteractiveTask.STAGE.width()-width*scaleX/2;};
		if(Y<height*scaleY/2){Y=height*scaleY/2;};
		if(Y>InteractiveTask.STAGE.height()-height*scaleY/2){Y=InteractiveTask.STAGE.height()-height*scaleY/2;};
		return({x:X, y:Y});
	});
	target.startDrag();
};
InteractiveTask.rotateOrDragFunction = function(target, callback, dragLayer){
	var boundRectangle = target.dragBoundRectangle = target.dragBoundRectangle || target.getClientRect();
	//InteractiveTask.log(target);
	var scaleX = target.scale().x;
	var scaleY = target.scale().y;
	var r = (boundRectangle.width*InteractiveTask.STAGE.scaleX()*scaleX<boundRectangle.height*InteractiveTask.STAGE.scaleY()*scaleY)?((boundRectangle.width*InteractiveTask.STAGE.scaleX()*scaleX/2)*0.7):((boundRectangle.height*InteractiveTask.STAGE.scaleY()*scaleY/2)*0.7);
	var touchPos = InteractiveTask.STAGE.getPointerPosition();
	var mcXc = touchPos.x;
	var mcYc = touchPos.y;
	var mouseStartXFromCenter =   mcXc - target.getAbsolutePosition()["x"];
	var mouseStartYFromCenter =  mcYc - target.getAbsolutePosition()["y"];
	var mouseStartAngle = Math.atan2(mouseStartYFromCenter, mouseStartXFromCenter);
	if( mcXc>=parseInt(target.getAbsolutePosition()["x"]-r) &&
		mcXc<=parseInt(target.getAbsolutePosition()["x"]+r) &&
		mcYc>=parseInt(target.getAbsolutePosition()["y"]-r) &&
		mcYc<=parseInt(target.getAbsolutePosition()["y"]+r)){
		InteractiveTask.dragFunction(target);
	}else{
		InteractiveTask.rotateFunction(target, callback, dragLayer);
	};
};


/**
 *
 * @param time - строковое представление времени всего п€ть символов
 *  ѕервые два - минуты
 *  ѕоследние два - секунды
 *  ¬ центре - разделитель
 */
InteractiveTask.getTimeByString = function(time){
	return parseInt(time.substr(0,2))*60 +  parseInt(time.substr(3,2));
};

InteractiveTask.disposeObject = function(object){
	for(var node in object){
		object[node] = null;
	};
};
/**
 * ‘ункци€ воспроизведени€ внешнего звука (завершение/начало задани€)
 * @param player - объект плеера в котором вызываетс€ продолжение задани€
 */
InteractiveTask.audioControl = function(player){
	var audio = null;
	var link = "";
	var name = "";
	var toDispatch = false;
	var playAudio;
	/**
	 * »нициализаци€ нового аудиофайла
	 * @param src - ссылка на файл   InteractiveTask.AUDIO.init(InteractiveTask.PATH+"audio/"+this.getStartAudioID(this.currentTaskID)+".wav", false);
	 * @param isDispatch - производить ли продолжение заданий после проигрывани€ звука
	 */
	this.init = function(src, isDispatch){
		this.clear();
		link = InteractiveTask.PATH+"audio/"+src+".wav";
		name = src;
		toDispatch = isDispatch;

		audio = InteractiveTask.LIBRARY.getAudio(name);
		if(audio){
			playAudio = _playAudio;

		}else{
			audio = new Audio(link);
			playAudio = _loadPlayAudio;
		}
		playAudio();
	};
	this.clear = function(){
		audioStop();
		clearAudio();
	};
	function _loadPlayAudio(){
		try{
			audio.loop = false;
		}catch(e){};
		audio.addEventListener('ended', onEnded, false);
		audio.addEventListener('error', onError, false);
		audio.addEventListener('canplaythrough', onPlayThrough, false);
		audio.addEventListener('loadeddata', onLoad, false);
		audio.load();
		/*try{
		 audio.currentTime = 0;
		 }catch(e){
		 InteractiveTask.error(e);
		 onTimeOut();
		 };*/
	};
	function _playAudio(){
		InteractiveTask.log("[player - audio] - play without load");
		audio.currentTime = 0;
		audio.addEventListener('ended', onEnded, false);
		audio.play();
	};
	function onEnded(){
		InteractiveTask.log("[player - audio] - ended play");
		clearAudio();
		dispatchComplate();
	};
	function onError(){
		InteractiveTask.log("[player - audio] - error play");
		clearAudio();
		dispatchComplate();
	};
	function onPlayThrough(){
		InteractiveTask.log("[player - audio] - audio play");
		InteractiveTask.LIBRARY.setAudio(name, audio);
		audio.play();
	};
	function onLoad(){
		InteractiveTask.log("[player - audio] - audio LOAD");
	};
	function clearAudio(){
		if(!audio) return;
		InteractiveTask.log("[player - audio] - remove listeners");
		audio.removeEventListener('ended', onEnded, false);
		audio.removeEventListener('error', onError, false);
		audio.removeEventListener('canplaythrough', onPlayThrough, false);
		audio.removeEventListener('loadeddata', onLoad, false);
		audio = null;
	}
	function audioStop(){
		try{
			audio.pause();
		}catch(e){};
	};
	function onTimeOut(){
		audioStop();
		//clearAudio();
		if(confirm("Can't play audio. \n Try again?")){
			playAudio();
		}else{
			dispatchComplate();
		};
	};
	function dispatchComplate(){
		if(toDispatch) player.startCurrentTask();
	};

};